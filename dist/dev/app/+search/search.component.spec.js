"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var search_component_1 = require("./search.component");
var Observable_1 = require("rxjs/Observable");
var mock_app_store_1 = require("../store/spec-helpers/mock-app.store");
function main() {
    describe('Search Component', function () {
        var componentUnderTest;
        var mockSearchService;
        var mockUserCan;
        var mockSearchContext;
        var mockFilter;
        var mockUserPreferences;
        var mockSortDefinition;
        var mockCart;
        var mockAssetService;
        var mockRenderer;
        var mockWindow;
        var mockRouter;
        var mockActivatedRoute;
        var mockRefDetector;
        var mockStore;
        var searchResetDispatchSpy;
        var canEditCollection;
        var confirmationDialogDispatchSpy;
        beforeEach(function () {
            mockUserCan = {
                administerQuotes: function () { return false; },
                editCollection: function () { return Observable_1.Observable.of(canEditCollection); }
            };
            mockSearchContext = {
                update: null,
                go: jasmine.createSpy('go'),
                remove: jasmine.createSpy('remove'),
                state: {
                    q: 'cat', i: 7, n: 100, sortId: 23, filterIds: '1517',
                    filterValues: '1517:2015-12-10 - 2016-12-12'
                }
            };
            mockFilter = {
                load: jasmine.createSpy('load').and.returnValue(Observable_1.Observable.of([])),
                set: jasmine.createSpy('set'),
                active: jasmine.createSpy('active'),
                toggle: jasmine.createSpy('toggle'),
                getActive: jasmine.createSpy('getActive').and.returnValue({ filters: [{ filterId: 1 }, { filterId: 2 }, { filterId: 3, filterValue: 'Cat' }], ids: [1, 2, 3], values: ['Cat'] }),
                addCustom: jasmine.createSpy('addCustom'),
                toggleExclusive: jasmine.createSpy('toggleExclusive'),
                clear: jasmine.createSpy('clear'),
                toggleFilterGroup: jasmine.createSpy('toggleFilterGroup')
            };
            mockUserPreferences = {
                data: Observable_1.Observable.of({ displayFilterCounts: false, displayFilterTree: true }),
                toggleFilterCount: jasmine.createSpy('toggleFilterCount'),
                openCollectionTray: jasmine.createSpy('openCollectionTray'),
                updateSortPreference: jasmine.createSpy('updateSortPreference'),
                state: { displayFilterCounts: false, displayFilterTree: true },
                updateAssetViewPreference: jasmine.createSpy('updateAssetViewPreference')
            };
            mockSortDefinition = {
                updateSortPreference: jasmine.createSpy('updateSortPreference'),
                update: jasmine.createSpy('update'),
                data: Observable_1.Observable.of({ currentSort: 'mockSort' })
            };
            mockCart = {
                addAssetToProjectInCart: jasmine.createSpy('addAssetToProjectInCart')
            };
            mockWindow = {
                nativeWindow: {
                    location: { href: null },
                    innerWidth: 500
                }
            };
            mockActivatedRoute = {
                snapshot: {
                    params: {
                        gq: '[{"ids":[13,18],"names":["press packet","day 04"]},{"ids":[3],"names":["adam scott"]}]',
                        n: 1,
                        i: 100
                    }
                }
            };
            mockRouter = {
                navigate: jasmine.createSpy('navigate'),
                events: Observable_1.Observable.of({})
            };
            mockRefDetector = {
                markForCheck: function () { return true; }
            };
            mockStore = new mock_app_store_1.MockAppStore();
            searchResetDispatchSpy = mockStore.createActionFactoryMethod('search', 'reset');
            confirmationDialogDispatchSpy = mockStore.createActionFactoryMethod('dialog', 'showConfirmation');
            componentUnderTest = new search_component_1.SearchComponent(mockUserCan, mockFilter, mockCart, mockSortDefinition, mockSearchContext, mockUserPreferences, mockWindow, mockActivatedRoute, mockRouter, mockRefDetector, mockStore);
        });
        describe('constructor()', function () {
            it('should not set the path if the "gq" parameter doesn\'t exist', function () {
                mockActivatedRoute = { snapshot: { params: { i: 1, n: 100 } } };
                componentUnderTest = new search_component_1.SearchComponent(mockUserCan, mockFilter, mockCart, mockSortDefinition, mockSearchContext, mockUserPreferences, mockWindow, mockActivatedRoute, mockRouter, mockRefDetector, mockStore);
                expect(componentUnderTest.path).toEqual('');
            });
            it('should set the path if there is a "gq" parameter', function () {
                expect(componentUnderTest.path).toEqual([
                    { 'ids': [13, 18], 'names': ['press packet', 'day 04'] },
                    { 'ids': [3], 'names': ['adam scott'] }
                ]);
            });
            it('returns observable of true when the \'filtersAreAvailable\'in the store is true', function () {
                mockStore.createStateSection('headerDisplayOptions', { filtersAreAvailable: true });
                componentUnderTest = new search_component_1.SearchComponent(mockUserCan, mockFilter, mockCart, mockSortDefinition, mockSearchContext, mockUserPreferences, mockWindow, mockActivatedRoute, mockRouter, mockRefDetector, mockStore);
                var areAvailable;
                componentUnderTest.filtersAreAvailable.take(1).subscribe(function (available) { return areAvailable = available; });
                expect(areAvailable).toBe(true);
            });
        });
        describe('onCLickBreadcrumb()', function () {
            it('should append to the path and call router.navigate()', function () {
                componentUnderTest.path = [
                    { 'ids': [13, 18], 'names': ['press packet', 'day 04'] },
                    { 'ids': [3], 'names': ['adam scott'] }
                ];
                componentUnderTest.onClickBreadcrumb(1);
                expect(mockRouter.navigate).toHaveBeenCalledWith([
                    '/gallery-view',
                    { path: '[{"ids":[13,18],"names":["press packet","day 04"]}]' }
                ]);
            });
        });
        describe('onresize()', function () {
            it('Should set the screen size variable when screen size change', function () {
                mockWindow.nativeWindow.onresize();
                expect(componentUnderTest.screenWidth).toBe(500);
            });
        });
        describe('ngOnDestroy()', function () {
            it('dispatch the search reset action', function () {
                componentUnderTest.ngOnDestroy();
                mockStore.expectDispatchFor(searchResetDispatchSpy);
            });
        });
        describe('countToggle()', function () {
            it('Should call the filter service get with the search context state and the opposite boolean value' +
                +' of the current displayFilterCounts boolean', function () {
                componentUnderTest.countToggle();
                expect(componentUnderTest.filter.load).toHaveBeenCalledWith({ q: 'cat', i: 7, n: 100, sortId: 23, filterIds: '1517', filterValues: '1517:2015-12-10 - 2016-12-12' }, true);
            });
            it('Should call the user preference service to toggle the filter count boolean', function () {
                componentUnderTest.countToggle();
                expect(mockUserPreferences.toggleFilterCount).toHaveBeenCalled();
            });
        });
        describe('changePage()', function () {
            it('Should call the update setter on search context to update the search context state', function () {
                componentUnderTest.changePage(1);
                expect(mockSearchContext.update).toEqual({ i: 1 });
            });
            it('Should call the go method on searchContext', function () {
                componentUnderTest.changePage(1);
                expect(mockSearchContext.go).toHaveBeenCalled();
            });
        });
        describe('filterEvent()', function () {
            it('Should call the filter service with a filter id to toggle its boolean on/off value', function () {
                componentUnderTest.filterEvent({ event: 'toggleFilter', filter: { filterId: 1 } });
                expect(componentUnderTest.filter.toggle).toHaveBeenCalledWith(1);
                expect(mockSearchContext.go).toHaveBeenCalled();
            });
            it('Should call the filter service to toggle a filter group to show/hide', function () {
                componentUnderTest.filterEvent({ event: 'toggleFilterGroup', filter: { filterId: 1 } });
                expect(componentUnderTest.filter.toggleFilterGroup).toHaveBeenCalledWith({ filterId: 1 });
            });
            it('Should call the filter service to apply an exculsive filter', function () {
                componentUnderTest.filterEvent({ event: 'applyExclusiveFilter', filter: { filterId: 1 } });
                expect(componentUnderTest.filter.toggleExclusive).toHaveBeenCalledWith({ filterId: 1 });
                expect(mockSearchContext.go).toHaveBeenCalled();
            });
            it('Should call the filter service to apply a custom value on a filter', function () {
                componentUnderTest.filterEvent({ event: 'applyCustomValue', filter: { filterId: 1 }, customValue: 'mockCustomValue' });
                expect(componentUnderTest.filter.addCustom).toHaveBeenCalledWith({ filterId: 1 }, 'mockCustomValue');
                expect(mockSearchContext.go).toHaveBeenCalled();
            });
            it('Should call the filter service to clear all filters / reset', function () {
                componentUnderTest.filterEvent({ event: 'clearFilters', filter: { filterId: 1 } });
                expect(componentUnderTest.filter.clear).toHaveBeenCalled();
                expect(mockSearchContext.go).toHaveBeenCalled();
            });
        });
        describe('onSortResults()', function () {
            it('Should call the user preference service to update the user sort preference', function () {
                componentUnderTest.sortResults({ id: 'sortByDate' });
                expect(mockUserPreferences.updateSortPreference).toHaveBeenCalledWith('sortByDate');
            });
            it('Should call sort definition service to update with new sort', function () {
                componentUnderTest.sortResults({ id: 'sortByDate' });
                expect(mockSortDefinition.update).toHaveBeenCalledWith({ currentSort: { id: 'sortByDate' } });
            });
            it('Should call the search context service to update the store with the new sort preference for the url', function () {
                componentUnderTest.sortResults({ id: 'sortByDate' });
                expect(mockSearchContext.update).toEqual({ 'i': 1, 'sortId': 'sortByDate' });
            });
            it('Should call the search context service to exectue and new browser url', function () {
                componentUnderTest.sortResults({ id: 'sortByDate' });
                expect(mockSearchContext.go).toHaveBeenCalled();
            });
        });
        describe('changeAssetView()', function () {
            it('Should update user preference when new view type is selected', function () {
                componentUnderTest.changeAssetView('list');
                expect(mockUserPreferences.updateAssetViewPreference).toHaveBeenCalledWith('list');
            });
        });
        describe('addAssetToCart()', function () {
            it('Should call the cart summary service to add an asset to the cart', function () {
                componentUnderTest.addAssetToCart({ assetId: 'mockId' });
                expect(mockCart.addAssetToProjectInCart).toHaveBeenCalledWith({ lineItem: { asset: { assetId: 'mockId' } } });
            });
        });
        describe('filterAssets()', function () {
            it('Should reset the page number to page 1', function () {
                mockFilter.getActive = jasmine.createSpy('getActive').and.returnValue({ filters: [], ids: [], values: [] });
                componentUnderTest = new search_component_1.SearchComponent(mockUserCan, mockFilter, mockCart, mockSortDefinition, mockSearchContext, mockUserPreferences, mockWindow, mockActivatedRoute, mockRouter, mockRefDetector, mockStore);
                componentUnderTest.filterEvent({ event: 'clearFilters', filter: { filterId: 1 } });
                expect(mockSearchContext.update).toEqual({ i: 1 });
            });
            it('Should update the search context with the filter ids', function () {
                mockFilter.getActive = jasmine.createSpy('getActive').and.returnValue({ filters: [], ids: [1, 2, 3], values: [] });
                componentUnderTest = new search_component_1.SearchComponent(mockUserCan, mockFilter, mockCart, mockSortDefinition, mockSearchContext, mockUserPreferences, mockWindow, mockActivatedRoute, mockRouter, mockRefDetector, mockStore);
                componentUnderTest.filterEvent({ event: 'clearFilters', filter: { filterId: 1 } });
                expect(mockSearchContext.update).toEqual({ 'filterIds': '1,2,3' });
            });
            it('Should remove the filterIds from the search context', function () {
                mockFilter.getActive = jasmine.createSpy('getActive').and.returnValue({ filters: [], ids: [], values: ['cat', 'dog'] });
                componentUnderTest = new search_component_1.SearchComponent(mockUserCan, mockFilter, mockCart, mockSortDefinition, mockSearchContext, mockUserPreferences, mockWindow, mockActivatedRoute, mockRouter, mockRefDetector, mockStore);
                componentUnderTest.filterEvent({ event: 'clearFilters', filter: { filterId: 1 } });
                expect(mockSearchContext.remove).toEqual('filterIds');
            });
            it('Should update the search context with the filter values', function () {
                mockFilter.getActive = jasmine.createSpy('getActive').and.returnValue({ filters: [], ids: [], values: ['cat', 'dog'] });
                componentUnderTest = new search_component_1.SearchComponent(mockUserCan, mockFilter, mockCart, mockSortDefinition, mockSearchContext, mockUserPreferences, mockWindow, mockActivatedRoute, mockRouter, mockRefDetector, mockStore);
                componentUnderTest.filterEvent({ event: 'clearFilters', filter: { filterId: 1 } });
                expect(mockSearchContext.update).toEqual({ 'filterValues': 'cat,dog' });
            });
            it('Should remove the filterValues from the search context', function () {
                mockFilter.getActive = jasmine.createSpy('getActive').and.returnValue({ filters: [], ids: [], values: [] });
                componentUnderTest = new search_component_1.SearchComponent(mockUserCan, mockFilter, mockCart, mockSortDefinition, mockSearchContext, mockUserPreferences, mockWindow, mockActivatedRoute, mockRouter, mockRefDetector, mockStore);
                componentUnderTest.filterEvent({ event: 'clearFilters', filter: { filterId: 1 } });
                expect(mockSearchContext.remove).toEqual('filterValues');
            });
            it('Should call go on search context when it has filtered the assets', function () {
                mockFilter.getActive = jasmine.createSpy('getActive').and.returnValue({ filters: [], ids: [], values: [] });
                componentUnderTest = new search_component_1.SearchComponent(mockUserCan, mockFilter, mockCart, mockSortDefinition, mockSearchContext, mockUserPreferences, mockWindow, mockActivatedRoute, mockRouter, mockRefDetector, mockStore);
                componentUnderTest.filterEvent({ event: 'clearFilters', filter: { filterId: 1 } });
                expect(mockSearchContext.go).toHaveBeenCalled();
            });
        });
        describe('canEditCollection()', function () {
            beforeEach(function () {
                mockStore.createStateSection('activeCollection', { collection: { some: 'collection' } });
            });
            it('returns true if userCan.editCollection() returns true', function () {
                canEditCollection = true;
                var result;
                componentUnderTest.canEditCollection.take(1).subscribe(function (res) { return result = res; });
                expect(result).toBe(true);
            });
            it('returns false if userCan.editCollection() returns false', function () {
                canEditCollection = false;
                var result;
                componentUnderTest.canEditCollection.take(1).subscribe(function (res) { return result = res; });
                expect(result).toBe(false);
            });
        });
        describe('onClickAddAllBtn()', function () {
            it('dispatches the proper action', function () {
                mockStore.createStateSection('activeCollection', { collection: { name: 'some collection' } });
                componentUnderTest.onClickAddAllBtn();
                mockStore.expectDispatchFor(confirmationDialogDispatchSpy, {
                    title: { key: 'SEARCH.ADD_ALL_TO_COLLECTION.CONFIRM.TITLE', values: { collectionName: 'some collection' } },
                    message: { key: 'SEARCH.ADD_ALL_TO_COLLECTION.CONFIRM.MESSAGE', values: { collectionName: 'some collection' } },
                    accept: 'SEARCH.ADD_ALL_TO_COLLECTION.CONFIRM.ACCEPT',
                    decline: 'SEARCH.ADD_ALL_TO_COLLECTION.CONFIRM.DECLINE'
                }, jasmine.any(Function));
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
