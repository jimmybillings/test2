"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("rxjs/Observable");
var asset_detail_component_1 = require("./asset-detail.component");
var mock_app_store_1 = require("../../store/spec-helpers/mock-app.store");
var enhanced_asset_1 = require("../../shared/interfaces/enhanced-asset");
var mock_asset_1 = require("../../shared/mocks/mock-asset");
var index_1 = require("../../shared/modules/wazee-frame-formatter/index");
function main() {
    describe('Asset Detail Component', function () {
        var componentUnderTest;
        var mockStore;
        var asset;
        var collection;
        var transcodeTargets;
        var detailTypeMap;
        var finalAsset;
        beforeEach(function () {
            collection = {
                assets: {
                    items: [
                        { assetId: 1, uuid: 'ABCD', timeStart: 123, timeEnd: 1000 },
                        { assetId: 1, uuid: 'EFGH', timeStart: 456, timeEnd: 1000 },
                        { assetId: 1, uuid: 'IJKL', timeStart: 789, timeEnd: 1000 },
                        { assetId: 1, uuid: 'MNOP', timeStart: 102, timeEnd: 1000 },
                        { assetId: 1, uuid: 'QRST', timeStart: 103, timeEnd: 1000 }
                    ]
                }
            };
            transcodeTargets = ['master_copy', '1080i', '1080p'];
            detailTypeMap = {
                common: ['field'], filter: true, id: 13, name: 'Core Packages', primary: [], secondary: [], siteName: 'core'
            };
            finalAsset = {
                assetId: 1, clipData: [], clipThumbnailUrl: 'clipUrl.jpg', clipUrl: 'clipUrl',
                transcodeTargets: ['master_copy', '1080i', '1080p']
            };
            asset = { assetId: 1, timeStart: 102, timeEnd: 1000, clipData: [], clipThumbnailUrl: 'clipUrl.jpg', clipUrl: 'clipUrl' };
            asset.detailTypeMap = detailTypeMap;
            asset.transcodeTargets = transcodeTargets;
            mockStore = new mock_app_store_1.MockAppStore();
            mockStore.createStateSection('uiConfig', {
                components: {
                    global: { config: { pageSize: { value: '50' } } },
                    assetSharing: { config: { form: { items: [] } } }
                }
            });
            mockStore.createStateSection('asset', { activeAsset: { assetId: 1234, price: 99 } });
            componentUnderTest = new asset_detail_component_1.AssetDetailComponent(mockStore);
            componentUnderTest.asset = {
                assetId: 1, clipData: [], clipThumbnailUrl: 'clipUrl.jpg', clipUrl: 'clipUrl', transcodeTargets: transcodeTargets
            };
            componentUnderTest.window = window;
            componentUnderTest.subclipMarkers = undefined;
            componentUnderTest.userCan = { administerQuotes: function () { return false; }, editCollections: function () { return true; } };
        });
        describe('asset setter', function () {
            it('sets the component\'s asset property', function () {
                componentUnderTest.asset = asset;
                expect(componentUnderTest.asset).toEqual(asset);
            });
            it('initializes the selectedTarget property to the first target in the array', function () {
                componentUnderTest.asset = asset;
                expect(componentUnderTest.selectedTarget).toEqual('master_copy');
            });
        });
        describe('addAssetToActiveCollection()', function () {
            it('dispatches the expected action', function () {
                var spy = mockStore.createActionFactoryMethod('activeCollection', 'addAsset');
                componentUnderTest.addAssetToActiveCollection();
                mockStore.expectDispatchFor(spy, componentUnderTest.asset, null);
            });
            it('with subclipping defined dispatches the expected action', function () {
                componentUnderTest.subclipMarkers = { in: {}, out: {} };
                var spy = mockStore.createActionFactoryMethod('activeCollection', 'addAsset');
                componentUnderTest.addAssetToActiveCollection();
                mockStore.expectDispatchFor(spy, componentUnderTest.asset, { in: {}, out: {} });
            });
        });
        describe('removeAssetFromActiveCollection()', function () {
            it('dispatches the confirmation prompt', function () {
                var spy = mockStore.createActionFactoryMethod('dialog', 'showConfirmation');
                componentUnderTest.removeAssetFromActiveCollection();
                mockStore.expectDispatchFor(spy, {
                    title: 'COLLECTION.REMOVE_ASSET.TITLE',
                    message: 'COLLECTION.REMOVE_ASSET.MESSAGE',
                    accept: 'COLLECTION.REMOVE_ASSET.ACCEPT',
                    decline: 'COLLECTION.REMOVE_ASSET.DECLINE'
                }, jasmine.any(Function));
            });
            it('dispatches the correct action via the onAccept callback', function () {
                var dialogSpy = mockStore.createActionFactoryMethod('dialog', 'showConfirmation');
                var removeSpy = mockStore.createActionFactoryMethod('activeCollection', 'removeAsset');
                dialogSpy.and.callFake(function (_, onAcceptCallback) {
                    dialogSpy.onAcceptCallback = onAcceptCallback;
                });
                componentUnderTest.removeAssetFromActiveCollection();
                dialogSpy.onAcceptCallback();
                mockStore.expectDispatchFor(removeSpy, componentUnderTest.asset);
            });
        });
        describe('updateAssetInActiveCollection()', function () {
            it('dispatches the expected action', function () {
                var startFrame = new index_1.Frame(25).setFromFrameNumber(1);
                var endFrame = new index_1.Frame(25).setFromFrameNumber(2);
                componentUnderTest.subclipMarkers = { in: startFrame, out: endFrame };
                var spy = mockStore.createActionFactoryMethod('activeCollection', 'updateAssetMarkers');
                componentUnderTest.updateAssetInActiveCollection();
                mockStore.expectDispatchFor(spy, componentUnderTest.asset, componentUnderTest.subclipMarkers);
            });
        });
        describe('addAssetToCart()', function () {
            it('Should emit an event to add an asset to the cart/quote without subclipping', function () {
                componentUnderTest.asset = { assetId: 1234, transcodeTargets: transcodeTargets };
                spyOn(componentUnderTest.addToCart, 'emit');
                componentUnderTest.addAssetToCart();
                expect(componentUnderTest.addToCart.emit)
                    .toHaveBeenCalledWith({ assetId: 1234, markers: null, selectedTranscodeTarget: 'master_copy' });
            });
            it('Should emit an event to add an asset to the cart/quote with subclipping', function () {
                componentUnderTest.asset = { assetId: 1234, transcodeTargets: transcodeTargets };
                componentUnderTest.subclipMarkers = { in: {}, out: {} };
                spyOn(componentUnderTest.addToCart, 'emit');
                componentUnderTest.addAssetToCart();
                expect(componentUnderTest.addToCart.emit)
                    .toHaveBeenCalledWith({
                    assetId: 1234, markers: { in: {}, out: {} }, selectedTranscodeTarget: 'master_copy'
                });
            });
        });
        describe('previousPage()', function () {
            it('Should emit an event to go back to the previous page', function () {
                spyOn(componentUnderTest.onPreviousPage, 'emit');
                componentUnderTest.previousPage();
                expect(componentUnderTest.onPreviousPage.emit)
                    .toHaveBeenCalled();
            });
        });
        describe('hasPageHistory', function () {
            it('Should return false if the browser has not yet loaded previous page history', function () {
                expect(componentUnderTest.hasPageHistory).toBe(false);
            });
            it('Should return true if the browser has loaded previous page history', function () {
                componentUnderTest.window.history.pushState({ data: 'somedata1' }, 'test1');
                componentUnderTest.window.history.pushState({ data: 'somedata2' }, 'test2');
                componentUnderTest.window.history.pushState({ data: 'somedata3' }, 'test3');
                expect(componentUnderTest.hasPageHistory).toBe(true);
            });
        });
        describe('canComment getter', function () {
            it('returns false when the asset is a search', function () {
                componentUnderTest.asset = { type: 'search' };
                expect(componentUnderTest.canComment).toBe(false);
            });
            it('returns true when comment form config does exist', function () {
                ['cart', 'quoteEdit', 'quoteShow', 'collection', 'order'].forEach(function (type) {
                    componentUnderTest.asset = { type: type };
                    expect(componentUnderTest.canComment).toBe(true);
                });
            });
        });
        describe('canShare getter', function () {
            var tests = [
                { assetType: 'cart', userCanShare: true, expectedResult: false },
                { assetType: 'collection', userCanShare: true, expectedResult: false },
                { assetType: 'order', userCanShare: true, expectedResult: false },
                { assetType: 'quoteEdit', userCanShare: true, expectedResult: false },
                { assetType: 'quoteShow', userCanShare: true, expectedResult: false },
                { assetType: 'search', userCanShare: true, expectedResult: true }
            ];
            tests.forEach(function (test) {
                it("returns " + test.expectedResult + " for asset type '" + test.assetType + "'", function () {
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset({}, test.assetType);
                    componentUnderTest.userCan = { createAccessInfo: function () { return test.userCanShare; } };
                    expect(componentUnderTest.canShare).toBe(test.expectedResult);
                });
            });
        });
        describe('showAdvancedPlayer getter', function () {
            it('returns true if the user can view the advanced player', function () {
                componentUnderTest.userCan = { viewAdvancedPlayer: function () { return true; } };
                expect(componentUnderTest.showAdvancedPlayer).toBe(true);
            });
            it('returns false if the user cannot view the advanced player', function () {
                componentUnderTest.userCan = { viewAdvancedPlayer: function () { return false; } };
                expect(componentUnderTest.showAdvancedPlayer).toBe(false);
            });
        });
        describe('shareButtonLabelKey getter', function () {
            var tests = [
                { markers: undefined, expectedKey: 'ASSET.DETAIL.SHARING_BTN_TITLE' },
                { markers: null, expectedKey: 'ASSET.DETAIL.SHARING_BTN_TITLE' },
                { markers: { in: 'x' }, expectedKey: 'ASSET.DETAIL.SHARING_BTN_TITLE' },
                { markers: { in: 'x', out: null }, expectedKey: 'ASSET.DETAIL.SHARING_BTN_TITLE' },
                { markers: { out: 'y' }, expectedKey: 'ASSET.DETAIL.SHARING_BTN_TITLE' },
                { markers: { in: null, out: 'y' }, expectedKey: 'ASSET.DETAIL.SHARING_BTN_TITLE' },
                { markers: { in: 'x', out: 'y' }, expectedKey: 'ASSET.DETAIL.SHARING_SUBCLIP_BTN_TITLE' }
            ];
            tests.forEach(function (test) {
                it("returns '" + test.expectedKey + "' for markers = " + test.markers, function () {
                    componentUnderTest.subclipMarkers = test.markers;
                    expect(componentUnderTest.shareButtonLabelKey).toEqual(test.expectedKey);
                });
            });
        });
        describe('rights getter', function () {
            it('returns the value of Rights.Reproduction metadata in the asset', function () {
                componentUnderTest.asset =
                    enhanced_asset_1.enhanceAsset({ primary: [{ name: 'Rights.Reproduction', value: 'some value' }] }, 'search');
                expect(componentUnderTest.rights).toEqual('some value');
            });
        });
        describe('canShowPrice()', function () {
            it('Returns true if its a rights managed asset with a valid price', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ price: 100, primary: [{ name: 'Rights.Reproduction', value: 'Rights Managed' }] }, 'search');
                componentUnderTest.usagePrice = 100;
                expect(componentUnderTest.canShowPrice).toBe(true);
            });
            it('Returns true if its a royalty free asset with a valid price', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ price: 100, primary: [{ name: 'Rights.Reproduction', value: 'Royalty Free' }] }, 'search');
                expect(componentUnderTest.canShowPrice).toBe(true);
            });
            it('Returns false if its a rights managed asset with no price', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ primary: [{ name: 'Rights.Reproduction', value: 'Rights Managed' }] }, 'search');
                componentUnderTest.usagePrice = undefined;
                expect(componentUnderTest.canShowPrice).toBe(false);
            });
            it('Returns false if its a royalty free asset with no price', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ primary: [{ name: 'Rights.Reproduction', value: 'Royalty Free' }] }, 'search');
                expect(componentUnderTest.canShowPrice).toBe(false);
            });
        });
        describe('canShowNoPricingAvailableNotice()', function () {
            it('Returns true if its a rights managed asset with no price property', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ primary: [{ name: 'Rights.Reproduction', value: 'Rights Managed' }] }, 'search');
                expect(componentUnderTest.canShowNoPricingAvailableNotice).toBe(true);
            });
            it('Returns false if its a rights managed asset with a price property', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ price: 100, primary: [{ name: 'Rights.Reproduction', value: 'Rights Managed' }] }, 'search');
                expect(componentUnderTest.canShowNoPricingAvailableNotice).toBe(false);
            });
            it('Returns true if its a Royalty Free asset with no price property', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ primary: [{ name: 'Rights.Reproduction', value: 'Royalty Free' }] }, 'search');
                expect(componentUnderTest.canShowNoPricingAvailableNotice).toBe(true);
            });
            it('Returns false if its a Royalty Free asset with no price property', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ price: 100, primary: [{ name: 'Rights.Reproduction', value: 'Royalty Free' }] }, 'search');
                expect(componentUnderTest.canShowNoPricingAvailableNotice).toBe(false);
            });
        });
        describe('price getters', function () {
            var tests = [
                { rights: 'Royalty Free', price: 12.34, usagePrice: null, expectedResult: 12.34 },
                { rights: 'Royalty Free', price: null, usagePrice: null, expectedResult: null },
                { rights: 'Royalty Free', price: 0, usagePrice: null, expectedResult: null },
                { rights: 'Royalty Free', price: 12.34, usagePrice: 56.78, expectedResult: 12.34 },
                { rights: 'Royalty Free', price: null, usagePrice: 56.78, expectedResult: null },
                { rights: 'Royalty Free', price: 0, usagePrice: 56.78, expectedResult: null },
                { rights: 'Rights Managed', price: 12.34, usagePrice: null, expectedResult: null, hasAttributes: true },
                { rights: 'Rights Managed', price: null, usagePrice: null, expectedResult: null },
                { rights: 'Rights Managed', price: 0, usagePrice: null, expectedResult: null },
                { rights: 'Rights Managed', price: 12.34, usagePrice: 56.78, expectedResult: 56.78 },
                { rights: 'Rights Managed', price: null, usagePrice: 56.78, expectedResult: 56.78 },
                { rights: 'Rights Managed', price: 0, usagePrice: 56.78, expectedResult: 56.78 },
                { rights: null, price: 12.34, usagePrice: null, expectedResult: null },
                { rights: null, price: null, usagePrice: null, expectedResult: null },
                { rights: null, price: 0, usagePrice: null, expectedResult: null },
                { rights: null, price: 12.34, usagePrice: 56.78, expectedResult: null },
                { rights: null, price: null, usagePrice: 56.78, expectedResult: null },
                { rights: null, price: 0, usagePrice: 56.78, expectedResult: null }
            ];
            tests.forEach(function (test) {
                var rights = "" + (test.rights ? test.rights : 'no rights');
                describe("for a " + rights + " asset", function () {
                    var price = (test.hasOwnProperty('price') && test.price > 0) ? "price = " + test.price : 'no price';
                    var usagePrice = test.usagePrice ? "usage price = " + test.usagePrice : 'no usage price';
                    it("returns " + test.expectedResult + " for " + price + " and " + usagePrice, function () {
                        componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ price: test.price, primary: [{ name: 'Rights.Reproduction', value: test.rights }] }, 'search');
                        componentUnderTest.usagePrice = test.usagePrice;
                        expect(componentUnderTest.price).toBe(test.expectedResult);
                    });
                });
            });
        });
        describe('canPerformCartActions getter', function () {
            var tests = [
                { haveCart: true, rights: 'Royalty Free', price: 12.34, expectedResult: true },
                { haveCart: true, rights: 'Royalty Free', price: 0, expectedResult: true },
                { haveCart: true, rights: 'Royalty Free', price: 'NotAProperty', expectedResult: false },
                { haveCart: true, rights: 'Rights Managed', price: 12.34, expectedResult: true },
                { haveCart: true, rights: 'Rights Managed', price: 0, expectedResult: true },
                { haveCart: true, rights: 'Rights Managed', price: 'NotAProperty', expectedResult: false },
                { haveCart: true, rights: null, price: 12.34, expectedResult: false },
                { haveCart: true, rights: null, price: 0, expectedResult: false },
                { haveCart: true, rights: null, price: null, expectedResult: false },
                { haveCart: false, rights: 'Royalty Free', price: 12.34, expectedResult: false },
                { haveCart: false, rights: 'Royalty Free', price: 0, expectedResult: false },
                { haveCart: false, rights: 'Royalty Free', price: null, expectedResult: false },
                { haveCart: false, rights: 'Rights Managed', price: 12.34, expectedResult: false },
                { haveCart: false, rights: 'Rights Managed', price: 0, expectedResult: false },
                { haveCart: false, rights: 'Rights Managed', price: null, expectedResult: false },
                { haveCart: false, rights: null, price: 12.34, expectedResult: false },
                { haveCart: false, rights: null, price: 0, expectedResult: false },
                { haveCart: false, rights: null, price: null, expectedResult: false },
            ];
            tests.forEach(function (test) {
                var withWithout = test.haveCart ? 'with' : 'without';
                var rights = test.rights ? test.rights : 'no rights';
                var price = (test.price === 0 || !!test.price) ? "price = " + test.price : 'no price';
                price = (test.price !== 'NotAProperty') ? price : 'No price property';
                it("returns " + test.expectedResult + " " + withWithout + " haveCart capability and a " + rights + " asset with " + price, function () {
                    componentUnderTest.userCan = { haveCart: function () { return test.haveCart; } };
                    if (test.price === 'NotAProperty') {
                        componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ primary: [{ name: 'Rights.Reproduction', value: test.rights }] }, 'search');
                    }
                    else {
                        componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ price: test.price, primary: [{ name: 'Rights.Reproduction', value: test.rights }] }, 'search');
                    }
                    expect(componentUnderTest.canPerformCartActions).toBe(test.expectedResult);
                });
            });
        });
        describe('canSelectTranscodeTarget getter', function () {
            beforeEach(function () {
                componentUnderTest.userCan = { addToCart: function () { return true; } };
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ transcodeTargets: { some: 'targets' }, primary: [{ name: 'Rights.Reproduction', value: 'Royalty Free' }] }, 'search');
            });
            it('returns true for a royalty free asset with transcode targets and addToCart capability', function () {
                expect(componentUnderTest.canSelectTranscodeTarget).toBe(true);
            });
            it('returns false for a non-royalty free asset', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ transcodeTargets: { some: 'targets' }, primary: [{ name: 'Rights.Reproduction', value: 'Rights Managed' }] }, 'search');
                expect(componentUnderTest.canSelectTranscodeTarget).toBe(false);
            });
            it('returns false for an asset without transcode targets', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ primary: [{ name: 'Rights.Reproduction', value: 'Rights Managed' }] }, 'search');
                expect(componentUnderTest.canSelectTranscodeTarget).toBe(false);
            });
            it('returns false without addToCart capability', function () {
                componentUnderTest.userCan = { addToCart: function () { return false; } };
                expect(componentUnderTest.canSelectTranscodeTarget).toBe(false);
            });
        });
        describe('canCalculatePrice getter', function () {
            beforeEach(function () {
                componentUnderTest.userCan = { calculatePrice: function () { return true; } };
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ primary: [{ name: 'Rights.Reproduction', value: 'Rights Managed' }] }, 'search');
            });
            it('returns true for a rights managed asset and calculatePrice capability', function () {
                expect(componentUnderTest.canEditOrApplyRights).toBe(true);
            });
            it('returns false for a non-rights managed asset', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ primary: [{ name: 'Rights.Reproduction', value: 'Royalty Free' }] }, 'search');
                expect(componentUnderTest.canEditOrApplyRights).toBe(false);
            });
            it('returns false without calculatePrice capability', function () {
                componentUnderTest.userCan = { calculatePrice: function () { return false; } };
                expect(componentUnderTest.canSelectTranscodeTarget).toBe(false);
            });
        });
        describe('canUpdateCart getter', function () {
            var tests = [
                { assetType: 'cart', expectedResult: true },
                { assetType: 'collection', expectedResult: false },
                { assetType: 'order', expectedResult: false },
                { assetType: 'quoteEdit', expectedResult: true },
                { assetType: 'quoteShow', expectedResult: false },
                { assetType: 'search', expectedResult: false },
            ];
            tests.forEach(function (test) {
                it("returns " + test.expectedResult + " for asset type '" + test.assetType + "'", function () {
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset({}, test.assetType);
                    expect(componentUnderTest.canUpdateCartAsset).toBe(test.expectedResult);
                });
            });
        });
        describe('canUpdateCollectionAsset getter', function () {
            var tests = [
                { assetType: 'cart', expectedResult: false },
                { assetType: 'collection', expectedResult: true },
                { assetType: 'order', expectedResult: false },
                { assetType: 'quoteEdit', expectedResult: false },
                { assetType: 'quoteShow', expectedResult: false },
                { assetType: 'search', expectedResult: false },
            ];
            tests.forEach(function (test) {
                it("returns " + test.expectedResult + " for asset type '" + test.assetType + "'", function () {
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset({}, test.assetType);
                    expect(componentUnderTest.canUpdateCollectionAsset).toBe(test.expectedResult);
                });
            });
        });
        describe('canEditCollectionSubclipMarkers getter', function () {
            var tests = [
                { markers: true, assetType: 'cart', expectedResult: false },
                { markers: true, assetType: 'collection', expectedResult: true },
                { markers: false, assetType: 'collection', expectedResult: false },
                { markers: true, assetType: 'order', expectedResult: false },
                { markers: true, assetType: 'quoteEdit', expectedResult: false },
                { markers: true, assetType: 'quoteShow', expectedResult: false },
                { markers: true, assetType: 'search', expectedResult: false },
            ];
            tests.forEach(function (test) {
                it("returns " + test.expectedResult + " for asset type '" + test.assetType + "'" +
                    (" and subclip markers are " + (test.markers ? '' : 'not ') + "defined "), function () {
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset({}, test.assetType);
                    if (test.markers)
                        componentUnderTest.subclipMarkers = { in: { some: 'frame' }, out: { some: 'frame' } };
                    expect(componentUnderTest.canEditCollectionSubclipMarkers).toBe(test.expectedResult);
                });
            });
        });
        describe('collectionSubclipButtonHoverTxt getter', function () {
            var tests = [
                { active: true, isSubclipped: true, expectedKey: 'ASSET.DETAIL.BUTTON.UPDATE.SUBCLIP.ACTIVE' },
                { active: true, isSubclipped: false, expectedKey: 'ASSET.DETAIL.BUTTON.ADD_NEW.SUBCLIP.ACTIVE' },
                { active: false, isSubclipped: true, expectedKey: 'ASSET.DETAIL.BUTTON.UPDATE.SUBCLIP.DISABLED' },
                { active: false, isSubclipped: false, expectedKey: 'ASSET.DETAIL.BUTTON.ADD_NEW.SUBCLIP.DISABLED' }
            ];
            tests.forEach(function (test) {
                var description = "returns " + test.expectedKey +
                    (" for a collection asset with existing subclipping " + (test.isSubclipped ? '' : 'not ') + "defined") +
                    (" and update button is " + (test.active ? 'active' : 'disabled'));
                it(description, function () {
                    componentUnderTest.activeCollection = collection;
                    componentUnderTest.subclipMarkers = test.active ? {
                        in: new index_1.Frame(25).setFromFrameNumber(1),
                        out: test.active ? new index_1.Frame(25).setFromFrameNumber(2) : new index_1.Frame(25).setFromFrameNumber(3)
                    } : null;
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset(__assign({}, asset, { uuid: test.active ? 'MNOP' : 'NOPE', timeStart: test.isSubclipped ? 103 : null, timeEnd: test.isSubclipped ? 1000 : null }), 'collection');
                    componentUnderTest.showAssetSaveSubclip = test.active;
                    expect(componentUnderTest.collectionSubclipButtonHoverTxt).toBe(test.expectedKey);
                });
            });
        });
        describe('collectionSubclipButtonLabel getter', function () {
            var tests = [
                { isSubclipped: false, expectedKey: 'ASSET.DETAIL.BUTTON.ADD_NEW.SUBCLIP.COLLECTION' },
                { isSubclipped: true, expectedKey: 'ASSET.DETAIL.BUTTON.UPDATE.SUBCLIP.COLLECTION' }
            ];
            tests.forEach(function (test) {
                var description = "returns " + test.expectedKey +
                    (" for a collection asset with subclipping " + (test.isSubclipped ? '' : 'not ') + "defined");
                it(description, function () {
                    if (test.isSubclipped)
                        componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ timeStart: 103, timeEnd: 1000 }, 'collection');
                    expect(componentUnderTest.collectionSubclipButtonLabel).toBe(test.expectedKey);
                });
            });
        });
        describe('updateCartButtonLabelKey getter', function () {
            var tests = [
                { quoteUser: false, markers: false, expectedKey: 'ASSET.DETAIL.BUTTON.UPDATE.ASSET.CART' },
                { quoteUser: false, markers: true, expectedKey: 'ASSET.DETAIL.BUTTON.UPDATE.SUBCLIP.CART' },
                { quoteUser: false, markers: false, expectedKey: 'ASSET.DETAIL.BUTTON.UPDATE.ASSET.CART' },
                { quoteUser: false, markers: true, expectedKey: 'ASSET.DETAIL.BUTTON.UPDATE.SUBCLIP.CART' },
                { quoteUser: true, markers: false, expectedKey: 'ASSET.DETAIL.BUTTON.UPDATE.ASSET.QUOTE' },
                { quoteUser: true, markers: true, expectedKey: 'ASSET.DETAIL.BUTTON.UPDATE.SUBCLIP.QUOTE' },
                { quoteUser: true, markers: false, expectedKey: 'ASSET.DETAIL.BUTTON.UPDATE.ASSET.QUOTE' },
                { quoteUser: true, markers: true, expectedKey: 'ASSET.DETAIL.BUTTON.UPDATE.SUBCLIP.QUOTE' }
            ];
            tests.forEach(function (test) {
                var description = "returns " + test.expectedKey +
                    (" for a user " + (test.quoteUser ? 'with' : 'without') + " quote administrator capabililty and") +
                    (" an asset with markers " + (test.markers ? '' : 'not ') + "defined");
                it(description, function () {
                    componentUnderTest.userCan = { administerQuotes: function () { return test.quoteUser; } };
                    if (test.markers)
                        componentUnderTest.subclipMarkers = { in: { some: 'frame' }, out: { some: 'frame' } };
                    expect(componentUnderTest.updateCartAssetButtonLabelKey).toBe(test.expectedKey);
                });
            });
        });
        describe('updateCart()', function () {
            it('is not yet implemented', function () {
                expect(true).toBe(true);
            });
        });
        describe('canAddToCart getter', function () {
            it('returns false without addToCart capability', function () {
                componentUnderTest.userCan = { addToCart: function () { return false; } };
                expect(componentUnderTest.canAddToCart).toBe(false);
            });
            it('returns false for an asset without Rights.Reproduction', function () {
                componentUnderTest.userCan = { addToCart: function () { return true; } };
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ primary: [{ name: 'some-name', value: 'some value' }] }, 'search');
                expect(componentUnderTest.canAddToCart).toBe(false);
            });
            it('returns false for an asset with a non-acceptable Rights.Reproduction value', function () {
                componentUnderTest.userCan = { addToCart: function () { return true; } };
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ primary: [{ name: 'Rights.Reproduction', value: 'some value' }] }, 'search');
                expect(componentUnderTest.canAddToCart).toBe(false);
            });
            it('returns true for an asset with a Rights.Reproduction field of "Royalty Free" that has a price', function () {
                componentUnderTest.userCan = { addToCart: function () { return true; } };
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ assetId: 1234, primary: [{ name: 'Rights.Reproduction', value: 'Royalty Free' }] }, 'search');
                expect(componentUnderTest.canAddToCart).toBe(true);
            });
            it('returns true for an asset with a Rights.Reproduction field of "Rights Managed" that has a price', function () {
                componentUnderTest.userCan = { addToCart: function () { return true; } };
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ assetId: 1234, primary: [{ name: 'Rights.Reproduction', value: 'Rights Managed' }] }, 'search');
                expect(componentUnderTest.canAddToCart).toBe(true);
            });
            it('returns false for an asset with a Rights.Reproduction field of "Rights Managed" that does not have a price', function () {
                mockStore.createStateSection('asset', { activeAsset: { assetId: 1235 } });
                componentUnderTest.userCan = { addToCart: function () { return true; } };
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ assetId: 1235, primary: [{ name: 'Rights.Reproduction', value: 'Rights Managed' }] }, 'search');
                expect(componentUnderTest.canAddToCart).toBe(false);
            });
        });
        describe('addToCartOrQuoteButtonLabelKey getter', function () {
            var tests = [
                { quoteUser: false, type: 'search', markers: false, expectedKey: 'ASSET.DETAIL.BUTTON.ADD.ASSET.CART' },
                { quoteUser: false, type: 'search', markers: true, expectedKey: 'ASSET.DETAIL.BUTTON.ADD.SUBCLIP.CART' },
                { quoteUser: false, type: 'cart', markers: false, expectedKey: 'ASSET.DETAIL.BUTTON.ADD_NEW.ASSET.CART' },
                { quoteUser: false, type: 'cart', markers: true, expectedKey: 'ASSET.DETAIL.BUTTON.ADD_NEW.SUBCLIP.CART' },
                { quoteUser: false, type: 'quoteEdit', markers: false, expectedKey: 'ASSET.DETAIL.BUTTON.ADD.ASSET.CART' },
                { quoteUser: false, type: 'quoteEdit', markers: true, expectedKey: 'ASSET.DETAIL.BUTTON.ADD.SUBCLIP.CART' },
                { quoteUser: true, type: 'search', markers: false, expectedKey: 'ASSET.DETAIL.BUTTON.ADD.ASSET.QUOTE' },
                { quoteUser: true, type: 'search', markers: true, expectedKey: 'ASSET.DETAIL.BUTTON.ADD.SUBCLIP.QUOTE' },
                { quoteUser: true, type: 'cart', markers: false, expectedKey: 'ASSET.DETAIL.BUTTON.ADD.ASSET.QUOTE' },
                { quoteUser: true, type: 'cart', markers: true, expectedKey: 'ASSET.DETAIL.BUTTON.ADD.SUBCLIP.QUOTE' },
                { quoteUser: true, type: 'quoteEdit', markers: false, expectedKey: 'ASSET.DETAIL.BUTTON.ADD_NEW.ASSET.QUOTE' },
                { quoteUser: true, type: 'quoteEdit', markers: true, expectedKey: 'ASSET.DETAIL.BUTTON.ADD_NEW.SUBCLIP.QUOTE' }
            ];
            tests.forEach(function (test) {
                var description = "returns " + test.expectedKey +
                    (" for a user " + (test.quoteUser ? 'with' : 'without') + " quote administrator capabililty and") +
                    (" an asset with type '" + test.type + "' and markers " + (test.markers ? '' : 'not ') + "defined");
                it(description, function () {
                    componentUnderTest.userCan = { administerQuotes: function () { return test.quoteUser; } };
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset({}, test.type);
                    if (test.markers)
                        componentUnderTest.subclipMarkers = { in: { some: 'frame' }, out: { some: 'frame' } };
                    expect(componentUnderTest.addToCartOrQuoteButtonLabelKey).toBe(test.expectedKey);
                });
            });
        });
        describe('canGoToSearchDetails getter', function () {
            var tests = [
                { assetType: 'cart', expectedResult: true, accessPath: 'ContentFilter' },
                { assetType: 'cart', expectedResult: false, accessPath: 'SomethingElse' },
                { assetType: 'collection', expectedResult: true, accessPath: 'ContentFilter' },
                { assetType: 'collection', expectedResult: false, accessPath: 'SomethingElse' },
                { assetType: 'order', expectedResult: true, accessPath: 'ContentFilter' },
                { assetType: 'order', expectedResult: false, accessPath: 'SomethingElse' },
                { assetType: 'quoteEdit', expectedResult: true, accessPath: 'ContentFilter' },
                { assetType: 'quoteEdit', expectedResult: false, accessPath: 'SomethingElse' },
                { assetType: 'quoteShow', expectedResult: true, accessPath: 'ContentFilter' },
                { assetType: 'quoteShow', expectedResult: false, accessPath: 'SomethingElse' },
                { assetType: 'search', expectedResult: false },
            ];
            tests.forEach(function (test) {
                it("returns " + test.expectedResult + " for asset type '" + test.assetType + "' and access path '" + test.accessPath + "'", function () {
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ accessPath: test.accessPath }, test.assetType);
                    expect(componentUnderTest.canGoToSearchAssetDetails).toBe(test.expectedResult);
                });
            });
        });
        describe('goToSearchDetails', function () {
            it('dispatches the expected action when subclipMarkers are not set', function () {
                var spy = mockStore.createActionFactoryMethod('router', 'goToSearchAssetDetails');
                componentUnderTest.goToSearchAssetDetails();
                mockStore.expectDispatchFor(spy, componentUnderTest.asset.assetId, undefined);
            });
            it('dispatches the expected action when subclipMarkers are set', function () {
                var spy = mockStore.createActionFactoryMethod('router', 'goToSearchAssetDetails');
                componentUnderTest.onPlayerMarkerChange({ in: { some: 'inFrame' }, out: { some: 'outFrame' } });
                componentUnderTest.goToSearchAssetDetails();
                mockStore.expectDispatchFor(spy, componentUnderTest.asset.assetId, { in: { some: 'inFrame' }, out: { some: 'outFrame' } });
            });
        });
        describe('canAddToActiveCollection getter', function () {
            var tests = [
                { assetType: 'cart', assetIdInCollection: true, expectedResult: false },
                { assetType: 'collection', assetIdInCollection: true, expectedResult: false },
                { assetType: 'order', assetIdInCollection: true, expectedResult: false },
                { assetType: 'quoteEdit', assetIdInCollection: true, expectedResult: false },
                { assetType: 'quoteShow', assetIdInCollection: true, expectedResult: false },
                { assetType: 'search', assetIdInCollection: true, expectedResult: false },
                { assetType: 'cart', assetIdInCollection: false, expectedResult: false },
                { assetType: 'collection', assetIdInCollection: false, expectedResult: true },
                { assetType: 'order', assetIdInCollection: false, expectedResult: false },
                { assetType: 'quoteEdit', assetIdInCollection: false, expectedResult: false },
                { assetType: 'quoteShow', assetIdInCollection: false, expectedResult: false },
                { assetType: 'search', assetIdInCollection: false, expectedResult: true }
            ];
            tests.forEach(function (test) {
                it("returns " + test.expectedResult + " for asset type '" + test.assetType + "' if the assetId \n        is " + (test.assetIdInCollection ? 'included' : 'not') + " in the collection", function () {
                    componentUnderTest.activeCollection = collection;
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset(__assign({}, asset, { assetId: test.assetIdInCollection ? 1 : 9999 }), test.assetType);
                    expect(componentUnderTest.canAddToActiveCollection).toBe(test.expectedResult);
                });
            });
        });
        describe('canAddAgainToActiveCollection getter', function () {
            var tests = [
                { assetType: 'cart', matchingSubclipMarkers: false, expectedResult: false },
                { assetType: 'collection', matchingSubclipMarkers: false, expectedResult: true },
                { assetType: 'order', matchingSubclipMarkers: false, expectedResult: false },
                { assetType: 'quoteEdit', matchingSubclipMarkers: false, expectedResult: false },
                { assetType: 'quoteShow', matchingSubclipMarkers: false, expectedResult: false },
                { assetType: 'search', matchingSubclipMarkers: false, expectedResult: true },
                { assetType: 'cart', matchingSubclipMarkers: true, expectedResult: false },
                { assetType: 'collection', matchingSubclipMarkers: true, expectedResult: true },
                { assetType: 'order', matchingSubclipMarkers: true, expectedResult: false },
                { assetType: 'quoteEdit', matchingSubclipMarkers: true, expectedResult: false },
                { assetType: 'quoteShow', matchingSubclipMarkers: true, expectedResult: false },
                { assetType: 'search', matchingSubclipMarkers: true, expectedResult: true }
            ];
            tests.forEach(function (test) {
                it("returns " + test.expectedResult + " for asset type '" + test.assetType + "' when the collection has a version of that \n        asset " + (test.matchingSubclipMarkers ? 'with' : 'without') + " matching subclip markers", function () {
                    componentUnderTest.activeCollection = collection;
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset(__assign({}, asset, { timeStart: 123, timeEnd: test.matchingSubclipMarkers ? 1000 : 9999 }), test.assetType);
                    expect(componentUnderTest.canAddAgainToActiveCollection).toBe(test.expectedResult);
                });
            });
            it('returns false when the collection does not have a version of that asset', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset(__assign({}, asset, { assetId: 9999 }), 'collection');
                expect(componentUnderTest.canAddAgainToActiveCollection).toBe(false);
            });
            it('returns true if the collection does not have that asset but the type is collection & subclip markers were set', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset(__assign({}, asset, { assetId: 9999 }), 'collection');
                var startFrame = new index_1.Frame(25).setFromFrameNumber(1);
                var endFrame = new index_1.Frame(25).setFromFrameNumber(2);
                componentUnderTest.onPlayerMarkerChange({ in: startFrame, out: endFrame });
                expect(componentUnderTest.canAddAgainToActiveCollection).toBe(true);
            });
        });
        describe('canRemoveFromActiveCollection getter', function () {
            var tests = [
                { assetType: 'cart', matchingUuid: true, expectedResult: false },
                { assetType: 'collection', matchingUuid: true, expectedResult: true },
                { assetType: 'order', matchingUuid: true, expectedResult: false },
                { assetType: 'quoteEdit', matchingUuid: true, expectedResult: false },
                { assetType: 'quoteShow', matchingUuid: true, expectedResult: false },
                { assetType: 'search', matchingUuid: true, expectedResult: false },
                { assetType: 'cart', matchingUuid: false, expectedResult: false },
                { assetType: 'collection', matchingUuid: false, expectedResult: false },
                { assetType: 'order', matchingUuid: false, expectedResult: false },
                { assetType: 'quoteEdit', matchingUuid: false, expectedResult: false },
                { assetType: 'quoteShow', matchingUuid: false, expectedResult: false },
                { assetType: 'search', matchingUuid: false, expectedResult: false }
            ];
            tests.forEach(function (test) {
                it("returns " + test.expectedResult + " for asset type '" + test.assetType + "' when the collection has a version of that \n        asset " + (test.matchingUuid ? 'with' : 'without') + " matching UUID", function () {
                    componentUnderTest.activeCollection = collection;
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset(__assign({}, asset, { uuid: test.matchingUuid ? 'ABCD' : 'NOPE' }), test.assetType);
                    expect(componentUnderTest.canRemoveFromActiveCollection).toBe(test.expectedResult);
                });
            });
        });
        describe('userCanEditCollection getter', function () {
            beforeEach(function () {
                componentUnderTest = new asset_detail_component_1.AssetDetailComponent(mockStore);
            });
            it('returns an observable of false when the capability returns false', function () {
                componentUnderTest.userCan = { editCollection: function () { return Observable_1.Observable.of(false); } };
                var canEdit;
                componentUnderTest.userCanEditCollection.subscribe(function (can) { return canEdit = can; });
                expect(canEdit).toBe(false);
            });
            it('returns an observable of true when the capability returns true', function () {
                componentUnderTest.userCan = { editCollection: function () { return Observable_1.Observable.of(true); } };
                var canEdit;
                componentUnderTest.userCanEditCollection.subscribe(function (can) { return canEdit = can; });
                expect(canEdit).toBe(true);
            });
        });
        describe('canUpdateInActiveCollection getter', function () {
            var tests = [
                { assetType: 'cart', matchingUuid: true, subclipsSet: true, subclipsExact: false, expectedResult: false },
                { assetType: 'order', matchingUuid: true, subclipsSet: false, subclipsExact: false, expectedResult: false },
                { assetType: 'quoteEdit', matchingUuid: false, subclipsSet: true, subclipsExact: false, expectedResult: false },
                { assetType: 'search', matchingUuid: false, subclipsSet: false, subclipsExact: false, expectedResult: false },
                { assetType: 'collection', matchingUuid: false, subclipsSet: true, subclipsExact: false, expectedResult: false },
                { assetType: 'collection', matchingUuid: true, subclipsSet: false, subclipsExact: false, expectedResult: false },
                { assetType: 'collection', matchingUuid: true, subclipsSet: true, subclipsExact: false, expectedResult: true },
                { assetType: 'collection', matchingUuid: true, subclipsSet: true, subclipsExact: true, expectedResult: false }
            ];
            tests.forEach(function (test) {
                it("returns " + test.expectedResult + " for asset type '" + test.assetType + "' \n        when the collection has a version of that asset " + (test.matchingUuid ? 'with' : 'without') + " matching UUID \n        and the subclip markers " + (test.subclipsSet ? 'were' : 'were not') + " changed\n        " + (test.subclipsExact && ' to match existing asset subclips'), function () {
                    collection.assets.items.push({ assetId: 1, timeStart: 40, timeEnd: 80 });
                    componentUnderTest.activeCollection = collection;
                    componentUnderTest.subclipMarkers = test.subclipsSet ? {
                        in: new index_1.Frame(25).setFromFrameNumber(1),
                        out: test.subclipsExact ? new index_1.Frame(25).setFromFrameNumber(2) : new index_1.Frame(25).setFromFrameNumber(3)
                    } : null;
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset(__assign({}, asset, { uuid: test.matchingUuid ? 'MNOP' : 'NOPE' }), test.assetType);
                    componentUnderTest.showAssetSaveSubclip = test.subclipsSet;
                    expect(componentUnderTest.canUpdateInActiveCollection).toBe(test.expectedResult);
                });
            });
        });
        describe('routerLinkForAssetParent()', function () {
            describe('returns the correct routerLink', function () {
                beforeEach(function () {
                    componentUnderTest.ngOnInit();
                });
                it('for a collection asset', function () {
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset(mock_asset_1.mockAsset, 'collection', 100);
                    expect(componentUnderTest.routerLinkForAssetParent).toEqual(['/collections', 100, { i: 1, n: 50 }]);
                });
                it('for a quote edit asset', function () {
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset(mock_asset_1.mockAsset, 'quoteEdit');
                    expect(componentUnderTest.routerLinkForAssetParent).toEqual(['/active-quote']);
                });
                it('for a quote show asset', function () {
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset(mock_asset_1.mockAsset, 'quoteShow', 999);
                    expect(componentUnderTest.routerLinkForAssetParent).toEqual(['/quotes', 999]);
                });
                it('for an order asset', function () {
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset(mock_asset_1.mockAsset, 'order', 111);
                    expect(componentUnderTest.routerLinkForAssetParent).toEqual(['/orders', 111]);
                });
                it('for a cart asset', function () {
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset(mock_asset_1.mockAsset, 'cart');
                    expect(componentUnderTest.routerLinkForAssetParent).toEqual(['/cart']);
                });
                it('for a search asset', function () {
                    componentUnderTest.searchContext = { q: 'cat', i: 1, n: 100, sortId: 10 };
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset(mock_asset_1.mockAsset, 'search');
                    expect(componentUnderTest.routerLinkForAssetParent).toEqual(['/search', { q: 'cat', i: 1, n: 100, sortId: 10 }]);
                });
            });
        });
        describe('breadcrumbLabel getter', function () {
            describe('returns the correct translatable string', function () {
                it('for a collection', function () {
                    componentUnderTest.activeCollection = __assign({}, collection, { name: 'some collection' });
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset(mock_asset_1.mockAsset, 'collection', 100);
                    expect(componentUnderTest.breadcrumbLabel).toEqual(['some collection', '']);
                });
                it('for a quoteShow', function () {
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset(mock_asset_1.mockAsset, 'quoteShow', 111);
                    expect(componentUnderTest.breadcrumbLabel).toEqual(['asset.detail.breadcrumb_quoteShow', '111']);
                });
                it('for a order', function () {
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset(mock_asset_1.mockAsset, 'order', 333);
                    expect(componentUnderTest.breadcrumbLabel).toEqual(['asset.detail.breadcrumb_order', '333']);
                });
                describe('for any other type of asset - ', function () {
                    var tests = [
                        { assetType: 'search', expected: ['asset.detail.breadcrumb_search', ''] },
                        { assetType: 'quoteEdit', expected: ['asset.detail.breadcrumb_quoteEdit', ''] },
                        { assetType: 'cart', expected: ['asset.detail.breadcrumb_cart', ''] }
                    ];
                    tests.forEach(function (test) {
                        it("(" + test.assetType + ")", function () {
                            componentUnderTest.asset = enhanced_asset_1.enhanceAsset(mock_asset_1.mockAsset, test.assetType);
                            expect(componentUnderTest.breadcrumbLabel).toEqual(test.expected);
                        });
                    });
                });
            });
        });
        describe('toggleCommentsVisibility()', function () {
            it('toggles the \'showComments\' boolean', function () {
                expect(componentUnderTest.showComments).toBe(undefined);
                componentUnderTest.toggleCommentsVisibility();
                expect(componentUnderTest.showComments).toBe(true);
                componentUnderTest.toggleCommentsVisibility();
                expect(componentUnderTest.showComments).toBe(false);
            });
        });
        describe('userCanAddComments getter', function () {
            describe('when the commentParentObject\'s objectType is \'collection\'', function () {
                beforeEach(function () {
                    componentUnderTest.commentParentObject = {
                        objectId: 1,
                        objectType: 'collection'
                    };
                });
                it('returns an observable of true if the user can edit the collection', function () {
                    componentUnderTest.userCan = {
                        editCollection: jasmine.createSpy('editCollection').and.returnValue(Observable_1.Observable.of(true))
                    };
                    var result;
                    componentUnderTest.userCanAddComments.take(1).subscribe(function (res) { return result = res; });
                    expect(result).toBe(true);
                });
                it('returns an observable of false if the user can\'t edit the collection', function () {
                    componentUnderTest.userCan = {
                        editCollection: jasmine.createSpy('editCollection').and.returnValue(Observable_1.Observable.of(false))
                    };
                    var result;
                    componentUnderTest.userCanAddComments.take(1).subscribe(function (res) { return result = res; });
                    expect(result).toBe(false);
                });
            });
            describe('when the commentParentObject\'s objectType isn\'t \'collection\'', function () {
                beforeEach(function () {
                    componentUnderTest.commentParentObject = {
                        objectId: 1,
                        objectType: 'cart'
                    };
                });
                it('returns an observable of true', function () {
                    var result;
                    componentUnderTest.userCanAddComments.take(1).subscribe(function (res) { return result = res; });
                    expect(result).toBe(true);
                });
            });
        });
        describe('commentCount getter', function () {
            it('selects the right part of the store', function () {
                mockStore.createStateSection('comment', { activeObjectType: 'lineItem', lineItem: { pagination: { totalCount: 10 } } });
                var count;
                componentUnderTest.commentCount.take(1).subscribe(function (c) { return count = c; });
                expect(count).toBe(10);
            });
        });
        describe('updateCart()', function () {
            it('emits the right event', function () {
                spyOn(componentUnderTest.updateAssetLineItem, 'emit');
                componentUnderTest.updateCartAsset();
                expect(componentUnderTest.updateAssetLineItem.emit).toHaveBeenCalled();
            });
        });
        describe('showDownloadButton()', function () {
            var tests = [
                { assetType: 'cart', expectedResult: true, accessPath: 'ContentFilter' },
                { assetType: 'cart', expectedResult: false, accessPath: 'SomethingElse' },
                { assetType: 'collection', expectedResult: true, accessPath: 'ContentFilter' },
                { assetType: 'collection', expectedResult: false, accessPath: 'SomethingElse' },
                { assetType: 'quoteEdit', expectedResult: true, accessPath: 'ContentFilter' },
                { assetType: 'quoteEdit', expectedResult: false, accessPath: 'SomethingElse' },
                { assetType: 'quoteShow', expectedResult: true, accessPath: 'ContentFilter' },
                { assetType: 'search', expectedResult: true, accessPath: 'ContentFilter' },
                { assetType: 'search', expectedResult: false, accessPath: 'SomethingElse' },
                { assetType: 'order', expectedResult: false, accessPath: 'ContentFilter' }
            ];
            tests.forEach(function (test) {
                it("returns " + test.expectedResult + " for asset type '" + test.assetType + "' and access path '" + test.accessPath + "'", function () {
                    componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ accessPath: test.accessPath }, test.assetType);
                    expect(componentUnderTest.showDownloadButton).toBe(test.expectedResult);
                });
            });
        });
        describe('assetName getter', function () {
            it('returns the name for an asset', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({
                    common: [
                        { name: 'id', value: '33323666' },
                        { name: 'family', value: 'website' },
                        { name: 'ingested', value: '2014-01-30 00:00:00.0' },
                        { name: 'liveDate', value: '2014-02-03 00:00:00.0' },
                        { name: 'modified', value: '2016-08-30 07:14:07.0' },
                        { name: 'name', value: '1FL001_033' }
                    ]
                }, 'search');
                expect(componentUnderTest.assetName).toBe('1FL001_033');
            });
        });
        describe('canAddToDifferentCollection getter', function () {
            it('return true if user can have collections and asset type is collection', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ primary: [{ name: 'Rights.Reproduction', value: 'Rights Managed' }] }, 'collection');
                componentUnderTest.userCan = { haveCollections: function () { return true; } };
                expect(componentUnderTest.canAddToDifferentCollection).toBe(true);
            });
            it('return false if user can not have collections and asset type is collection', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ primary: [{ name: 'Rights.Reproduction', value: 'Rights Managed' }] }, 'collection');
                componentUnderTest.userCan = { haveCollections: function () { return false; } };
                expect(componentUnderTest.canAddToDifferentCollection).toBe(false);
            });
            it('return false if user can have collections and asset type is not collection', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ primary: [{ name: 'Rights.Reproduction', value: 'Rights Managed' }] }, 'search');
                componentUnderTest.userCan = { haveCollections: function () { return true; } };
                expect(componentUnderTest.canAddToDifferentCollection).toBe(false);
            });
            it('return false if user can not have collections and asset type is not collection', function () {
                componentUnderTest.asset = enhanced_asset_1.enhanceAsset({ primary: [{ name: 'Rights.Reproduction', value: 'Rights Managed' }] }, 'search');
                componentUnderTest.userCan = { haveCollections: function () { return false; } };
                expect(componentUnderTest.canAddToDifferentCollection).toBe(false);
            });
        });
        describe('addToDifferentCollection()', function () {
            it('should emit the onAddtoDifferentCollection event', function () {
                spyOn(componentUnderTest.onAddtoDifferentCollection, 'emit');
                componentUnderTest.addToDifferentCollection();
                expect(componentUnderTest.onAddtoDifferentCollection.emit).toHaveBeenCalled();
            });
        });
        describe('onCreateShareDialog()', function () {
            it('emits the right event', function () {
                spyOn(componentUnderTest.createShareDialog, 'emit');
                componentUnderTest.subclipMarkers = 'some markers';
                componentUnderTest.shareFormFields = 'some form fields';
                componentUnderTest.onCreateShareDialog();
                expect(componentUnderTest.createShareDialog.emit).toHaveBeenCalledWith({
                    enhancedAsset: {
                        assetId: 1, clipData: [], clipThumbnailUrl: 'clipUrl.jpg', clipUrl: 'clipUrl', transcodeTargets: transcodeTargets
                    },
                    subclipMarkers: 'some markers',
                    formFields: 'some form fields'
                });
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
