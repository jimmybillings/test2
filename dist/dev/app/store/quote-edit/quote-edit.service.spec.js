"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var common_functions_1 = require("../../shared/utilities/common.functions");
var quote_edit_service_1 = require("./quote-edit.service");
var mock_api_service_1 = require("../spec-helpers/mock-api.service");
var api_interface_1 = require("../../shared/interfaces/api.interface");
var index_1 = require("../../shared/modules/wazee-frame-formatter/index");
function main() {
    describe('Future Quote Edit Service', function () {
        var serviceUnderTest, mockApiService;
        beforeEach(function () {
            jasmine.addMatchers(mock_api_service_1.mockApiMatchers);
            mockApiService = new mock_api_service_1.MockApiService();
            serviceUnderTest = new quote_edit_service_1.FutureQuoteEditService(mockApiService.injector);
        });
        describe('load()', function () {
            it('calls the api service correctly', function () {
                serviceUnderTest.load();
                expect(mockApiService.get).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.get).toHaveBeenCalledWithEndpoint('quote/focused');
                expect(mockApiService.get).toHaveBeenCalledWithLoading(true);
            });
            it('returns an observable', function () {
                mockApiService.getResponse = { some: 'quote' };
                serviceUnderTest.load().subscribe(function (q) { return expect(q).toEqual({ some: 'quote' }); });
            });
        });
        describe('delete()', function () {
            it('calls the api service correctly', function () {
                serviceUnderTest.delete(1);
                expect(mockApiService.delete).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.delete).toHaveBeenCalledWithEndpoint('quote/1');
                expect(mockApiService.delete).toHaveBeenCalledWithLoading('onBeforeRequest');
            });
            it('switchMaps to a .load()', function () {
                var response;
                serviceUnderTest.delete(1).subscribe(function (res) { return response = res; });
                expect(mockApiService.get).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.get).toHaveBeenCalledWithEndpoint('quote/focused');
                expect(mockApiService.get).toHaveBeenCalledWithLoading(true);
                expect(response).toEqual(mockApiService.getResponse);
            });
        });
        describe('editLineItemFromDetails()', function () {
            describe('calls the api service correctly', function () {
                it('when called with markers and attributes', function () {
                    serviceUnderTest.editLineItemFromDetails(7, { id: 3, asset: { some: 'asset' } }, { in: new index_1.Frame(30).setFromFrameNumber(30), out: new index_1.Frame(30).setFromFrameNumber(60) }, [{ selectedAttributeName: 'some', selectedAttributeValue: 'attribute' }]);
                    expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                    expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/7/update/lineItem/3');
                    expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
                    expect(mockApiService.put).toHaveBeenCalledWithBody({
                        id: 3,
                        asset: { some: 'asset', timeStart: 1000, timeEnd: 2000 },
                        attributes: [
                            { selectedAttributeName: 'some', selectedAttributeValue: 'attribute' }
                        ]
                    });
                    expect(mockApiService.put).toHaveBeenCalledWithParameters({ region: 'AAA' });
                });
                it('when just called with attributes', function () {
                    serviceUnderTest.editLineItemFromDetails(7, { id: 3, asset: { some: 'asset', timeStart: 333, timeEnd: 999 } }, null, [{ selectedAttributeName: 'some', selectedAttributeValue: 'attribute' }]);
                    expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                    expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/7/update/lineItem/3');
                    expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
                    expect(mockApiService.put).toHaveBeenCalledWithBody({
                        id: 3,
                        asset: { some: 'asset', timeStart: 333, timeEnd: 999 },
                        attributes: [
                            { selectedAttributeName: 'some', selectedAttributeValue: 'attribute' }
                        ]
                    });
                    expect(mockApiService.put).toHaveBeenCalledWithParameters({ region: 'AAA' });
                });
                it('when just called with markers', function () {
                    serviceUnderTest.editLineItemFromDetails(7, {
                        id: 3,
                        asset: { some: 'asset' }
                    }, { in: new index_1.Frame(30).setFromFrameNumber(30), out: new index_1.Frame(30).setFromFrameNumber(60) }, null);
                    expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                    expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/7/update/lineItem/3');
                    expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
                    expect(mockApiService.put).toHaveBeenCalledWithBody({
                        id: 3,
                        asset: { some: 'asset', timeStart: 1000, timeEnd: 2000 },
                        attributes: []
                    });
                    expect(mockApiService.put).toHaveBeenCalledWithParameters({ region: 'AAA' });
                });
            });
        });
        describe('removeAsset()', function () {
            it('calls the API correctly', function () {
                serviceUnderTest.removeAsset(123, { uuid: 'ABCD' });
                expect(mockApiService.delete).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.delete).toHaveBeenCalledWithEndpoint('quote/123/asset/ABCD');
                expect(mockApiService.delete).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('addCustomPriceToLineItem', function () {
            it('calls the apiService correctly if override is false', function () {
                serviceUnderTest.addCustomPriceToLineItem(10, { id: 'abc-123', itemPrice: 100 }, 1000, false);
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/10/update/lineItem/abc-123');
                expect(mockApiService.put).toHaveBeenCalledWithBody({
                    id: 'abc-123',
                    itemPrice: 100,
                    multiplier: 10,
                    overrideGrossAssetPrice: null
                });
                expect(mockApiService.put).toHaveBeenCalledWithParameters({ region: 'AAA' });
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
            it('calls the apiService correctly if override is true', function () {
                serviceUnderTest.addCustomPriceToLineItem(10, { id: 'abc-123', itemPrice: 100 }, 1000, true);
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/10/update/lineItem/abc-123');
                expect(mockApiService.put).toHaveBeenCalledWithBody({
                    id: 'abc-123',
                    itemPrice: 100,
                    multiplier: null,
                    overrideGrossAssetPrice: 1000
                });
                expect(mockApiService.put).toHaveBeenCalledWithParameters({ region: 'AAA' });
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('sendQuote', function () {
            it('should call the api service correctly', function () {
                serviceUnderTest.sendQuote(3, 'ross.edfort@wazeedigital.com', {
                    expirationDate: '2017-03-22T06:00:00.000Z',
                    agreementId: 'KLN-0090-001',
                    salesManager: 'sven.peterson@wazeedigital.com',
                    billingAccountId: 123,
                    invoiceContactType: 'User',
                    invoiceContactId: 7
                }).take(1).subscribe();
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/send/3');
                expect(mockApiService.put).toHaveBeenCalledWithParameters({ ownerEmail: 'ross.edfort@wazeedigital.com' });
                expect(mockApiService.put).toHaveBeenCalledWithBody({
                    expirationDate: '2017-03-22T06:00:00.000Z',
                    agreementId: 'KLN-0090-001',
                    salesManager: 'sven.peterson@wazeedigital.com',
                    billingAccountId: 123,
                    invoiceContactType: 'User',
                    invoiceContactId: 7
                });
            });
        });
        describe('cloneQuote()', function () {
            var mockState = { data: { id: 3, ownerUserId: 10, total: 90, subTotal: 100, projects: [{ name: 'Project A' }] } };
            it("Should call the deletePropertiesFromObject() method with a seperate cloned version\n        of the current quote", function () {
                spyOn(common_functions_1.Common, 'deletePropertiesFromObject');
                serviceUnderTest.cloneQuote(mockState);
                expect(common_functions_1.Common.deletePropertiesFromObject).toHaveBeenCalledWith(mockState, [
                    'id', 'createdUserId', 'ownerUserId', 'createdOn', 'lastUpdated', 'expirationDate', 'quoteStatus',
                    'paymentTerms', 'poNumber', 'bulkOrderId', 'poReference', 'campaignReference', 'orderId', 'billingAccountId',
                    'invoiceContact', 'salesManager', 'ownerData', 'billingAccountData', 'userId', 'externalLicenseIds', 'internalLicenseIds',
                    'externalAgreementIds', 'internalAgreementIds'
                ]);
            });
            it('calls the API service correctly', function () {
                serviceUnderTest.cloneQuote(mockState).subscribe(function () {
                    expect(mockApiService.post).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                    expect(mockApiService.post).toHaveBeenCalledWithEndpoint('quote');
                    expect(mockApiService.post).toHaveBeenCalledWithLoading(true);
                    expect(mockApiService.post).toHaveBeenCalledWithBody({
                        data: {
                            total: 90,
                            subTotal: 100,
                            projects: [{ name: 'Project A' }]
                        }
                    });
                });
            });
        });
        describe('createQuote()', function () {
            it('calls the API service correctly', function () {
                serviceUnderTest.createQuote().subscribe(function () {
                    expect(mockApiService.post).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                    expect(mockApiService.post).toHaveBeenCalledWithEndpoint('quote');
                    expect(mockApiService.post).toHaveBeenCalledWithLoading(true);
                });
            });
        });
        describe('updateQuoteField()', function () {
            it('should call the API service correctly - add', function () {
                serviceUnderTest.updateQuoteField({ field: 'somefield' }, {
                    id: 3, ownerUserId: 10, total: 90, subTotal: 100, bulkOrderId: 'abc-123', projects: [{ name: 'Project A' }]
                });
                var expectedBody = Object.assign({
                    id: 3, ownerUserId: 10, total: 90, subTotal: 100, bulkOrderId: 'abc-123', projects: [{ name: 'Project A' }],
                    field: 'somefield'
                });
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/3');
                expect(mockApiService.put).toHaveBeenCalledWithBody(expectedBody);
            });
            it('should call the API service correctly - remove', function () {
                serviceUnderTest.updateQuoteField({ bulkOrderId: '' }, {
                    id: 3, ownerUserId: 10, total: 90, subTotal: 100, bulkOrderId: 'abc-123', projects: [{ name: 'Project A' }]
                });
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/3');
                expect(mockApiService.put).toHaveBeenCalledWithBody({
                    id: 3, ownerUserId: 10, total: 90, subTotal: 100, projects: [{ name: 'Project A' }]
                });
            });
        });
        describe('addFeeTo()', function () {
            it('calls the API service as expected', function () {
                serviceUnderTest.addFeeTo(1, { some: 'project', name: 'projectName' }, { some: 'fee' });
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/1/fee/lineItem');
                expect(mockApiService.put).toHaveBeenCalledWithBody({ some: 'fee' });
                expect(mockApiService.put).toHaveBeenCalledWithParameters({ projectName: 'projectName' });
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('removeFee()', function () {
            it('calls the API service as expected', function () {
                serviceUnderTest.removeFee(1, { some: 'fee', id: 47 });
                expect(mockApiService.delete).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.delete).toHaveBeenCalledWithEndpoint('quote/1/fee/47');
                expect(mockApiService.delete).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('bulkImport', function () {
            it('calls the api service correctly', function () {
                serviceUnderTest.bulkImport(1, { lineItemAttributes: 'one\ntwo' }, 'abc-123');
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/1/asset/direct/lineItem');
                expect(mockApiService.put).toHaveBeenCalledWithBody({ lineItemAttributes: 'one\ntwo' });
                expect(mockApiService.put).toHaveBeenCalledWithParameters({ projectId: 'abc-123' });
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('editLineItem()', function () {
            it('should call the API service correctly', function () {
                serviceUnderTest.editLineItem(1, { id: '123' }, { pricingAttributes: { Distribution: 'Online Streaming' } });
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/1/update/lineItem/123');
                expect(mockApiService.put).toHaveBeenCalledWithBody({
                    id: '123',
                    attributes: {
                        Distribution: 'Online Streaming'
                    }
                });
                expect(mockApiService.put).toHaveBeenCalledWithParameters({ region: 'AAA' });
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
            it('should call the API service correctly without pricingAttributes', function () {
                serviceUnderTest.editLineItem(1, { id: '123' }, { attributes: { Distribution: 'Online Streaming' } });
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/1/update/lineItem/123');
                expect(mockApiService.put).toHaveBeenCalledWithBody({
                    id: '123',
                    attributes: {
                        Distribution: 'Online Streaming'
                    }
                });
                expect(mockApiService.put).toHaveBeenCalledWithParameters({ region: 'AAA' });
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('addAssetToProjectInQuote()', function () {
            var snackbarSpy;
            it('should call the API service correctly', function () {
                serviceUnderTest.addAssetToProjectInQuote(1, ['project1', 'project2'], {
                    lineItem: { id: '123', asset: { assetId: 456 } }, attributes: { Distribution: 'Online Streaming' }
                });
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/1/asset/lineItem');
                expect(mockApiService.put).toHaveBeenCalledWithBody({
                    lineItem: { id: '123', asset: { assetId: 456, timeStart: -1, timeEnd: -2 } },
                    attributes: {
                        Distribution: 'Online Streaming'
                    }
                });
                expect(mockApiService.put).toHaveBeenCalledWithParameters({
                    projectName: 'project2',
                    region: 'AAA'
                });
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('addProject()', function () {
            it('calls the API service correctly', function () {
                serviceUnderTest.addProject(1);
                expect(mockApiService.post).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.post).toHaveBeenCalledWithEndpoint('quote/1/project');
                expect(mockApiService.post).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('removeProject()', function () {
            it('should call the API service correctly', function () {
                serviceUnderTest.removeProject(1, 123);
                expect(mockApiService.delete).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.delete).toHaveBeenCalledWithEndpoint('quote/1/project/123');
                expect(mockApiService.delete).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('updateProject()', function () {
            it('call the API service correctly', function () {
                serviceUnderTest.updateProject(1, { name: 'New Project Name' });
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/1/project');
                expect(mockApiService.put).toHaveBeenCalledWithBody({ name: 'New Project Name' });
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('moveLineItem()', function () {
            it('call the API service correctly', function () {
                serviceUnderTest.moveLineItem(1, { id: '123' }, { id: '456' });
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/1/move/lineItem');
                expect(mockApiService.put).toHaveBeenCalledWithParameters({ lineItemId: '456', projectId: '123' });
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('cloneLineItem()', function () {
            it('should call the API service correctly', function () {
                serviceUnderTest.cloneLineItem(1, { id: '123' });
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/1/clone/lineItem');
                expect(mockApiService.put).toHaveBeenCalledWithParameters({ lineItemId: '123' });
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('editLineItemMarkers()', function () {
            it('should call the API service correctly', function () {
                serviceUnderTest.editLineItemMarkers(1, { id: '123', asset: { test: 'asset' } }, { in: new index_1.Frame(3), out: new index_1.Frame(25) });
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint("quote/1/update/lineItem/123");
                expect(mockApiService.put).toHaveBeenCalledWithParameters({ region: 'AAA' });
                expect(mockApiService.put).toHaveBeenCalledWithBody({
                    id: '123',
                    asset: {
                        test: 'asset',
                        timeStart: null,
                        timeEnd: null
                    }
                });
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('updateProjectPriceAttributes()', function () {
            it('should call the API service correctly', function () {
                serviceUnderTest.updateProjectPriceAttributes(1, [{ priceAttributeName: 'Distribution', selectedAttributeValue: 'Online Streaming' }], { id: '123', name: 'Project A', clientName: 'Ross Edfort', subtotal: 100 });
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/1/project/priceAttributes/123');
                expect(mockApiService.put).toHaveBeenCalledWithBody([{ priceAttributeName: 'Distribution', selectedAttributeValue: 'Online Streaming' }]);
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('addNote()', function () {
            it('replaces the first note if the field already exists', function () {
                serviceUnderTest.addNote(111, 'some note', { id: 'abc-123', notes: [{ notes: ['note'] }] });
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/111/update/lineItem/abc-123');
                expect(mockApiService.put).toHaveBeenCalledWithBody({ id: 'abc-123', notes: [{ notes: ['some note'] }] });
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
            it('adds the \'notes\' if the field doesn\'t exists', function () {
                serviceUnderTest.addNote(111, 'some note', { id: 'abc-123' });
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/111/update/lineItem/abc-123');
                expect(mockApiService.put).toHaveBeenCalledWithBody({ id: 'abc-123', notes: [{ notes: ['some note'] }] });
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('removeNoteFrom()', function () {
            it('calls the apiService correctly', function () {
                serviceUnderTest.removeNote(111, { id: 'abc-123', some: 'lineItem', notes: [{ notes: ['some note'] }] });
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('quote/111/update/lineItem/abc-123');
                expect(mockApiService.put).toHaveBeenCalledWithBody({ id: 'abc-123', some: 'lineItem' });
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
