"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var collections_service_1 = require("./collections.service");
var mock_api_service_1 = require("../spec-helpers/mock-api.service");
var api_interface_1 = require("../../shared/interfaces/api.interface");
var index_1 = require("../../shared/modules/wazee-frame-formatter/index");
function main() {
    describe('Collections Service', function () {
        var serviceUnderTest, mockApiService;
        beforeEach(function () {
            jasmine.addMatchers(mock_api_service_1.mockApiMatchers);
            mockApiService = new mock_api_service_1.MockApiService();
            serviceUnderTest = new collections_service_1.FutureCollectionsService(mockApiService.injector);
        });
        describe('addAssetTo()', function () {
            it('calls the API correctly', function () {
                serviceUnderTest.addAssetTo({ id: 17 }, { assetId: 234, subclipMarkers: { in: new index_1.Frame(30).setFromFrameNumber(30), out: new index_1.Frame(30).setFromFrameNumber(60) } });
                expect(mockApiService.post).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                expect(mockApiService.post).toHaveBeenCalledWithEndpoint('collection/17/addAssets');
                expect(mockApiService.post).toHaveBeenCalledWithBody({ list: [{ assetId: 234, timeStart: '1000', timeEnd: '2000' }] });
                expect(mockApiService.post).toHaveBeenCalledWithLoading(true);
            });
            it('calls the API correctly with no markers', function () {
                serviceUnderTest.addAssetTo({ id: 17 }, { assetId: 234, undefined: undefined });
                expect(mockApiService.post).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                expect(mockApiService.post).toHaveBeenCalledWithEndpoint('collection/17/addAssets');
                expect(mockApiService.post).toHaveBeenCalledWithBody({ list: [{ assetId: 234, timeStart: '-1', timeEnd: '-2' }] });
                expect(mockApiService.post).toHaveBeenCalledWithLoading(true);
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zdG9yZS9jb2xsZWN0aW9ucy9jb2xsZWN0aW9ucy5zZXJ2aWNlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2REFBaUU7QUFDakUscUVBQW1GO0FBQ25GLHVFQUE0RDtBQUM1RCwwRUFBeUU7QUFFekU7SUFDRSxRQUFRLENBQUMscUJBQXFCLEVBQUU7UUFDOUIsSUFBSSxnQkFBMEMsRUFBRSxjQUE4QixDQUFDO1FBRS9FLFVBQVUsQ0FBQztZQUNULE9BQU8sQ0FBQyxXQUFXLENBQUMsa0NBQWUsQ0FBQyxDQUFDO1lBQ3JDLGNBQWMsR0FBRyxJQUFJLGlDQUFjLEVBQUUsQ0FBQztZQUN0QyxnQkFBZ0IsR0FBRyxJQUFJLDhDQUF3QixDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzRSxDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyxjQUFjLEVBQUU7WUFDdkIsRUFBRSxDQUFDLHlCQUF5QixFQUFFO2dCQUM1QixnQkFBZ0IsQ0FBQyxVQUFVLENBQ3pCLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBUyxFQUNqQixFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksYUFBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLGFBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFTLENBQ2pJLENBQUM7Z0JBRUYsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxtQkFBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUNwRSxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLDRCQUE0QixDQUFDLHlCQUF5QixDQUFDLENBQUM7Z0JBQ3BGLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsd0JBQXdCLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ3ZILE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEUsQ0FBQyxDQUFDLENBQUM7WUFFSCxFQUFFLENBQUMseUNBQXlDLEVBQUU7Z0JBQzVDLGdCQUFnQixDQUFDLFVBQVUsQ0FDekIsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFTLEVBQ2pCLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLFdBQUEsRUFBUyxDQUNuQyxDQUFDO2dCQUVGLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsdUJBQXVCLENBQUMsbUJBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDcEUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyw0QkFBNEIsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO2dCQUNwRixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLHdCQUF3QixDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNuSCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLDJCQUEyQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hFLENBQUMsQ0FBQyxDQUFDO1FBRUwsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFyQ0Qsb0JBcUNDIiwiZmlsZSI6ImFwcC9zdG9yZS9jb2xsZWN0aW9ucy9jb2xsZWN0aW9ucy5zZXJ2aWNlLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGdXR1cmVDb2xsZWN0aW9uc1NlcnZpY2UgfSBmcm9tICcuL2NvbGxlY3Rpb25zLnNlcnZpY2UnO1xuaW1wb3J0IHsgTW9ja0FwaVNlcnZpY2UsIG1vY2tBcGlNYXRjaGVycyB9IGZyb20gJy4uL3NwZWMtaGVscGVycy9tb2NrLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IEFwaSB9IGZyb20gJy4uLy4uL3NoYXJlZC9pbnRlcmZhY2VzL2FwaS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRnJhbWUgfSBmcm9tICcuLi8uLi9zaGFyZWQvbW9kdWxlcy93YXplZS1mcmFtZS1mb3JtYXR0ZXIvaW5kZXgnO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFpbigpIHtcbiAgZGVzY3JpYmUoJ0NvbGxlY3Rpb25zIFNlcnZpY2UnLCAoKSA9PiB7XG4gICAgbGV0IHNlcnZpY2VVbmRlclRlc3Q6IEZ1dHVyZUNvbGxlY3Rpb25zU2VydmljZSwgbW9ja0FwaVNlcnZpY2U6IE1vY2tBcGlTZXJ2aWNlO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBqYXNtaW5lLmFkZE1hdGNoZXJzKG1vY2tBcGlNYXRjaGVycyk7XG4gICAgICBtb2NrQXBpU2VydmljZSA9IG5ldyBNb2NrQXBpU2VydmljZSgpO1xuICAgICAgc2VydmljZVVuZGVyVGVzdCA9IG5ldyBGdXR1cmVDb2xsZWN0aW9uc1NlcnZpY2UobW9ja0FwaVNlcnZpY2UuaW5qZWN0b3IpO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2FkZEFzc2V0VG8oKScsICgpID0+IHtcbiAgICAgIGl0KCdjYWxscyB0aGUgQVBJIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgICAgc2VydmljZVVuZGVyVGVzdC5hZGRBc3NldFRvKFxuICAgICAgICAgIHsgaWQ6IDE3IH0gYXMgYW55LFxuICAgICAgICAgIHsgYXNzZXRJZDogMjM0LCBzdWJjbGlwTWFya2VyczogeyBpbjogbmV3IEZyYW1lKDMwKS5zZXRGcm9tRnJhbWVOdW1iZXIoMzApLCBvdXQ6IG5ldyBGcmFtZSgzMCkuc2V0RnJvbUZyYW1lTnVtYmVyKDYwKSB9IH0gYXMgYW55LFxuICAgICAgICApO1xuXG4gICAgICAgIGV4cGVjdChtb2NrQXBpU2VydmljZS5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aEFwaShBcGkuSWRlbnRpdGllcyk7XG4gICAgICAgIGV4cGVjdChtb2NrQXBpU2VydmljZS5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aEVuZHBvaW50KCdjb2xsZWN0aW9uLzE3L2FkZEFzc2V0cycpO1xuICAgICAgICBleHBlY3QobW9ja0FwaVNlcnZpY2UucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGhCb2R5KHsgbGlzdDogW3sgYXNzZXRJZDogMjM0LCB0aW1lU3RhcnQ6ICcxMDAwJywgdGltZUVuZDogJzIwMDAnIH1dIH0pO1xuICAgICAgICBleHBlY3QobW9ja0FwaVNlcnZpY2UucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGhMb2FkaW5nKHRydWUpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdjYWxscyB0aGUgQVBJIGNvcnJlY3RseSB3aXRoIG5vIG1hcmtlcnMnLCAoKSA9PiB7XG4gICAgICAgIHNlcnZpY2VVbmRlclRlc3QuYWRkQXNzZXRUbyhcbiAgICAgICAgICB7IGlkOiAxNyB9IGFzIGFueSxcbiAgICAgICAgICB7IGFzc2V0SWQ6IDIzNCwgdW5kZWZpbmVkIH0gYXMgYW55LFxuICAgICAgICApO1xuXG4gICAgICAgIGV4cGVjdChtb2NrQXBpU2VydmljZS5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aEFwaShBcGkuSWRlbnRpdGllcyk7XG4gICAgICAgIGV4cGVjdChtb2NrQXBpU2VydmljZS5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aEVuZHBvaW50KCdjb2xsZWN0aW9uLzE3L2FkZEFzc2V0cycpO1xuICAgICAgICBleHBlY3QobW9ja0FwaVNlcnZpY2UucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGhCb2R5KHsgbGlzdDogW3sgYXNzZXRJZDogMjM0LCB0aW1lU3RhcnQ6ICctMScsIHRpbWVFbmQ6ICctMicgfV0gfSk7XG4gICAgICAgIGV4cGVjdChtb2NrQXBpU2VydmljZS5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aExvYWRpbmcodHJ1ZSk7XG4gICAgICB9KTtcblxuICAgIH0pO1xuICB9KTtcbn1cbiJdfQ==
