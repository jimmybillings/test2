"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var api_interface_1 = require("../../shared/interfaces/api.interface");
var messageWith = function (expected, expectedValue, but, actualValues) {
    return expected + " " + expectedValue + ", " + but + (actualValues ? " " + actualValues : '') + ".";
};
var expectedCalledWith = 'Expected spy to have been called with';
var expectedNotCalledWith = 'Expected spy not to have been called with';
var butNeverCalled = 'but it was never called';
var butWas = 'but it was';
var butWasNot = 'but it was not';
var butCalledWith = "but it was called with";
var apiToString = function (api) {
    return api.constructor.name === 'Number' ? "Api." + api_interface_1.Api[api] : api;
};
var apiExpectationFormatterFor = function (displayName) {
    return function (expected) { return displayName + " = " + apiToString(expected); };
};
var objectExpectationFormatterFor = function (displayName) {
    return function (expected) { return displayName + " =\n" + JSON.stringify(expected, null, 2) + "\n"; };
};
var booleanExpectationFormatterFor = function (displayName) {
    return function (expected) { return displayName + " = " + expected; };
};
var stringExpectationFormatterFor = function (displayName) {
    return function (expected) { return displayName + " = '" + expected + "'"; };
};
var objectArgumentMapperFor = function (optionKey) {
    return function (call) { return "\n" + JSON.stringify(call.args[2][optionKey], null, 2); };
};
var objectJoiner = '\n- and -';
var apiArgumentMapperFor = function (argumentPosition) {
    return function (call) { return apiToString(call.args[argumentPosition]); };
};
var booleanArgumentMapperFor = function (optionKey) {
    return function (call) { return call.args[2][optionKey]; };
};
var stringArgumentMapperFor = function (optionKeyOrArgumentPosition) {
    if (typeof optionKeyOrArgumentPosition === 'number') {
        return function (call) { return "'" + call.args[optionKeyOrArgumentPosition] + "'"; };
    }
    else {
        return function (call) { return "'" + call.args[2][optionKeyOrArgumentPosition] + "'"; };
    }
};
var indefiniteArticleFor = function (noun) {
    return 'aeiou'.split('').indexOf(noun.charAt(0)) > -1 ? 'an' : 'a';
};
var matcherFor = function (argumentPosition, expectationFormatter, argumentMapper) {
    return {
        compare: function (spy, expected) {
            var result = { pass: false, message: '' };
            var allCalls = spy.calls.all();
            var actualValues = allCalls.map(argumentMapper).join(', ');
            var expectedValue = expectationFormatter(expected);
            if (allCalls.length === 0) {
                result.pass = false;
                result.message = messageWith(expectedCalledWith, expectedValue, butNeverCalled);
                return result;
            }
            result.pass = allCalls.some(function (call) { return call.args[argumentPosition] === expected; });
            result.message = result.pass ?
                messageWith(expectedNotCalledWith, expectedValue, butWas) :
                messageWith(expectedCalledWith, expectedValue, butCalledWith, actualValues);
            return result;
        }
    };
};
var optionMatcherFor = function (optionKey, expectationFormatter, argumentMapper, argumentJoiner) {
    if (argumentJoiner === void 0) { argumentJoiner = ', '; }
    return {
        compare: function (spy, expected) {
            var result = { pass: false, message: '' };
            var allCalls = spy.calls.all();
            var allCallsWithOption = allCalls.filter(function (call) { return call.args.length > 2 && call.args[2].hasOwnProperty(optionKey); });
            var actualValues = allCallsWithOption.map(argumentMapper).join(argumentJoiner);
            var expectationIsSpecific = typeof expected !== 'undefined';
            var specificValue = expectationFormatter(expected);
            var unspecificValue = indefiniteArticleFor(optionKey) + " " + optionKey + " option";
            var butNeverCalledUnspecifically = butNeverCalled + " with any " + optionKey + " option";
            if (allCalls.length === 0) {
                result.pass = false;
                result.message = messageWith(expectedCalledWith, expectationIsSpecific ? specificValue : unspecificValue, butNeverCalled);
                return result;
            }
            if (!expectationIsSpecific) {
                result.pass = allCallsWithOption.length > 0;
                result.message = result.pass ?
                    messageWith(expectedNotCalledWith, unspecificValue, butCalledWith, actualValues) :
                    messageWith(expectedCalledWith, unspecificValue, butWasNot);
                return result;
            }
            if (allCallsWithOption.length === 0) {
                result.pass = false;
                result.message = messageWith(expectedCalledWith, specificValue, butNeverCalledUnspecifically);
                return result;
            }
            result.pass = allCallsWithOption.some(function (call) { return JSON.stringify(call.args[2][optionKey]) === JSON.stringify(expected); });
            result.message = result.pass ?
                messageWith(expectedNotCalledWith, specificValue, butWas) :
                messageWith(expectedCalledWith, specificValue, butCalledWith, actualValues);
            return result;
        }
    };
};
exports.mockApiMatchers = {
    toHaveBeenCalledWithApi: function () {
        return matcherFor(0, apiExpectationFormatterFor('api'), apiArgumentMapperFor(0));
    },
    toHaveBeenCalledWithEndpoint: function () {
        return matcherFor(1, stringExpectationFormatterFor('endpoint'), stringArgumentMapperFor(1));
    },
    toHaveBeenCalledWithBody: function () {
        return optionMatcherFor('body', objectExpectationFormatterFor('body'), objectArgumentMapperFor('body'), objectJoiner);
    },
    toHaveBeenCalledWithParameters: function () {
        return optionMatcherFor('parameters', objectExpectationFormatterFor('parameters'), objectArgumentMapperFor('parameters'), objectJoiner);
    },
    toHaveBeenCalledWithLoading: function () {
        return optionMatcherFor('loadingIndicator', booleanExpectationFormatterFor('loadingIndicator'), booleanArgumentMapperFor('loadingIndicator'));
    },
    toHaveBeenCalledWithHeaderType: function () {
        return optionMatcherFor('headerType', stringExpectationFormatterFor('headerType'), stringArgumentMapperFor(1));
    },
    toHaveBeenCalledWithOverridingToken: function () {
        return optionMatcherFor('overridingToken', stringExpectationFormatterFor('overridingToken'), stringArgumentMapperFor('overridingToken'));
    }
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,
