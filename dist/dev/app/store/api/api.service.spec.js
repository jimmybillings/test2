"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("@angular/http");
var Observable_1 = require("rxjs/Observable");
var api_service_1 = require("./api.service");
var api_interface_1 = require("../../shared/interfaces/api.interface");
var ErrorActions = require("../../store/error/error.actions");
var LoadingIndicatorActions = require("../../store/loading-indicator/loading-indicator.actions");
function main() {
    describe('Future Api Service', function () {
        var serviceUnderTest;
        var mockHttp;
        var mockApiConfig;
        var mockNgrxStore;
        var loadingShowSpy;
        var loadingHideSpy;
        var successResponse = new http_1.Response({ status: 200, body: '{ "some": "data" }' });
        var error = { status: 401 };
        var errorAction = new ErrorActions.Handle(error);
        beforeEach(function () {
            mockHttp = {
                request: jasmine.createSpy('request').and.returnValue(Observable_1.Observable.of(successResponse))
            };
            mockApiConfig = {
                headers: function (token) {
                    if (token === void 0) { token = ''; }
                    return new http_1.Headers({ 'Authorization': token === '' ? 'STANDARD TOKEN' : token });
                },
                baseUrl: 'BASE/',
                portal: 'PORTAL'
            };
            mockNgrxStore = {
                dispatch: jasmine.createSpy('dispatch')
            };
            serviceUnderTest = new api_service_1.FutureApiService(mockHttp, mockApiConfig, mockNgrxStore);
        });
        ['get', 'post', 'put', 'delete'].forEach(function (methodName) {
            describe(methodName + "()", function () {
                var methodUnderTest;
                var expectedHttpMethod;
                var getMethodInfoFrom = function (methodName) {
                    switch (methodName) {
                        case 'get': return [serviceUnderTest.get, http_1.RequestMethod.Get];
                        case 'post': return [serviceUnderTest.post, http_1.RequestMethod.Post];
                        case 'put': return [serviceUnderTest.put, http_1.RequestMethod.Put];
                        case 'delete': return [serviceUnderTest.delete, http_1.RequestMethod.Delete];
                        default: return [undefined, undefined];
                    }
                };
                var mostRecentRequest = function () { return mockHttp.request.calls.mostRecent().args[0]; };
                beforeEach(function () {
                    _a = getMethodInfoFrom(methodName), methodUnderTest = _a[0], expectedHttpMethod = _a[1];
                    var _a;
                });
                it('uses the correct HTTP method', function () {
                    methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Identities, 'end/point');
                    expect(mostRecentRequest().method).toEqual(expectedHttpMethod);
                });
                describe('URL', function () {
                    it('is correct for all backend APIs', function () {
                        methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Identities, 'end/point');
                        expect(mostRecentRequest().url).toEqual('BASE/identities-api/v1/end/point?siteName=PORTAL');
                        methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Assets, 'end/point');
                        expect(mostRecentRequest().url).toEqual('BASE/assets-api/v1/end/point?siteName=PORTAL');
                        methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Orders, 'end/point');
                        expect(mostRecentRequest().url).toEqual('BASE/orders-api/v1/end/point?siteName=PORTAL');
                    });
                    it('is unusable when an undefined backend API is specified', function () {
                        methodUnderTest.call(serviceUnderTest, 10836, 'end/point');
                        expect(mostRecentRequest().url).toEqual('BASE/?-api/v?/end/point&siteName=PORTAL');
                    });
                    it('is correct with no options', function () {
                        methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Identities, 'end/point');
                        expect(mostRecentRequest().url).toEqual('BASE/identities-api/v1/end/point?siteName=PORTAL');
                    });
                    it('is correct with parameters', function () {
                        methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Identities, 'end/point', { parameters: { a: 'b', c: 'd' } });
                        expect(mostRecentRequest().url)
                            .toEqual('BASE/identities-api/v1/end/point?a=b&c=d&siteName=PORTAL');
                    });
                    it('disregards a passed-in siteName parameter', function () {
                        spyOn(console, 'error');
                        methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Identities, 'end/point', { parameters: { a: 'b', c: 'd', siteName: 'TEST' } });
                        expect(mostRecentRequest().url)
                            .toEqual('BASE/identities-api/v1/end/point?a=b&c=d&siteName=PORTAL');
                    });
                });
                describe('headers', function () {
                    it('is correct with no options', function () {
                        methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Identities, 'end/point');
                        expect(mostRecentRequest().headers.get('Authorization')).toEqual('STANDARD TOKEN');
                    });
                    it('is correct with override token', function () {
                        methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Identities, 'end/point', { overridingToken: 'OVERRIDING TOKEN' });
                        expect(mostRecentRequest().headers.get('Authorization')).toEqual('OVERRIDING TOKEN');
                    });
                });
                describe('body', function () {
                    it('is just the site name when no body option is specified', function () {
                        methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Identities, 'end/point');
                        expect(mostRecentRequest()._body).toEqual('{"siteName":"PORTAL"}');
                    });
                    it('is the specified body plus the site name', function () {
                        methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Identities, 'end/point', { body: { a: 'b' } });
                        expect(mostRecentRequest()._body).toEqual('{"a":"b","siteName":"PORTAL"}');
                    });
                });
                describe('result', function () {
                    var mockHandlers;
                    beforeEach(function () {
                        mockHandlers = jasmine.createSpyObj('mockHandlers', ['response', 'error']);
                    });
                    it('is as expected when the request succeeds', function () {
                        var apiResponse;
                        methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Identities, 'end/point').subscribe(function (response) {
                            apiResponse = response;
                            mockHandlers.response();
                        }, mockHandlers.error);
                        expect(apiResponse).toEqual({ some: 'data' });
                        expect(mockHandlers.response).toHaveBeenCalled();
                        expect(mockHandlers.error).not.toHaveBeenCalled();
                        expect(mockNgrxStore.dispatch).not.toHaveBeenCalled();
                    });
                    it('is as expected when the request succeeds with a non-JSON response', function () {
                        var apiResponse;
                        mockHttp.request = jasmine.createSpy('request').and.returnValue(Observable_1.Observable.of('Non-JSON!  Ick!'));
                        methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Identities, 'end/point').subscribe(function (response) {
                            apiResponse = response;
                            mockHandlers.response();
                        }, mockHandlers.error);
                        expect(apiResponse).toEqual('Non-JSON!  Ick!');
                        expect(mockHandlers.response).toHaveBeenCalled();
                        expect(mockHandlers.error).not.toHaveBeenCalled();
                        expect(mockNgrxStore.dispatch).not.toHaveBeenCalled();
                    });
                    it('is as expected when the request errors', function () {
                        var apiError;
                        mockHttp.request = jasmine.createSpy('request').and.returnValue(Observable_1.Observable.throw(error));
                        methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Identities, 'end/point').subscribe(mockHandlers.response, function (error) {
                            apiError = error;
                            mockHandlers.error();
                        });
                        expect(apiError).toEqual({ status: 401 });
                        expect(mockHandlers.response).not.toHaveBeenCalled();
                        expect(mockHandlers.error).toHaveBeenCalled();
                        expect(mockNgrxStore.dispatch).not.toHaveBeenCalled();
                    });
                });
                describe('loading indicator animation', function () {
                    var showAction = new LoadingIndicatorActions.Show();
                    var hideAction = new LoadingIndicatorActions.Hide();
                    var nonErrorActionDispatches = function () {
                        return mockNgrxStore.dispatch.calls.allArgs().filter(function (arg) { return arg[0].type !== '[Error] Handle'; });
                    };
                    ['succeeds', 'errors'].forEach(function (result) {
                        describe("when the request " + result, function () {
                            beforeEach(function () {
                                mockHttp.request = jasmine.createSpy('request').and.returnValue(result === 'succeeds' ? Observable_1.Observable.of(successResponse) : Observable_1.Observable.throw(error));
                            });
                            describe('when loadingIndicator option is not specified', function () {
                                it('is not affected', function () {
                                    methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Identities, 'end/point')
                                        .subscribe(function () { }, function () { });
                                    expect(mockNgrxStore.dispatch.calls.allArgs().filter(function (arg) { return arg[0].type !== '[Error] Handle'; })).toEqual([]);
                                });
                            });
                            describe('when loadingIndicator option is false', function () {
                                it('is not affected', function () {
                                    methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Identities, 'end/point', { loadingIndicator: false })
                                        .subscribe(function () { }, function () { });
                                    expect(nonErrorActionDispatches()).toEqual([]);
                                });
                            });
                            describe('when loadingIndicator option is true', function () {
                                it('is started with the request and stopped when the response is returned', function () {
                                    methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Identities, 'end/point', { loadingIndicator: true })
                                        .subscribe(function () { }, function () { });
                                    expect(nonErrorActionDispatches()).toEqual([[showAction], [hideAction]]);
                                });
                            });
                            describe('when loadingIndicator option is onBeforeRequest', function () {
                                it('is only started with the request and not turned off when the response is returned', function () {
                                    methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Identities, 'end/point', { loadingIndicator: 'onBeforeRequest' })
                                        .subscribe(function () { }, function () { });
                                    expect(nonErrorActionDispatches()).toEqual([[showAction]]);
                                });
                            });
                            describe('when loadingIndicator option is offAfterResponse', function () {
                                it('is not started with the request but is stopped when the response is returned', function () {
                                    methodUnderTest.call(serviceUnderTest, api_interface_1.Api.Identities, 'end/point', { loadingIndicator: 'offAfterResponse' })
                                        .subscribe(function () { }, function () { });
                                    expect(nonErrorActionDispatches()).toEqual([[hideAction]]);
                                });
                            });
                        });
                    });
                });
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
