"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var asset_service_1 = require("./asset.service");
var mock_api_service_1 = require("../spec-helpers/mock-api.service");
var api_interface_1 = require("../../shared/interfaces/api.interface");
function main() {
    describe('Asset Service', function () {
        var serviceUnderTest;
        var mockApiService;
        beforeEach(function () {
            jasmine.addMatchers(mock_api_service_1.mockApiMatchers);
            mockApiService = new mock_api_service_1.MockApiService();
            mockApiService.getResponse = { some: 'asset' };
            serviceUnderTest = new asset_service_1.AssetService(mockApiService.injector);
        });
        describe('load()', function () {
            it('calls the API correctly with just an asset ID', function () {
                serviceUnderTest.load({ id: '47' }, 'search');
                expect(mockApiService.get).toHaveBeenCalledWithApi(api_interface_1.Api.Assets);
                expect(mockApiService.get).toHaveBeenCalledWithEndpoint('clip/47/clipDetail');
                expect(mockApiService.get).toHaveBeenCalledWithLoading(true);
                expect(mockApiService.get).not.toHaveBeenCalledWithOverridingToken(jasmine.any(String));
            });
            it('calls the API correctly with a share key', function () {
                serviceUnderTest.load({ id: '47', share_key: 'some_key' }, 'search');
                expect(mockApiService.get).toHaveBeenCalledWithApi(api_interface_1.Api.Assets);
                expect(mockApiService.get).toHaveBeenCalledWithEndpoint('clip/47/clipDetail');
                expect(mockApiService.get).toHaveBeenCalledWithLoading(true);
                expect(mockApiService.get).toHaveBeenCalledWithOverridingToken('some_key');
            });
            it('calls the API service correctly with a collectionAsset', function () {
                serviceUnderTest.load({ id: '123' }, 'collection', 321);
                expect(mockApiService.get).toHaveBeenCalledWithApi(api_interface_1.Api.Assets);
                expect(mockApiService.get).toHaveBeenCalledWithEndpoint('clip/123/collection/321/clipDetail');
                expect(mockApiService.get).toHaveBeenCalledWithLoading(true);
            });
            it('calls the API service correctly with a orderAsset', function () {
                serviceUnderTest.load({ id: '123' }, 'order', 321);
                expect(mockApiService.get).toHaveBeenCalledWithApi(api_interface_1.Api.Assets);
                expect(mockApiService.get).toHaveBeenCalledWithEndpoint('clip/123/order/321/clipDetail');
                expect(mockApiService.get).toHaveBeenCalledWithLoading(true);
            });
            it('calls the API service correctly with a quoteShow asset', function () {
                serviceUnderTest.load({ id: '123' }, 'quoteShow', 321);
                expect(mockApiService.get).toHaveBeenCalledWithApi(api_interface_1.Api.Assets);
                expect(mockApiService.get).toHaveBeenCalledWithEndpoint('clip/123/quote/321/clipDetail');
                expect(mockApiService.get).toHaveBeenCalledWithLoading(true);
            });
            it('calls the API service correctly with a quoteEdit Asset', function () {
                serviceUnderTest.load({ id: '123' }, 'quoteEdit', 321);
                expect(mockApiService.get).toHaveBeenCalledWithApi(api_interface_1.Api.Assets);
                expect(mockApiService.get).toHaveBeenCalledWithEndpoint('clip/123/quote/321/clipDetail');
                expect(mockApiService.get).toHaveBeenCalledWithLoading(true);
            });
            it('returns the expected Observable with just an asset ID', function () {
                var returnedAsset;
                serviceUnderTest.load({ id: '47' }, 'search').subscribe(function (asset) {
                    expect(asset).toEqual({ some: 'asset', uuid: null, timeStart: null, timeEnd: null });
                });
            });
            it('returns the expected Observable with a UUID', function () {
                var returnedAsset;
                serviceUnderTest.load({ id: '47', uuid: 'ABCDEFG' }, 'search').subscribe(function (asset) { return returnedAsset = asset; });
                expect(returnedAsset).toEqual({ some: 'asset', uuid: 'ABCDEFG', timeStart: null, timeEnd: null });
            });
            it('returns the expected Observable with a negative timeStart', function () {
                var returnedAsset;
                serviceUnderTest.load({ id: '47', timeStart: '-1' }, 'search').subscribe(function (asset) { return returnedAsset = asset; });
                expect(returnedAsset).toEqual({ some: 'asset', uuid: null, timeStart: null, timeEnd: null });
            });
            it('returns the expected Observable with a zero timeStart', function () {
                var returnedAsset;
                serviceUnderTest.load({ id: '47', timeStart: '0' }, 'search').subscribe(function (asset) { return returnedAsset = asset; });
                expect(returnedAsset).toEqual({ some: 'asset', uuid: null, timeStart: 0, timeEnd: null });
            });
            it('returns the expected Observable with a positive timeStart', function () {
                var returnedAsset;
                serviceUnderTest.load({ id: '47', timeStart: '1' }, 'search').subscribe(function (asset) { return returnedAsset = asset; });
                expect(returnedAsset).toEqual({ some: 'asset', uuid: null, timeStart: 1, timeEnd: null });
            });
            it('returns the expected Observable with a negative timeEnd', function () {
                var returnedAsset;
                serviceUnderTest.load({ id: '47', timeEnd: '-1' }, 'search').subscribe(function (asset) { return returnedAsset = asset; });
                expect(returnedAsset).toEqual({ some: 'asset', uuid: null, timeStart: null, timeEnd: null });
            });
            it('returns the expected Observable with a zero timeEnd', function () {
                var returnedAsset;
                serviceUnderTest.load({ id: '47', timeEnd: '0' }, 'search').subscribe(function (asset) { return returnedAsset = asset; });
                expect(returnedAsset).toEqual({ some: 'asset', uuid: null, timeStart: null, timeEnd: 0 });
            });
            it('returns the expected Observable with a positive timeEnd', function () {
                var returnedAsset;
                serviceUnderTest.load({ id: '47', timeEnd: '1' }, 'search').subscribe(function (asset) { return returnedAsset = asset; });
                expect(returnedAsset).toEqual({ some: 'asset', uuid: null, timeStart: null, timeEnd: 1 });
            });
        });
    });
    describe('Legacy Asset Service', function () {
        var serviceUnderTest;
        var mockApiService;
        beforeEach(function () {
            jasmine.addMatchers(mock_api_service_1.mockApiMatchers);
            mockApiService = new mock_api_service_1.MockApiService();
            mockApiService.getResponse = { some: 'asset' };
            serviceUnderTest = new asset_service_1.LegacyAssetService(mockApiService.injector);
        });
        describe('createShareLink()', function () {
            it('calls the API correctly', function () {
            });
        });
        describe('getClipPreviewData()', function () {
            it('calls the API correctly', function () {
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
