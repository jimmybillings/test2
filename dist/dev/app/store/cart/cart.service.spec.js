"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var cart_service_1 = require("./cart.service");
var mock_api_service_1 = require("../spec-helpers/mock-api.service");
var api_interface_1 = require("../../shared/interfaces/api.interface");
var index_1 = require("../../shared/modules/wazee-frame-formatter/index");
function main() {
    describe('Future Cart Service', function () {
        var serviceUnderTest, mockApiService;
        beforeEach(function () {
            jasmine.addMatchers(mock_api_service_1.mockApiMatchers);
            mockApiService = new mock_api_service_1.MockApiService();
            serviceUnderTest = new cart_service_1.FutureCartService(mockApiService.injector);
        });
        describe('load()', function () {
            it('calls the api service correctly', function () {
                serviceUnderTest.load();
                expect(mockApiService.get).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.get).toHaveBeenCalledWithEndpoint('cart');
                expect(mockApiService.get).toHaveBeenCalledWithLoading();
            });
        });
        describe('editLineItem()', function () {
            describe('calls the api service correctly', function () {
                it('when called with markers and attributes', function () {
                    serviceUnderTest.editLineItem({ id: 3, asset: { some: 'asset' } }, { in: new index_1.Frame(30).setFromFrameNumber(30), out: new index_1.Frame(30).setFromFrameNumber(60) }, [{ priceAttributeName: 'some', selectedAttributeValue: 'attribute' }]);
                    expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                    expect(mockApiService.put).toHaveBeenCalledWithEndpoint('cart/update/lineItem/3');
                    expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
                    expect(mockApiService.put).toHaveBeenCalledWithBody({
                        id: 3,
                        asset: { some: 'asset', timeStart: 1000, timeEnd: 2000 },
                        attributes: [
                            { priceAttributeName: 'some', selectedAttributeValue: 'attribute' }
                        ]
                    });
                    expect(mockApiService.put).toHaveBeenCalledWithParameters({ region: 'AAA' });
                });
                it('when just called with attributes', function () {
                    serviceUnderTest.editLineItem({ id: 3, asset: { some: 'asset', timeStart: 333, timeEnd: 999 } }, null, [{ priceAttributeName: 'some', selectedAttributeValue: 'attribute' }]);
                    expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                    expect(mockApiService.put).toHaveBeenCalledWithEndpoint('cart/update/lineItem/3');
                    expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
                    expect(mockApiService.put).toHaveBeenCalledWithBody({
                        id: 3,
                        asset: { some: 'asset', timeStart: 333, timeEnd: 999 },
                        attributes: [
                            { priceAttributeName: 'some', selectedAttributeValue: 'attribute' }
                        ]
                    });
                    expect(mockApiService.put).toHaveBeenCalledWithParameters({ region: 'AAA' });
                });
                it('when just called with markers', function () {
                    serviceUnderTest.editLineItem({
                        id: 3,
                        asset: { some: 'asset' }
                    }, { in: new index_1.Frame(30).setFromFrameNumber(30), out: new index_1.Frame(30).setFromFrameNumber(60) }, null);
                    expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                    expect(mockApiService.put).toHaveBeenCalledWithEndpoint('cart/update/lineItem/3');
                    expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
                    expect(mockApiService.put).toHaveBeenCalledWithBody({
                        id: 3,
                        asset: { some: 'asset', timeStart: 1000, timeEnd: 2000 },
                        attributes: []
                    });
                    expect(mockApiService.put).toHaveBeenCalledWithParameters({ region: 'AAA' });
                });
            });
        });
        describe('removeAsset()', function () {
            it('calls the API correctly', function () {
                serviceUnderTest.removeAsset({ uuid: 'ABCD' });
                expect(mockApiService.delete).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.delete).toHaveBeenCalledWithEndpoint('cart/asset/ABCD');
                expect(mockApiService.delete).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('addNote()', function () {
            it('replaces the first note if the field already exists', function () {
                serviceUnderTest.addNote('some note', { id: 'abc-123', notes: [{ notes: ['note'] }] });
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('cart/update/lineItem/abc-123');
                expect(mockApiService.put).toHaveBeenCalledWithBody({ id: 'abc-123', notes: [{ notes: ['some note'] }] });
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
            it('adds the \'notes\' if the field doesn\'t exists', function () {
                serviceUnderTest.addNote('some note', { id: 'abc-123' });
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('cart/update/lineItem/abc-123');
                expect(mockApiService.put).toHaveBeenCalledWithBody({ id: 'abc-123', notes: [{ notes: ['some note'] }] });
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('removeNoteFrom()', function () {
            it('calls the apiService correctly', function () {
                serviceUnderTest.removeNoteFrom({ id: 'abc-123', some: 'lineItem', notes: [{ notes: ['some note'] }] });
                expect(mockApiService.put).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApiService.put).toHaveBeenCalledWithEndpoint('cart/update/lineItem/abc-123');
                expect(mockApiService.put).toHaveBeenCalledWithBody({ id: 'abc-123', some: 'lineItem' });
                expect(mockApiService.put).toHaveBeenCalledWithLoading(true);
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
