"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var wz_input_suggestions_component_1 = require("./wz-input-suggestions.component");
var mock_api_service_1 = require("../../../../mocks/mock-api.service");
var forms_1 = require("@angular/forms");
var api_interface_1 = require("../../../../interfaces/api.interface");
function main() {
    describe('Wz Input Suggestions Component', function () {
        var componentUnderTest, mockApi, mockRenderer, mockDetector;
        mockRenderer = {
            listenGlobal: jasmine.createSpy('listenGlobal').and.callFake(function (a, b, c) {
                c();
                return function () { return true; };
            })
        };
        mockDetector = { markForCheck: jasmine.createSpy('markForCheck') };
        beforeEach(function () {
            jasmine.addMatchers(mock_api_service_1.mockApiMatchers);
            mockApi = new mock_api_service_1.MockApiService();
            componentUnderTest = new wz_input_suggestions_component_1.WzInputSuggestionsComponent(mockRenderer, mockApi.injector, mockDetector);
            componentUnderTest.fControl = new forms_1.FormControl('query');
            componentUnderTest.rawField = {
                'service': 'assets',
                'endPoint': 'search/thesaurusTerms',
                'queryParams': 'maxTerms, 10',
                'name': 'name',
                'label': 'COLLECTION.FORM.COLLECTION_NAME_LABEL',
                'type': 'suggestions',
                'value': '',
                'validation': 'REQUIRED'
            };
        });
        describe('ngOnInit()', function () {
            it('listens for body clicks to close suggestions', function () {
                spyOn(componentUnderTest, 'closeSuggestions');
                componentUnderTest.ngOnInit();
                expect(mockRenderer.listenGlobal).toHaveBeenCalledWith('body', 'click', jasmine.any(Function));
            });
            it('listens for form field value changes', function () {
                spyOn(componentUnderTest, 'suggestionChangeListener');
                componentUnderTest.ngOnInit();
                expect(componentUnderTest.suggestionChangeListener).toHaveBeenCalled();
            });
        });
        describe('ngOnDestroy()', function () {
            it('correctly destroys any listeners and subscriptions', function () {
                spyOn(componentUnderTest, 'destroySubscription').and.callThrough();
                componentUnderTest.ngOnInit();
                componentUnderTest.ngOnDestroy();
                expect(componentUnderTest.destroySubscription).toHaveBeenCalled();
            });
            it('Does not try to detroy any subscription if none exist', function () {
                componentUnderTest.fControl = null;
                spyOn(componentUnderTest, 'destroySubscription').and.callThrough();
                componentUnderTest.ngOnInit();
                componentUnderTest.ngOnDestroy();
                expect(componentUnderTest.destroySubscription).toHaveBeenCalled();
            });
        });
        describe('suggestionChangeListener()', function () {
            it('Does nothing if the value of the user input is the same as the active suggestion', function () {
                componentUnderTest.suggestionChangeListener();
                componentUnderTest.activeSuggestion = 'cat';
                componentUnderTest.fControl.setValue('cat');
                expect(componentUnderTest.activeSuggestion).toEqual('cat');
            });
            it('close suggestion if user input is not greater than one character', function () {
                componentUnderTest.suggestionChangeListener();
                spyOn(componentUnderTest, 'closeSuggestions');
                componentUnderTest.activeSuggestion = 'cat';
                componentUnderTest.fControl.setValue('c');
                expect(componentUnderTest.activeSuggestion).toEqual(null);
                expect(componentUnderTest.closeSuggestions).toHaveBeenCalled();
            });
            it('handles flat arrays', function () {
                mockApi.getResponse = { list: ['test', 'testing', 'testing 123'] };
                componentUnderTest.suggestionChangeListener();
                componentUnderTest.activeSuggestion = 'cat';
                componentUnderTest.fControl.setValue('dog');
                expect(componentUnderTest.suggestions).toEqual(['dog', 'test', 'testing', 'testing 123']);
            });
            it('handles collections', function () {
                mockApi.getResponse = { items: [{ name: 'test' }, { name: 'testing' }, { name: 'testing 123' }] };
                componentUnderTest.suggestionChangeListener();
                componentUnderTest.activeSuggestion = 'cat';
                componentUnderTest.fControl.setValue('dog');
                expect(componentUnderTest.suggestions).toEqual(['dog', 'test', 'testing', 'testing 123']);
            });
            it('Do not hide suggestions that match the user search if it\s being used for collections', function () {
                mockApi.getResponse = { list: ['test', 'testing', 'testing 123'] };
                componentUnderTest.rawField.endPoint = 'collection/search';
                componentUnderTest.suggestionChangeListener();
                componentUnderTest.activeSuggestion = 'cat';
                componentUnderTest.fControl.setValue('dog');
                expect(componentUnderTest.suggestions).toEqual(['dog', 'test', 'testing', 'testing 123']);
            });
            it('Does not initialize the subscription unless the form control has been initialized first', function () {
                componentUnderTest.fControl = null;
                componentUnderTest.suggestionChangeListener();
            });
            describe('Calls api with correct params', function () {
                it('for assets', function () {
                    componentUnderTest.suggestionChangeListener();
                    componentUnderTest.activeSuggestion = 'cat';
                    componentUnderTest.fControl.setValue('dog');
                    expect(componentUnderTest.activeSuggestion).toEqual(null);
                    expect(mockApi.get).toHaveBeenCalledWith(api_interface_1.Api.Assets, componentUnderTest.rawField.endPoint, { parameters: Object.assign({}, { 'maxTerms': '10' }, { text: 'dog' }, { q: 'dog' }) });
                });
                it('for identities', function () {
                    componentUnderTest.rawField = {
                        'service': 'identities',
                        'endPoint': 'user/searchFields',
                        'queryParams': 'fields, emailAddress, values',
                        'name': 'emailAddress',
                        'label': 'emailAddress',
                        'type': 'suggestions',
                        'value': '',
                        'validation': 'REQUIRED'
                    };
                    componentUnderTest.suggestionChangeListener();
                    componentUnderTest.activeSuggestion = 'cat';
                    componentUnderTest.fControl.setValue('dog');
                    expect(componentUnderTest.activeSuggestion).toEqual(null);
                    expect(mockApi.get).toHaveBeenCalledWith(api_interface_1.Api.Identities, componentUnderTest.rawField.endPoint, { parameters: Object.assign({}, { fields: 'emailAddress', values: 'dog' }) });
                });
                it('no service, defaults to empty observable', function () {
                    componentUnderTest.rawField = { service: 'nothing', endPoint: 'blah' };
                    componentUnderTest.suggestionChangeListener();
                    componentUnderTest.activeSuggestion = 'cat';
                    componentUnderTest.fControl.setValue('dog');
                    expect(componentUnderTest.activeSuggestion).toEqual(null);
                    expect(mockApi.get).not.toHaveBeenCalled();
                });
            });
        });
        describe('selectSuggestion()', function () {
            it('set\'s the field value to the selected suggestion', function () {
                spyOn(componentUnderTest.fControl, 'setValue');
                componentUnderTest.selectSuggestion('dogs');
                expect(componentUnderTest.fControl.setValue).toHaveBeenCalledWith('dogs', { emitEvent: false });
            });
            it('emits an output event with selected suggestion', function () {
                spyOn(componentUnderTest.newSuggestion, 'emit');
                componentUnderTest.activeSuggestion = 'dogs';
                componentUnderTest.selectSuggestion('dogs');
                expect(componentUnderTest.newSuggestion.emit).toHaveBeenCalledWith('dogs');
            });
            it('closes the suggestions once one has been selected', function () {
                spyOn(componentUnderTest, 'closeSuggestions');
                componentUnderTest.selectSuggestion('dogs');
                expect(componentUnderTest.closeSuggestions).toHaveBeenCalled();
            });
        });
        describe('parseSuggestion', function () {
            it('removes any parentheses and wraps any words that match the user input with <strong> tags', function () {
                mockApi.getResponse = { list: ['test', 'testing', 'testing 123'] };
                componentUnderTest.rawField.endPoint = 'collection/search';
                componentUnderTest.suggestionChangeListener();
                componentUnderTest.activeSuggestion = 'cat';
                componentUnderTest.fControl.setValue('dog');
                expect(componentUnderTest.parseSuggestion('dog-(hugging)')).toEqual('<strong>dog</strong>-(hugging)');
            });
        });
        describe('inputKeyDown()', function () {
            describe('responds to users hitting the tab button', function () {
                it('using event.which', function () {
                    spyOn(componentUnderTest, 'closeSuggestions');
                    var eve = { which: 9 };
                    componentUnderTest.inputKeyDown(eve);
                    expect(componentUnderTest.closeSuggestions).toHaveBeenCalled();
                });
                it('using event.keyCode', function () {
                    spyOn(componentUnderTest, 'closeSuggestions');
                    var eve = { keyCode: 9 };
                    componentUnderTest.inputKeyDown(eve);
                    expect(componentUnderTest.closeSuggestions).toHaveBeenCalled();
                });
            });
            describe('responds to user hitting the up arrow', function () {
                describe('using event.which', function () {
                    it('Sets active suggestion to the first suggestion in the array if one has\'nt already been selected', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = 'tes';
                        var eve = { which: 38, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.activeSuggestion).toEqual('test');
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                    it('There are more suggestions above the current suggestion so select the next', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = 'testing';
                        var eve = { which: 38, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.activeSuggestion).toEqual('test');
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                    it('There are no more suggestions above the current suggestion so loop back around and select the last', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = 'test';
                        var eve = { which: 38, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.activeSuggestion).toEqual('test 123');
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                });
                describe('using event.keyCode', function () {
                    it('Sets active suggestion to the first suggestion in the array if one has\'nt already been selected', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = 'tes';
                        var eve = { keyCode: 38, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.activeSuggestion).toEqual('test');
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                    it('There are more suggestions above the current suggestion so select the next', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = 'testing';
                        var eve = { keyCode: 38, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.activeSuggestion).toEqual('test');
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                    it('There are no more suggestions above the current suggestion so loop back around and select the last', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = 'test';
                        var eve = { keyCode: 38, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.activeSuggestion).toEqual('test 123');
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                });
            });
            describe('responds to user hitting the down arrow', function () {
                describe('using event.which', function () {
                    it('Sets active suggestion to the second suggestion in the array if one has\'nt already been selected', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = 'tes';
                        var eve = { which: 40, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.activeSuggestion).toEqual('testing');
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                    it('There are more suggestions below the current suggestion so select the next', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = 'testing';
                        var eve = { which: 40, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.activeSuggestion).toEqual('test 123');
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                    it('There are no more suggestions below the current suggestion so loop back around and select the first', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = 'test 123';
                        var eve = { which: 40, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.activeSuggestion).toEqual('test');
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                });
                describe('using event.keyCode', function () {
                    it('Sets active suggestion to the second suggestion in the array if one has\'nt already been selected', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = 'tes';
                        var eve = { keyCode: 40, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.activeSuggestion).toEqual('testing');
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                    it('There are more suggestions below the current suggestion so select the next', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = 'testing';
                        var eve = { keyCode: 40, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.activeSuggestion).toEqual('test 123');
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                    it('There are no more suggestions below the current suggestion so loop back around and select the first', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = 'test 123';
                        var eve = { keyCode: 40, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.activeSuggestion).toEqual('test');
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                });
            });
            describe('responds to user hitting the enter key', function () {
                describe('using event.which', function () {
                    it('Looks for an active collection, if it finds one it selects the suggestion for submit', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = 'testing';
                        spyOn(componentUnderTest, 'selectSuggestion');
                        var eve = { which: 10, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.selectSuggestion).toHaveBeenCalledWith('testing');
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                    it('Looks for an active collection, if it finds one it selects the suggestion for submit', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = 'testing';
                        spyOn(componentUnderTest, 'selectSuggestion');
                        var eve = { which: 13, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.selectSuggestion).toHaveBeenCalledWith('testing');
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                    it('If no active suggestion is currently set, assume user wants to search with the keyword they typed', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = null;
                        spyOn(componentUnderTest.newSuggestion, 'emit');
                        spyOn(componentUnderTest, 'closeSuggestions');
                        var eve = { which: 13, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.newSuggestion.emit).toHaveBeenCalled();
                        expect(componentUnderTest.closeSuggestions).toHaveBeenCalled();
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                    it('If no active suggestion is currently set, assume user wants to search with the keyword they typed', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = null;
                        spyOn(componentUnderTest.newSuggestion, 'emit');
                        spyOn(componentUnderTest, 'closeSuggestions');
                        var eve = { which: 10, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.newSuggestion.emit).toHaveBeenCalled();
                        expect(componentUnderTest.closeSuggestions).toHaveBeenCalled();
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                });
                describe('using event.keyCode', function () {
                    it('Looks for an active collection, if it finds one it selects the suggestion for submit', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = 'testing';
                        spyOn(componentUnderTest, 'selectSuggestion');
                        var eve = { keyCode: 10, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.selectSuggestion).toHaveBeenCalledWith('testing');
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                    it('Looks for an active collection, if it finds one it selects the suggestion for submit', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = 'testing';
                        spyOn(componentUnderTest, 'selectSuggestion');
                        var eve = { keyCode: 13, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.selectSuggestion).toHaveBeenCalledWith('testing');
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                    it('If no active suggestion is currently set, assume user wants to search with the keyword they typed', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = null;
                        spyOn(componentUnderTest.newSuggestion, 'emit');
                        spyOn(componentUnderTest, 'closeSuggestions');
                        var eve = { keyCode: 13, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.newSuggestion.emit).toHaveBeenCalled();
                        expect(componentUnderTest.closeSuggestions).toHaveBeenCalled();
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                    it('If no active suggestion is currently set, assume user wants to search with the keyword they typed', function () {
                        componentUnderTest.suggestions = ['test', 'testing', 'test 123'];
                        componentUnderTest.activeSuggestion = null;
                        spyOn(componentUnderTest.newSuggestion, 'emit');
                        spyOn(componentUnderTest, 'closeSuggestions');
                        var eve = { keyCode: 10, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.newSuggestion.emit).toHaveBeenCalled();
                        expect(componentUnderTest.closeSuggestions).toHaveBeenCalled();
                        expect(eve.preventDefault).toHaveBeenCalled();
                    });
                    it('Does nothing if there are no suggestions when hitting the enter key, lets form submit natively', function () {
                        componentUnderTest.suggestions = [];
                        componentUnderTest.activeSuggestion = null;
                        spyOn(componentUnderTest.newSuggestion, 'emit');
                        spyOn(componentUnderTest, 'closeSuggestions');
                        spyOn(componentUnderTest, 'selectSuggestion');
                        var eve = { keyCode: 10, preventDefault: jasmine.createSpy('preventDefault') };
                        componentUnderTest.inputKeyDown(eve);
                        expect(componentUnderTest.newSuggestion.emit).not.toHaveBeenCalled();
                        expect(componentUnderTest.closeSuggestions).not.toHaveBeenCalled();
                        expect(componentUnderTest.selectSuggestion).not.toHaveBeenCalled();
                    });
                });
            });
        });
    });
}
exports.main = main;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zaGFyZWQvbW9kdWxlcy93ei1mb3JtL2NvbXBvbmVudHMvd3otaW5wdXQtc3VnZ2VzdGlvbnMvd3otaW5wdXQtc3VnZ2VzdGlvbnMuY29tcG9uZW50LnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtRkFBK0U7QUFDL0UsdUVBQXFGO0FBQ3JGLHdDQUE2QztBQUM3QyxzRUFBMkQ7QUFFM0Q7SUFDRSxRQUFRLENBQUMsZ0NBQWdDLEVBQUU7UUFDekMsSUFBSSxrQkFBK0MsRUFBRSxPQUF1QixFQUFFLFlBQWlCLEVBQUUsWUFBaUIsQ0FBQztRQUNuSCxZQUFZLEdBQUc7WUFDYixZQUFZLEVBQ1YsT0FBTyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQUMsQ0FBTSxFQUFFLENBQU0sRUFBRSxDQUFXO2dCQUN6RSxDQUFDLEVBQUUsQ0FBQztnQkFBQyxNQUFNLENBQUMsY0FBUSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLENBQUMsQ0FBQztTQUNMLENBQUM7UUFDRixZQUFZLEdBQUcsRUFBRSxZQUFZLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDO1FBQ25FLFVBQVUsQ0FBQztZQUNULE9BQU8sQ0FBQyxXQUFXLENBQUMsa0NBQWUsQ0FBQyxDQUFDO1lBQ3JDLE9BQU8sR0FBRyxJQUFJLGlDQUFjLEVBQUUsQ0FBQztZQUMvQixrQkFBa0IsR0FBRyxJQUFJLDREQUEyQixDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ25HLGtCQUFrQixDQUFDLFFBQVEsR0FBRyxJQUFJLG1CQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdkQsa0JBQWtCLENBQUMsUUFBUSxHQUFHO2dCQUM1QixTQUFTLEVBQUUsUUFBUTtnQkFDbkIsVUFBVSxFQUFFLHVCQUF1QjtnQkFDbkMsYUFBYSxF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Q0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO3dCQUNuRSxNQUFNLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztvQkFDckUsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBM2FELG9CQTJhQztBQUFBLENBQUMiLCJmaWxlIjoiYXBwL3NoYXJlZC9tb2R1bGVzL3d6LWZvcm0vY29tcG9uZW50cy93ei1pbnB1dC1zdWdnZXN0aW9ucy93ei1pbnB1dC1zdWdnZXN0aW9ucy5jb21wb25lbnQuc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFd6SW5wdXRTdWdnZXN0aW9uc0NvbXBvbmVudCB9IGZyb20gJy4vd3otaW5wdXQtc3VnZ2VzdGlvbnMuY29tcG9uZW50JztcbmltcG9ydCB7IE1vY2tBcGlTZXJ2aWNlLCBtb2NrQXBpTWF0Y2hlcnMgfSBmcm9tICcuLi8uLi8uLi8uLi9tb2Nrcy9tb2NrLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQXBpIH0gZnJvbSAnLi4vLi4vLi4vLi4vaW50ZXJmYWNlcy9hcGkuaW50ZXJmYWNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIG1haW4oKSB7XG4gIGRlc2NyaWJlKCdXeiBJbnB1dCBTdWdnZXN0aW9ucyBDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgbGV0IGNvbXBvbmVudFVuZGVyVGVzdDogV3pJbnB1dFN1Z2dlc3Rpb25zQ29tcG9uZW50LCBtb2NrQXBpOiBNb2NrQXBpU2VydmljZSwgbW9ja1JlbmRlcmVyOiBhbnksIG1vY2tEZXRlY3RvcjogYW55O1xuICAgIG1vY2tSZW5kZXJlciA9IHtcbiAgICAgIGxpc3Rlbkdsb2JhbDpcbiAgICAgICAgamFzbWluZS5jcmVhdGVTcHkoJ2xpc3Rlbkdsb2JhbCcpLmFuZC5jYWxsRmFrZSgoYTogYW55LCBiOiBhbnksIGM6IEZ1bmN0aW9uKSA9PiB7XG4gICAgICAgICAgYygpOyByZXR1cm4gKCkgPT4geyByZXR1cm4gdHJ1ZTsgfTtcbiAgICAgICAgfSlcbiAgICB9O1xuICAgIG1vY2tEZXRlY3RvciA9IHsgbWFya0ZvckNoZWNrOiBqYXNtaW5lLmNyZWF0ZVNweSgnbWFya0ZvckNoZWNrJykgfTtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGphc21pbmUuYWRkTWF0Y2hlcnMobW9ja0FwaU1hdGNoZXJzKTtcbiAgICAgIG1vY2tBcGkgPSBuZXcgTW9ja0FwaVNlcnZpY2UoKTtcbiAgICAgIGNvbXBvbmVudFVuZGVyVGVzdCA9IG5ldyBXeklucHV0U3VnZ2VzdGlvbnNDb21wb25lbnQobW9ja1JlbmRlcmVyLCBtb2NrQXBpLmluamVjdG9yLCBtb2NrRGV0ZWN0b3IpO1xuICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmZDb250cm9sID0gbmV3IEZvcm1Db250cm9sKCdxdWVyeScpO1xuICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnJhd0ZpZWxkID0ge1xuICAgICAgICAnc2VydmljZSc6ICdhc3NldHMnLFxuICAgICAgICAnZW5kUG9pbnQnOiAnc2VhcmNoL3RoZXNhdXJ1c1Rlcm1zJyxcbiAgICAgICAgJ3F1ZXJ5UGFyYW1zJzogJ21heFRlcm1zLCAxMCcsXG4gICAgICAgICduYW1lJzogJ25hbWUnLFxuICAgICAgICAnbGFiZWwnOiAnQ09MTEVDVElPTi5GT1JNLkNPTExFQ1RJT05fTkFNRV9MQUJFTCcsXG4gICAgICAgICd0eXBlJzogJ3N1Z2dlc3Rpb25zJyxcbiAgICAgICAgJ3ZhbHVlJzogJycsXG4gICAgICAgICd2YWxpZGF0aW9uJzogJ1JFUVVJUkVEJ1xuICAgICAgfTtcblxuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ25nT25Jbml0KCknLCAoKSA9PiB7XG4gICAgICBpdCgnbGlzdGVucyBmb3IgYm9keSBjbGlja3MgdG8gY2xvc2Ugc3VnZ2VzdGlvbnMnLCAoKSA9PiB7XG4gICAgICAgIHNweU9uKGNvbXBvbmVudFVuZGVyVGVzdCwgJ2Nsb3NlU3VnZ2VzdGlvbnMnKTtcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0Lm5nT25Jbml0KCk7XG4gICAgICAgIGV4cGVjdChtb2NrUmVuZGVyZXIubGlzdGVuR2xvYmFsKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnYm9keScsICdjbGljaycsIGphc21pbmUuYW55KEZ1bmN0aW9uKSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ2xpc3RlbnMgZm9yIGZvcm0gZmllbGQgdmFsdWUgY2hhbmdlcycsICgpID0+IHtcbiAgICAgICAgc3B5T24oY29tcG9uZW50VW5kZXJUZXN0LCAnc3VnZ2VzdGlvbkNoYW5nZUxpc3RlbmVyJyk7XG4gICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5uZ09uSW5pdCgpO1xuICAgICAgICBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0LnN1Z2dlc3Rpb25DaGFuZ2VMaXN0ZW5lcikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnbmdPbkRlc3Ryb3koKScsICgpID0+IHtcbiAgICAgIGl0KCdjb3JyZWN0bHkgZGVzdHJveXMgYW55IGxpc3RlbmVycyBhbmQgc3Vic2NyaXB0aW9ucycsICgpID0+IHtcbiAgICAgICAgc3B5T24oY29tcG9uZW50VW5kZXJUZXN0LCAnZGVzdHJveVN1YnNjcmlwdGlvbicpLmFuZC5jYWxsVGhyb3VnaCgpO1xuICAgICAgICBjb21wb25lbnRVbmRlclRlc3QubmdPbkluaXQoKTtcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0Lm5nT25EZXN0cm95KCk7XG4gICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3QuZGVzdHJveVN1YnNjcmlwdGlvbikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdEb2VzIG5vdCB0cnkgdG8gZGV0cm95IGFueSBzdWJzY3JpcHRpb24gaWYgbm9uZSBleGlzdCcsICgpID0+IHtcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmZDb250cm9sID0gbnVsbDtcbiAgICAgICAgc3B5T24oY29tcG9uZW50VW5kZXJUZXN0LCAnZGVzdHJveVN1YnNjcmlwdGlvbicpLmFuZC5jYWxsVGhyb3VnaCgpO1xuICAgICAgICBjb21wb25lbnRVbmRlclRlc3QubmdPbkluaXQoKTtcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0Lm5nT25EZXN0cm95KCk7XG4gICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3QuZGVzdHJveVN1YnNjcmlwdGlvbikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnc3VnZ2VzdGlvbkNoYW5nZUxpc3RlbmVyKCknLCAoKSA9PiB7XG4gICAgICBpdCgnRG9lcyBub3RoaW5nIGlmIHRoZSB2YWx1ZSBvZiB0aGUgdXNlciBpbnB1dCBpcyB0aGUgc2FtZSBhcyB0aGUgYWN0aXZlIHN1Z2dlc3Rpb24nLCAoKSA9PiB7XG4gICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zdWdnZXN0aW9uQ2hhbmdlTGlzdGVuZXIoKTtcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24gPSAnY2F0JztcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmZDb250cm9sLnNldFZhbHVlKCdjYXQnKTtcbiAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC5hY3RpdmVTdWdnZXN0aW9uKS50b0VxdWFsKCdjYXQnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnY2xvc2Ugc3VnZ2VzdGlvbiBpZiB1c2VyIGlucHV0IGlzIG5vdCBncmVhdGVyIHRoYW4gb25lIGNoYXJhY3RlcicsICgpID0+IHtcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnN1Z2dlc3Rpb25DaGFuZ2VMaXN0ZW5lcigpO1xuICAgICAgICBzcHlPbihjb21wb25lbnRVbmRlclRlc3QsICdjbG9zZVN1Z2dlc3Rpb25zJyk7XG4gICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5hY3RpdmVTdWdnZXN0aW9uID0gJ2NhdCc7XG4gICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5mQ29udHJvbC5zZXRWYWx1ZSgnYycpO1xuICAgICAgICBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24pLnRvRXF1YWwobnVsbCk7XG4gICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3QuY2xvc2VTdWdnZXN0aW9ucykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdoYW5kbGVzIGZsYXQgYXJyYXlzJywgKCkgPT4ge1xuICAgICAgICBtb2NrQXBpLmdldFJlc3BvbnNlID0geyBsaXN0OiBbJ3Rlc3QnLCAndGVzdGluZycsICd0ZXN0aW5nIDEyMyddIH07XG4gICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zdWdnZXN0aW9uQ2hhbmdlTGlzdGVuZXIoKTtcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24gPSAnY2F0JztcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmZDb250cm9sLnNldFZhbHVlKCdkb2cnKTtcbiAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC5zdWdnZXN0aW9ucykudG9FcXVhbChbJ2RvZycsICd0ZXN0JywgJ3Rlc3RpbmcnLCAndGVzdGluZyAxMjMnXSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ2hhbmRsZXMgY29sbGVjdGlvbnMnLCAoKSA9PiB7XG4gICAgICAgIG1vY2tBcGkuZ2V0UmVzcG9uc2UgPSB7IGl0ZW1zOiBbeyBuYW1lOiAndGVzdCcgfSwgeyBuYW1lOiAndGVzdGluZycgfSwgeyBuYW1lOiAndGVzdGluZyAxMjMnIH1dIH07XG4gICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zdWdnZXN0aW9uQ2hhbmdlTGlzdGVuZXIoKTtcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24gPSAnY2F0JztcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmZDb250cm9sLnNldFZhbHVlKCdkb2cnKTtcbiAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC5zdWdnZXN0aW9ucykudG9FcXVhbChbJ2RvZycsICd0ZXN0JywgJ3Rlc3RpbmcnLCAndGVzdGluZyAxMjMnXSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ0RvIG5vdCBoaWRlIHN1Z2dlc3Rpb25zIHRoYXQgbWF0Y2ggdGhlIHVzZXIgc2VhcmNoIGlmIGl0XFxzIGJlaW5nIHVzZWQgZm9yIGNvbGxlY3Rpb25zJywgKCkgPT4ge1xuICAgICAgICBtb2NrQXBpLmdldFJlc3BvbnNlID0geyBsaXN0OiBbJ3Rlc3QnLCAndGVzdGluZycsICd0ZXN0aW5nIDEyMyddIH07XG4gICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5yYXdGaWVsZC5lbmRQb2ludCA9ICdjb2xsZWN0aW9uL3NlYXJjaCc7XG4gICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zdWdnZXN0aW9uQ2hhbmdlTGlzdGVuZXIoKTtcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24gPSAnY2F0JztcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmZDb250cm9sLnNldFZhbHVlKCdkb2cnKTtcbiAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC5zdWdnZXN0aW9ucykudG9FcXVhbChbJ2RvZycsICd0ZXN0JywgJ3Rlc3RpbmcnLCAndGVzdGluZyAxMjMnXSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ0RvZXMgbm90IGluaXRpYWxpemUgdGhlIHN1YnNjcmlwdGlvbiB1bmxlc3MgdGhlIGZvcm0gY29udHJvbCBoYXMgYmVlbiBpbml0aWFsaXplZCBmaXJzdCcsICgpID0+IHtcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmZDb250cm9sID0gbnVsbDtcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnN1Z2dlc3Rpb25DaGFuZ2VMaXN0ZW5lcigpO1xuICAgICAgfSk7XG5cblxuICAgICAgZGVzY3JpYmUoJ0NhbGxzIGFwaSB3aXRoIGNvcnJlY3QgcGFyYW1zJywgKCkgPT4ge1xuICAgICAgICBpdCgnZm9yIGFzc2V0cycsICgpID0+IHtcbiAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc3VnZ2VzdGlvbkNoYW5nZUxpc3RlbmVyKCk7XG4gICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24gPSAnY2F0JztcbiAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuZkNvbnRyb2wuc2V0VmFsdWUoJ2RvZycpO1xuICAgICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3QuYWN0aXZlU3VnZ2VzdGlvbikudG9FcXVhbChudWxsKTtcbiAgICAgICAgICBleHBlY3QobW9ja0FwaS5nZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKEFwaS5Bc3NldHMsIGNvbXBvbmVudFVuZGVyVGVzdC5yYXdGaWVsZC5lbmRQb2ludCxcbiAgICAgICAgICAgIHsgcGFyYW1ldGVyczogT2JqZWN0LmFzc2lnbih7fSwgeyAnbWF4VGVybXMnOiAnMTAnIH0sIHsgdGV4dDogJ2RvZycgfSwgeyBxOiAnZG9nJyB9KSB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ2ZvciBpZGVudGl0aWVzJywgKCkgPT4ge1xuICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5yYXdGaWVsZCA9IHtcbiAgICAgICAgICAgICdzZXJ2aWNlJzogJ2lkZW50aXRpZXMnLFxuICAgICAgICAgICAgJ2VuZFBvaW50JzogJ3VzZXIvc2VhcmNoRmllbGRzJyxcbiAgICAgICAgICAgICdxdWVyeVBhcmFtcyc6ICdmaWVsZHMsIGVtYWlsQWRkcmVzcywgdmFsdWVzJyxcbiAgICAgICAgICAgICduYW1lJzogJ2VtYWlsQWRkcmVzcycsXG4gICAgICAgICAgICAnbGFiZWwnOiAnZW1haWxBZGRyZXNzJyxcbiAgICAgICAgICAgICd0eXBlJzogJ3N1Z2dlc3Rpb25zJyxcbiAgICAgICAgICAgICd2YWx1ZSc6ICcnLFxuICAgICAgICAgICAgJ3ZhbGlkYXRpb24nOiAnUkVRVUlSRUQnXG4gICAgICAgICAgfTtcbiAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc3VnZ2VzdGlvbkNoYW5nZUxpc3RlbmVyKCk7XG4gICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24gPSAnY2F0JztcbiAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuZkNvbnRyb2wuc2V0VmFsdWUoJ2RvZycpO1xuICAgICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3QuYWN0aXZlU3VnZ2VzdGlvbikudG9FcXVhbChudWxsKTtcbiAgICAgICAgICBleHBlY3QobW9ja0FwaS5nZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKEFwaS5JZGVudGl0aWVzLCBjb21wb25lbnRVbmRlclRlc3QucmF3RmllbGQuZW5kUG9pbnQsXG4gICAgICAgICAgICB7IHBhcmFtZXRlcnM6IE9iamVjdC5hc3NpZ24oe30sIHsgZmllbGRzOiAnZW1haWxBZGRyZXNzJywgdmFsdWVzOiAnZG9nJyB9KSB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ25vIHNlcnZpY2UsIGRlZmF1bHRzIHRvIGVtcHR5IG9ic2VydmFibGUnLCAoKSA9PiB7XG4gICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnJhd0ZpZWxkID0geyBzZXJ2aWNlOiAnbm90aGluZycsIGVuZFBvaW50OiAnYmxhaCcgfTtcbiAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc3VnZ2VzdGlvbkNoYW5nZUxpc3RlbmVyKCk7XG4gICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24gPSAnY2F0JztcbiAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuZkNvbnRyb2wuc2V0VmFsdWUoJ2RvZycpO1xuICAgICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3QuYWN0aXZlU3VnZ2VzdGlvbikudG9FcXVhbChudWxsKTtcbiAgICAgICAgICBleHBlY3QobW9ja0FwaS5nZXQpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnc2VsZWN0U3VnZ2VzdGlvbigpJywgKCkgPT4ge1xuICAgICAgaXQoJ3NldFxcJ3MgdGhlIGZpZWxkIHZhbHVlIHRvIHRoZSBzZWxlY3RlZCBzdWdnZXN0aW9uJywgKCkgPT4ge1xuICAgICAgICBzcHlPbihjb21wb25lbnRVbmRlclRlc3QuZkNvbnRyb2wsICdzZXRWYWx1ZScpO1xuICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc2VsZWN0U3VnZ2VzdGlvbignZG9ncycpO1xuICAgICAgICBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0LmZDb250cm9sLnNldFZhbHVlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnZG9ncycsIHsgZW1pdEV2ZW50OiBmYWxzZSB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnZW1pdHMgYW4gb3V0cHV0IGV2ZW50IHdpdGggc2VsZWN0ZWQgc3VnZ2VzdGlvbicsICgpID0+IHtcbiAgICAgICAgc3B5T24oY29tcG9uZW50VW5kZXJUZXN0Lm5ld1N1Z2dlc3Rpb24sICdlbWl0Jyk7XG4gICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5hY3RpdmVTdWdnZXN0aW9uID0gJ2RvZ3MnO1xuICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc2VsZWN0U3VnZ2VzdGlvbignZG9ncycpO1xuICAgICAgICBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0Lm5ld1N1Z2dlc3Rpb24uZW1pdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2RvZ3MnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnY2xvc2VzIHRoZSBzdWdnZXN0aW9ucyBvbmNlIG9uZSBoYXMgYmVlbiBzZWxlY3RlZCcsICgpID0+IHtcbiAgICAgICAgc3B5T24oY29tcG9uZW50VW5kZXJUZXN0LCAnY2xvc2VTdWdnZXN0aW9ucycpO1xuICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc2VsZWN0U3VnZ2VzdGlvbignZG9ncycpO1xuICAgICAgICBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0LmNsb3NlU3VnZ2VzdGlvbnMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3BhcnNlU3VnZ2VzdGlvbicsICgpID0+IHtcbiAgICAgIGl0KCdyZW1vdmVzIGFueSBwYXJlbnRoZXNlcyBhbmQgd3JhcHMgYW55IHdvcmRzIHRoYXQgbWF0Y2ggdGhlIHVzZXIgaW5wdXQgd2l0aCA8c3Ryb25nPiB0YWdzJywgKCkgPT4ge1xuICAgICAgICBtb2NrQXBpLmdldFJlc3BvbnNlID0geyBsaXN0OiBbJ3Rlc3QnLCAndGVzdGluZycsICd0ZXN0aW5nIDEyMyddIH07XG4gICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5yYXdGaWVsZC5lbmRQb2ludCA9ICdjb2xsZWN0aW9uL3NlYXJjaCc7XG4gICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zdWdnZXN0aW9uQ2hhbmdlTGlzdGVuZXIoKTtcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24gPSAnY2F0JztcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmZDb250cm9sLnNldFZhbHVlKCdkb2cnKTtcbiAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC5wYXJzZVN1Z2dlc3Rpb24oJ2RvZy0oaHVnZ2luZyknKSkudG9FcXVhbCgnPHN0cm9uZz5kb2c8L3N0cm9uZz4tKGh1Z2dpbmcpJyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdpbnB1dEtleURvd24oKScsICgpID0+IHtcbiAgICAgIGRlc2NyaWJlKCdyZXNwb25kcyB0byB1c2VycyBoaXR0aW5nIHRoZSB0YWIgYnV0dG9uJywgKCkgPT4ge1xuICAgICAgICBpdCgndXNpbmcgZXZlbnQud2hpY2gnLCAoKSA9PiB7XG4gICAgICAgICAgc3B5T24oY29tcG9uZW50VW5kZXJUZXN0LCAnY2xvc2VTdWdnZXN0aW9ucycpO1xuICAgICAgICAgIGxldCBldmU6IGFueSA9IHsgd2hpY2g6IDkgfTtcbiAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuaW5wdXRLZXlEb3duKGV2ZSk7XG4gICAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC5jbG9zZVN1Z2dlc3Rpb25zKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCd1c2luZyBldmVudC5rZXlDb2RlJywgKCkgPT4ge1xuICAgICAgICAgIHNweU9uKGNvbXBvbmVudFVuZGVyVGVzdCwgJ2Nsb3NlU3VnZ2VzdGlvbnMnKTtcbiAgICAgICAgICBsZXQgZXZlOiBhbnkgPSB7IGtleUNvZGU6IDkgfTtcbiAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuaW5wdXRLZXlEb3duKGV2ZSk7XG4gICAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC5jbG9zZVN1Z2dlc3Rpb25zKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCdyZXNwb25kcyB0byB1c2VyIGhpdHRpbmcgdGhlIHVwIGFycm93JywgKCkgPT4ge1xuICAgICAgICBkZXNjcmliZSgndXNpbmcgZXZlbnQud2hpY2gnLCAoKSA9PiB7XG4gICAgICAgICAgaXQoJ1NldHMgYWN0aXZlIHN1Z2dlc3Rpb24gdG8gdGhlIGZpcnN0IHN1Z2dlc3Rpb24gaW4gdGhlIGFycmF5IGlmIG9uZSBoYXNcXCdudCBhbHJlYWR5IGJlZW4gc2VsZWN0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc3VnZ2VzdGlvbnMgPSBbJ3Rlc3QnLCAndGVzdGluZycsICd0ZXN0IDEyMyddO1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24gPSAndGVzJztcbiAgICAgICAgICAgIGxldCBldmU6IGFueSA9IHsgd2hpY2g6IDM4LCBwcmV2ZW50RGVmYXVsdDogamFzbWluZS5jcmVhdGVTcHkoJ3ByZXZlbnREZWZhdWx0JykgfTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5pbnB1dEtleURvd24oZXZlKTtcbiAgICAgICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3QuYWN0aXZlU3VnZ2VzdGlvbikudG9FcXVhbCgndGVzdCcpO1xuICAgICAgICAgICAgZXhwZWN0KGV2ZS5wcmV2ZW50RGVmYXVsdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ1RoZXJlIGFyZSBtb3JlIHN1Z2dlc3Rpb25zIGFib3ZlIHRoZSBjdXJyZW50IHN1Z2dlc3Rpb24gc28gc2VsZWN0IHRoZSBuZXh0JywgKCkgPT4ge1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnN1Z2dlc3Rpb25zID0gWyd0ZXN0JywgJ3Rlc3RpbmcnLCAndGVzdCAxMjMnXTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5hY3RpdmVTdWdnZXN0aW9uID0gJ3Rlc3RpbmcnO1xuICAgICAgICAgICAgbGV0IGV2ZTogYW55ID0geyB3aGljaDogMzgsIHByZXZlbnREZWZhdWx0OiBqYXNtaW5lLmNyZWF0ZVNweSgncHJldmVudERlZmF1bHQnKSB9O1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmlucHV0S2V5RG93bihldmUpO1xuICAgICAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC5hY3RpdmVTdWdnZXN0aW9uKS50b0VxdWFsKCd0ZXN0Jyk7XG4gICAgICAgICAgICBleHBlY3QoZXZlLnByZXZlbnREZWZhdWx0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnVGhlcmUgYXJlIG5vIG1vcmUgc3VnZ2VzdGlvbnMgYWJvdmUgdGhlIGN1cnJlbnQgc3VnZ2VzdGlvbiBzbyBsb29wIGJhY2sgYXJvdW5kIGFuZCBzZWxlY3QgdGhlIGxhc3QnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc3VnZ2VzdGlvbnMgPSBbJ3Rlc3QnLCAndGVzdGluZycsICd0ZXN0IDEyMyddO1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24gPSAndGVzdCc7XG4gICAgICAgICAgICBsZXQgZXZlOiBhbnkgPSB7IHdoaWNoOiAzOCwgcHJldmVudERlZmF1bHQ6IGphc21pbmUuY3JlYXRlU3B5KCdwcmV2ZW50RGVmYXVsdCcpIH07XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuaW5wdXRLZXlEb3duKGV2ZSk7XG4gICAgICAgICAgICBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24pLnRvRXF1YWwoJ3Rlc3QgMTIzJyk7XG4gICAgICAgICAgICBleHBlY3QoZXZlLnByZXZlbnREZWZhdWx0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKCd1c2luZyBldmVudC5rZXlDb2RlJywgKCkgPT4ge1xuICAgICAgICAgIGl0KCdTZXRzIGFjdGl2ZSBzdWdnZXN0aW9uIHRvIHRoZSBmaXJzdCBzdWdnZXN0aW9uIGluIHRoZSBhcnJheSBpZiBvbmUgaGFzXFwnbnQgYWxyZWFkeSBiZWVuIHNlbGVjdGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnN1Z2dlc3Rpb25zID0gWyd0ZXN0JywgJ3Rlc3RpbmcnLCAndGVzdCAxMjMnXTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5hY3RpdmVTdWdnZXN0aW9uID0gJ3Rlcyc7XG4gICAgICAgICAgICBsZXQgZXZlOiBhbnkgPSB7IGtleUNvZGU6IDM4LCBwcmV2ZW50RGVmYXVsdDogamFzbWluZS5jcmVhdGVTcHkoJ3ByZXZlbnREZWZhdWx0JykgfTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5pbnB1dEtleURvd24oZXZlKTtcbiAgICAgICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3QuYWN0aXZlU3VnZ2VzdGlvbikudG9FcXVhbCgndGVzdCcpO1xuICAgICAgICAgICAgZXhwZWN0KGV2ZS5wcmV2ZW50RGVmYXVsdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ1RoZXJlIGFyZSBtb3JlIHN1Z2dlc3Rpb25zIGFib3ZlIHRoZSBjdXJyZW50IHN1Z2dlc3Rpb24gc28gc2VsZWN0IHRoZSBuZXh0JywgKCkgPT4ge1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnN1Z2dlc3Rpb25zID0gWyd0ZXN0JywgJ3Rlc3RpbmcnLCAndGVzdCAxMjMnXTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5hY3RpdmVTdWdnZXN0aW9uID0gJ3Rlc3RpbmcnO1xuICAgICAgICAgICAgbGV0IGV2ZTogYW55ID0geyBrZXlDb2RlOiAzOCwgcHJldmVudERlZmF1bHQ6IGphc21pbmUuY3JlYXRlU3B5KCdwcmV2ZW50RGVmYXVsdCcpIH07XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuaW5wdXRLZXlEb3duKGV2ZSk7XG4gICAgICAgICAgICBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24pLnRvRXF1YWwoJ3Rlc3QnKTtcbiAgICAgICAgICAgIGV4cGVjdChldmUucHJldmVudERlZmF1bHQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdUaGVyZSBhcmUgbm8gbW9yZSBzdWdnZXN0aW9ucyBhYm92ZSB0aGUgY3VycmVudCBzdWdnZXN0aW9uIHNvIGxvb3AgYmFjayBhcm91bmQgYW5kIHNlbGVjdCB0aGUgbGFzdCcsICgpID0+IHtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zdWdnZXN0aW9ucyA9IFsndGVzdCcsICd0ZXN0aW5nJywgJ3Rlc3QgMTIzJ107XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuYWN0aXZlU3VnZ2VzdGlvbiA9ICd0ZXN0JztcbiAgICAgICAgICAgIGxldCBldmU6IGFueSA9IHsga2V5Q29kZTogMzgsIHByZXZlbnREZWZhdWx0OiBqYXNtaW5lLmNyZWF0ZVNweSgncHJldmVudERlZmF1bHQnKSB9O1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmlucHV0S2V5RG93bihldmUpO1xuICAgICAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC5hY3RpdmVTdWdnZXN0aW9uKS50b0VxdWFsKCd0ZXN0IDEyMycpO1xuICAgICAgICAgICAgZXhwZWN0KGV2ZS5wcmV2ZW50RGVmYXVsdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCdyZXNwb25kcyB0byB1c2VyIGhpdHRpbmcgdGhlIGRvd24gYXJyb3cnLCAoKSA9PiB7XG4gICAgICAgIGRlc2NyaWJlKCd1c2luZyBldmVudC53aGljaCcsICgpID0+IHtcbiAgICAgICAgICBpdCgnU2V0cyBhY3RpdmUgc3VnZ2VzdGlvbiB0byB0aGUgc2Vjb25kIHN1Z2dlc3Rpb24gaW4gdGhlIGFycmF5IGlmIG9uZSBoYXNcXCdudCBhbHJlYWR5IGJlZW4gc2VsZWN0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc3VnZ2VzdGlvbnMgPSBbJ3Rlc3QnLCAndGVzdGluZycsICd0ZXN0IDEyMyddO1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24gPSAndGVzJztcbiAgICAgICAgICAgIGxldCBldmU6IGFueSA9IHsgd2hpY2g6IDQwLCBwcmV2ZW50RGVmYXVsdDogamFzbWluZS5jcmVhdGVTcHkoJ3ByZXZlbnREZWZhdWx0JykgfTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5pbnB1dEtleURvd24oZXZlKTtcbiAgICAgICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3QuYWN0aXZlU3VnZ2VzdGlvbikudG9FcXVhbCgndGVzdGluZycpO1xuICAgICAgICAgICAgZXhwZWN0KGV2ZS5wcmV2ZW50RGVmYXVsdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ1RoZXJlIGFyZSBtb3JlIHN1Z2dlc3Rpb25zIGJlbG93IHRoZSBjdXJyZW50IHN1Z2dlc3Rpb24gc28gc2VsZWN0IHRoZSBuZXh0JywgKCkgPT4ge1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnN1Z2dlc3Rpb25zID0gWyd0ZXN0JywgJ3Rlc3RpbmcnLCAndGVzdCAxMjMnXTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5hY3RpdmVTdWdnZXN0aW9uID0gJ3Rlc3RpbmcnO1xuICAgICAgICAgICAgbGV0IGV2ZTogYW55ID0geyB3aGljaDogNDAsIHByZXZlbnREZWZhdWx0OiBqYXNtaW5lLmNyZWF0ZVNweSgncHJldmVudERlZmF1bHQnKSB9O1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmlucHV0S2V5RG93bihldmUpO1xuICAgICAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC5hY3RpdmVTdWdnZXN0aW9uKS50b0VxdWFsKCd0ZXN0IDEyMycpO1xuICAgICAgICAgICAgZXhwZWN0KGV2ZS5wcmV2ZW50RGVmYXVsdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ1RoZXJlIGFyZSBubyBtb3JlIHN1Z2dlc3Rpb25zIGJlbG93IHRoZSBjdXJyZW50IHN1Z2dlc3Rpb24gc28gbG9vcCBiYWNrIGFyb3VuZCBhbmQgc2VsZWN0IHRoZSBmaXJzdCcsICgpID0+IHtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zdWdnZXN0aW9ucyA9IFsndGVzdCcsICd0ZXN0aW5nJywgJ3Rlc3QgMTIzJ107XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuYWN0aXZlU3VnZ2VzdGlvbiA9ICd0ZXN0IDEyMyc7XG4gICAgICAgICAgICBsZXQgZXZlOiBhbnkgPSB7IHdoaWNoOiA0MCwgcHJldmVudERlZmF1bHQ6IGphc21pbmUuY3JlYXRlU3B5KCdwcmV2ZW50RGVmYXVsdCcpIH07XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuaW5wdXRLZXlEb3duKGV2ZSk7XG4gICAgICAgICAgICBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24pLnRvRXF1YWwoJ3Rlc3QnKTtcbiAgICAgICAgICAgIGV4cGVjdChldmUucHJldmVudERlZmF1bHQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3VzaW5nIGV2ZW50LmtleUNvZGUnLCAoKSA9PiB7XG4gICAgICAgICAgaXQoJ1NldHMgYWN0aXZlIHN1Z2dlc3Rpb24gdG8gdGhlIHNlY29uZCBzdWdnZXN0aW9uIGluIHRoZSBhcnJheSBpZiBvbmUgaGFzXFwnbnQgYWxyZWFkeSBiZWVuIHNlbGVjdGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnN1Z2dlc3Rpb25zID0gWyd0ZXN0JywgJ3Rlc3RpbmcnLCAndGVzdCAxMjMnXTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5hY3RpdmVTdWdnZXN0aW9uID0gJ3Rlcyc7XG4gICAgICAgICAgICBsZXQgZXZlOiBhbnkgPSB7IGtleUNvZGU6IDQwLCBwcmV2ZW50RGVmYXVsdDogamFzbWluZS5jcmVhdGVTcHkoJ3ByZXZlbnREZWZhdWx0JykgfTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5pbnB1dEtleURvd24oZXZlKTtcbiAgICAgICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3QuYWN0aXZlU3VnZ2VzdGlvbikudG9FcXVhbCgndGVzdGluZycpO1xuICAgICAgICAgICAgZXhwZWN0KGV2ZS5wcmV2ZW50RGVmYXVsdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ1RoZXJlIGFyZSBtb3JlIHN1Z2dlc3Rpb25zIGJlbG93IHRoZSBjdXJyZW50IHN1Z2dlc3Rpb24gc28gc2VsZWN0IHRoZSBuZXh0JywgKCkgPT4ge1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnN1Z2dlc3Rpb25zID0gWyd0ZXN0JywgJ3Rlc3RpbmcnLCAndGVzdCAxMjMnXTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5hY3RpdmVTdWdnZXN0aW9uID0gJ3Rlc3RpbmcnO1xuICAgICAgICAgICAgbGV0IGV2ZTogYW55ID0geyBrZXlDb2RlOiA0MCwgcHJldmVudERlZmF1bHQ6IGphc21pbmUuY3JlYXRlU3B5KCdwcmV2ZW50RGVmYXVsdCcpIH07XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuaW5wdXRLZXlEb3duKGV2ZSk7XG4gICAgICAgICAgICBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24pLnRvRXF1YWwoJ3Rlc3QgMTIzJyk7XG4gICAgICAgICAgICBleHBlY3QoZXZlLnByZXZlbnREZWZhdWx0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnVGhlcmUgYXJlIG5vIG1vcmUgc3VnZ2VzdGlvbnMgYmVsb3cgdGhlIGN1cnJlbnQgc3VnZ2VzdGlvbiBzbyBsb29wIGJhY2sgYXJvdW5kIGFuZCBzZWxlY3QgdGhlIGZpcnN0JywgKCkgPT4ge1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnN1Z2dlc3Rpb25zID0gWyd0ZXN0JywgJ3Rlc3RpbmcnLCAndGVzdCAxMjMnXTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5hY3RpdmVTdWdnZXN0aW9uID0gJ3Rlc3QgMTIzJztcbiAgICAgICAgICAgIGxldCBldmU6IGFueSA9IHsga2V5Q29kZTogNDAsIHByZXZlbnREZWZhdWx0OiBqYXNtaW5lLmNyZWF0ZVNweSgncHJldmVudERlZmF1bHQnKSB9O1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmlucHV0S2V5RG93bihldmUpO1xuICAgICAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC5hY3RpdmVTdWdnZXN0aW9uKS50b0VxdWFsKCd0ZXN0Jyk7XG4gICAgICAgICAgICBleHBlY3QoZXZlLnByZXZlbnREZWZhdWx0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJ3Jlc3BvbmRzIHRvIHVzZXIgaGl0dGluZyB0aGUgZW50ZXIga2V5JywgKCkgPT4ge1xuICAgICAgICBkZXNjcmliZSgndXNpbmcgZXZlbnQud2hpY2gnLCAoKSA9PiB7XG4gICAgICAgICAgaXQoJ0xvb2tzIGZvciBhbiBhY3RpdmUgY29sbGVjdGlvbiwgaWYgaXQgZmluZHMgb25lIGl0IHNlbGVjdHMgdGhlIHN1Z2dlc3Rpb24gZm9yIHN1Ym1pdCcsICgpID0+IHtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zdWdnZXN0aW9ucyA9IFsndGVzdCcsICd0ZXN0aW5nJywgJ3Rlc3QgMTIzJ107XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuYWN0aXZlU3VnZ2VzdGlvbiA9ICd0ZXN0aW5nJztcbiAgICAgICAgICAgIHNweU9uKGNvbXBvbmVudFVuZGVyVGVzdCwgJ3NlbGVjdFN1Z2dlc3Rpb24nKTtcbiAgICAgICAgICAgIGxldCBldmU6IGFueSA9IHsgd2hpY2g6IDEwLCBwcmV2ZW50RGVmYXVsdDogamFzbWluZS5jcmVhdGVTcHkoJ3ByZXZlbnREZWZhdWx0JykgfTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5pbnB1dEtleURvd24oZXZlKTtcbiAgICAgICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3Quc2VsZWN0U3VnZ2VzdGlvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3Rlc3RpbmcnKTtcbiAgICAgICAgICAgIGV4cGVjdChldmUucHJldmVudERlZmF1bHQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdMb29rcyBmb3IgYW4gYWN0aXZlIGNvbGxlY3Rpb24sIGlmIGl0IGZpbmRzIG9uZSBpdCBzZWxlY3RzIHRoZSBzdWdnZXN0aW9uIGZvciBzdWJtaXQnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc3VnZ2VzdGlvbnMgPSBbJ3Rlc3QnLCAndGVzdGluZycsICd0ZXN0IDEyMyddO1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24gPSAndGVzdGluZyc7XG4gICAgICAgICAgICBzcHlPbihjb21wb25lbnRVbmRlclRlc3QsICdzZWxlY3RTdWdnZXN0aW9uJyk7XG4gICAgICAgICAgICBsZXQgZXZlOiBhbnkgPSB7IHdoaWNoOiAxMywgcHJldmVudERlZmF1bHQ6IGphc21pbmUuY3JlYXRlU3B5KCdwcmV2ZW50RGVmYXVsdCcpIH07XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuaW5wdXRLZXlEb3duKGV2ZSk7XG4gICAgICAgICAgICBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0LnNlbGVjdFN1Z2dlc3Rpb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCd0ZXN0aW5nJyk7XG4gICAgICAgICAgICBleHBlY3QoZXZlLnByZXZlbnREZWZhdWx0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnSWYgbm8gYWN0aXZlIHN1Z2dlc3Rpb24gaXMgY3VycmVudGx5IHNldCwgYXNzdW1lIHVzZXIgd2FudHMgdG8gc2VhcmNoIHdpdGggdGhlIGtleXdvcmQgdGhleSB0eXBlZCcsICgpID0+IHtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zdWdnZXN0aW9ucyA9IFsndGVzdCcsICd0ZXN0aW5nJywgJ3Rlc3QgMTIzJ107XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuYWN0aXZlU3VnZ2VzdGlvbiA9IG51bGw7XG4gICAgICAgICAgICBzcHlPbihjb21wb25lbnRVbmRlclRlc3QubmV3U3VnZ2VzdGlvbiwgJ2VtaXQnKTtcbiAgICAgICAgICAgIHNweU9uKGNvbXBvbmVudFVuZGVyVGVzdCwgJ2Nsb3NlU3VnZ2VzdGlvbnMnKTtcbiAgICAgICAgICAgIGxldCBldmU6IGFueSA9IHsgd2hpY2g6IDEzLCBwcmV2ZW50RGVmYXVsdDogamFzbWluZS5jcmVhdGVTcHkoJ3ByZXZlbnREZWZhdWx0JykgfTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5pbnB1dEtleURvd24oZXZlKTtcbiAgICAgICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3QubmV3U3VnZ2VzdGlvbi5lbWl0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgICAgICBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0LmNsb3NlU3VnZ2VzdGlvbnMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgICAgIGV4cGVjdChldmUucHJldmVudERlZmF1bHQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdJZiBubyBhY3RpdmUgc3VnZ2VzdGlvbiBpcyBjdXJyZW50bHkgc2V0LCBhc3N1bWUgdXNlciB3YW50cyB0byBzZWFyY2ggd2l0aCB0aGUga2V5d29yZCB0aGV5IHR5cGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnN1Z2dlc3Rpb25zID0gWyd0ZXN0JywgJ3Rlc3RpbmcnLCAndGVzdCAxMjMnXTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5hY3RpdmVTdWdnZXN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHNweU9uKGNvbXBvbmVudFVuZGVyVGVzdC5uZXdTdWdnZXN0aW9uLCAnZW1pdCcpO1xuICAgICAgICAgICAgc3B5T24oY29tcG9uZW50VW5kZXJUZXN0LCAnY2xvc2VTdWdnZXN0aW9ucycpO1xuICAgICAgICAgICAgbGV0IGV2ZTogYW55ID0geyB3aGljaDogMTAsIHByZXZlbnREZWZhdWx0OiBqYXNtaW5lLmNyZWF0ZVNweSgncHJldmVudERlZmF1bHQnKSB9O1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmlucHV0S2V5RG93bihldmUpO1xuICAgICAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC5uZXdTdWdnZXN0aW9uLmVtaXQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3QuY2xvc2VTdWdnZXN0aW9ucykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICAgICAgZXhwZWN0KGV2ZS5wcmV2ZW50RGVmYXVsdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKCd1c2luZyBldmVudC5rZXlDb2RlJywgKCkgPT4ge1xuICAgICAgICAgIGl0KCdMb29rcyBmb3IgYW4gYWN0aXZlIGNvbGxlY3Rpb24sIGlmIGl0IGZpbmRzIG9uZSBpdCBzZWxlY3RzIHRoZSBzdWdnZXN0aW9uIGZvciBzdWJtaXQnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc3VnZ2VzdGlvbnMgPSBbJ3Rlc3QnLCAndGVzdGluZycsICd0ZXN0IDEyMyddO1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24gPSAndGVzdGluZyc7XG4gICAgICAgICAgICBzcHlPbihjb21wb25lbnRVbmRlclRlc3QsICdzZWxlY3RTdWdnZXN0aW9uJyk7XG4gICAgICAgICAgICBsZXQgZXZlOiBhbnkgPSB7IGtleUNvZGU6IDEwLCBwcmV2ZW50RGVmYXVsdDogamFzbWluZS5jcmVhdGVTcHkoJ3ByZXZlbnREZWZhdWx0JykgfTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5pbnB1dEtleURvd24oZXZlKTtcbiAgICAgICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3Quc2VsZWN0U3VnZ2VzdGlvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3Rlc3RpbmcnKTtcbiAgICAgICAgICAgIGV4cGVjdChldmUucHJldmVudERlZmF1bHQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdMb29rcyBmb3IgYW4gYWN0aXZlIGNvbGxlY3Rpb24sIGlmIGl0IGZpbmRzIG9uZSBpdCBzZWxlY3RzIHRoZSBzdWdnZXN0aW9uIGZvciBzdWJtaXQnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc3VnZ2VzdGlvbnMgPSBbJ3Rlc3QnLCAndGVzdGluZycsICd0ZXN0IDEyMyddO1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFjdGl2ZVN1Z2dlc3Rpb24gPSAndGVzdGluZyc7XG4gICAgICAgICAgICBzcHlPbihjb21wb25lbnRVbmRlclRlc3QsICdzZWxlY3RTdWdnZXN0aW9uJyk7XG4gICAgICAgICAgICBsZXQgZXZlOiBhbnkgPSB7IGtleUNvZGU6IDEzLCBwcmV2ZW50RGVmYXVsdDogamFzbWluZS5jcmVhdGVTcHkoJ3ByZXZlbnREZWZhdWx0JykgfTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5pbnB1dEtleURvd24oZXZlKTtcbiAgICAgICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3Quc2VsZWN0U3VnZ2VzdGlvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3Rlc3RpbmcnKTtcbiAgICAgICAgICAgIGV4cGVjdChldmUucHJldmVudERlZmF1bHQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdJZiBubyBhY3RpdmUgc3VnZ2VzdGlvbiBpcyBjdXJyZW50bHkgc2V0LCBhc3N1bWUgdXNlciB3YW50cyB0byBzZWFyY2ggd2l0aCB0aGUga2V5d29yZCB0aGV5IHR5cGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnN1Z2dlc3Rpb25zID0gWyd0ZXN0JywgJ3Rlc3RpbmcnLCAndGVzdCAxMjMnXTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5hY3RpdmVTdWdnZXN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHNweU9uKGNvbXBvbmVudFVuZGVyVGVzdC5uZXdTdWdnZXN0aW9uLCAnZW1pdCcpO1xuICAgICAgICAgICAgc3B5T24oY29tcG9uZW50VW5kZXJUZXN0LCAnY2xvc2VTdWdnZXN0aW9ucycpO1xuICAgICAgICAgICAgbGV0IGV2ZTogYW55ID0geyBrZXlDb2RlOiAxMywgcHJldmVudERlZmF1bHQ6IGphc21pbmUuY3JlYXRlU3B5KCdwcmV2ZW50RGVmYXVsdCcpIH07XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuaW5wdXRLZXlEb3duKGV2ZSk7XG4gICAgICAgICAgICBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0Lm5ld1N1Z2dlc3Rpb24uZW1pdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC5jbG9zZVN1Z2dlc3Rpb25zKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgICAgICBleHBlY3QoZXZlLnByZXZlbnREZWZhdWx0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnSWYgbm8gYWN0aXZlIHN1Z2dlc3Rpb24gaXMgY3VycmVudGx5IHNldCwgYXNzdW1lIHVzZXIgd2FudHMgdG8gc2VhcmNoIHdpdGggdGhlIGtleXdvcmQgdGhleSB0eXBlZCcsICgpID0+IHtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zdWdnZXN0aW9ucyA9IFsndGVzdCcsICd0ZXN0aW5nJywgJ3Rlc3QgMTIzJ107XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuYWN0aXZlU3VnZ2VzdGlvbiA9IG51bGw7XG4gICAgICAgICAgICBzcHlPbihjb21wb25lbnRVbmRlclRlc3QubmV3U3VnZ2VzdGlvbiwgJ2VtaXQnKTtcbiAgICAgICAgICAgIHNweU9uKGNvbXBvbmVudFVuZGVyVGVzdCwgJ2Nsb3NlU3VnZ2VzdGlvbnMnKTtcbiAgICAgICAgICAgIGxldCBldmU6IGFueSA9IHsga2V5Q29kZTogMTAsIHByZXZlbnREZWZhdWx0OiBqYXNtaW5lLmNyZWF0ZVNweSgncHJldmVudERlZmF1bHQnKSB9O1xuICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmlucHV0S2V5RG93bihldmUpO1xuICAgICAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC5uZXdTdWdnZXN0aW9uLmVtaXQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3QuY2xvc2VTdWdnZXN0aW9ucykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICAgICAgZXhwZWN0KGV2ZS5wcmV2ZW50RGVmYXVsdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ0RvZXMgbm90aGluZyBpZiB0aGVyZSBhcmUgbm8gc3VnZ2VzdGlvbnMgd2hlbiBoaXR0aW5nIHRoZSBlbnRlciBrZXksIGxldHMgZm9ybSBzdWJtaXQgbmF0aXZlbHknLCAoKSA9PiB7XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc3VnZ2VzdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5hY3RpdmVTdWdnZXN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHNweU9uKGNvbXBvbmVudFVuZGVyVGVzdC5uZXdTdWdnZXN0aW9uLCAnZW1pdCcpO1xuICAgICAgICAgICAgc3B5T24oY29tcG9uZW50VW5kZXJUZXN0LCAnY2xvc2VTdWdnZXN0aW9ucycpO1xuICAgICAgICAgICAgc3B5T24oY29tcG9uZW50VW5kZXJUZXN0LCAnc2VsZWN0U3VnZ2VzdGlvbicpO1xuICAgICAgICAgICAgbGV0IGV2ZTogYW55ID0geyBrZXlDb2RlOiAxMCwgcHJldmVudERlZmF1bHQ6IGphc21pbmUuY3JlYXRlU3B5KCdwcmV2ZW50RGVmYXVsdCcpIH07XG4gICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuaW5wdXRLZXlEb3duKGV2ZSk7XG4gICAgICAgICAgICBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0Lm5ld1N1Z2dlc3Rpb24uZW1pdCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3QuY2xvc2VTdWdnZXN0aW9ucykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3Quc2VsZWN0U3VnZ2VzdGlvbikubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG4iXX0=
