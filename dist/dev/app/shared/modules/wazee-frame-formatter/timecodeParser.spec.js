"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var timecodeFormat_1 = require("./timecodeFormat");
var timecodeParser_1 = require("./timecodeParser");
function main() {
    describe('TimecodeParser', function () {
        var parserUnderTest;
        describe('for 29.97 fps', function () {
            beforeEach(function () {
                parserUnderTest = new timecodeParser_1.TimecodeParser(29.97);
            });
            describe('for frame number 0', function () {
                it('can parse a frame number string', function () {
                    expect(parserUnderTest.asFrameNumber('0', undefined)).toEqual(0);
                });
                it('can parse a seconds string', function () {
                    expect(parserUnderTest.asFrameNumber('0.000', timecodeFormat_1.TimecodeFormat.SECONDS)).toEqual(0);
                });
                it('can parse a nondropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:00:00:00', timecodeFormat_1.TimecodeFormat.NONDROPFRAME)).toEqual(0);
                });
                it('can parse a dropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:00:00;00', timecodeFormat_1.TimecodeFormat.DROPFRAME)).toEqual(0);
                });
                it('can parse a simple time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:00:00:00', timecodeFormat_1.TimecodeFormat.SIMPLE_TIME_CONVERSION)).toEqual(0);
                });
                it('can parse an s;f minimal time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00;00', timecodeFormat_1.TimecodeFormat.MINIMAL_TIME_CONVERSION)).toEqual(0);
                });
                it('can parse an m:s minimal time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:00', timecodeFormat_1.TimecodeFormat.MINIMAL_TIME_CONVERSION)).toEqual(0);
                });
                it('can parse an m:s;f minimal time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:00;00', timecodeFormat_1.TimecodeFormat.MINIMAL_TIME_CONVERSION)).toEqual(0);
                });
                it('can parse an h:m:s minimal time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:00:00', timecodeFormat_1.TimecodeFormat.MINIMAL_TIME_CONVERSION)).toEqual(0);
                });
                it('can parse an h:m:s;f minimal time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:00:00;00', timecodeFormat_1.TimecodeFormat.MINIMAL_TIME_CONVERSION)).toEqual(0);
                });
                it('can parse an h:m:s:f minimal time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:00:00:00', timecodeFormat_1.TimecodeFormat.MINIMAL_TIME_CONVERSION)).toEqual(0);
                });
            });
            describe('for frame number 1800', function () {
                it('can parse a frame number string', function () {
                    expect(parserUnderTest.asFrameNumber('1800', undefined)).toEqual(1800);
                });
                it('can parse a seconds string', function () {
                    expect(parserUnderTest.asFrameNumber('60.067', timecodeFormat_1.TimecodeFormat.SECONDS)).toEqual(1800);
                });
                it('can parse a nondropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:01:00:00', timecodeFormat_1.TimecodeFormat.NONDROPFRAME)).toEqual(1800);
                });
                it('can parse a dropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:01:00;02', timecodeFormat_1.TimecodeFormat.DROPFRAME)).toEqual(1800);
                });
                it('can parse a simple time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:01:00:02', timecodeFormat_1.TimecodeFormat.SIMPLE_TIME_CONVERSION)).toEqual(1800);
                });
                it('can parse an m:s;f minimal time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('01:00;02', timecodeFormat_1.TimecodeFormat.MINIMAL_TIME_CONVERSION)).toEqual(1800);
                });
                it('can parse an h:m:s;f minimal time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:01:00;02', timecodeFormat_1.TimecodeFormat.MINIMAL_TIME_CONVERSION)).toEqual(1800);
                });
                it('can parse an h:m:s:f minimal time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:01:00:02', timecodeFormat_1.TimecodeFormat.MINIMAL_TIME_CONVERSION)).toEqual(1800);
                });
            });
            describe('for frame number 3596', function () {
                it('can parse a nondropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:01:59:26', timecodeFormat_1.TimecodeFormat.NONDROPFRAME)).toEqual(3596);
                });
                it('can parse a dropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:01:59;28', timecodeFormat_1.TimecodeFormat.DROPFRAME)).toEqual(3596);
                });
                it('can parse a simple time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:02:00:00', timecodeFormat_1.TimecodeFormat.SIMPLE_TIME_CONVERSION)).toEqual(3596);
                });
                it('can parse an m;s minimal time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('02:00', timecodeFormat_1.TimecodeFormat.MINIMAL_TIME_CONVERSION)).toEqual(3596);
                });
                it('can parse an m:s;f minimal time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('02:00;00', timecodeFormat_1.TimecodeFormat.MINIMAL_TIME_CONVERSION)).toEqual(3596);
                });
                it('can parse an h:m:s minimal time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:02:00', timecodeFormat_1.TimecodeFormat.MINIMAL_TIME_CONVERSION)).toEqual(3596);
                });
                it('can parse an h:m:s:f minimal time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:02:00:00', timecodeFormat_1.TimecodeFormat.MINIMAL_TIME_CONVERSION)).toEqual(3596);
                });
                it('can parse an h:m:s;f minimal time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:02:00;00', timecodeFormat_1.TimecodeFormat.MINIMAL_TIME_CONVERSION)).toEqual(3596);
                });
            });
            describe('for frame number 18000', function () {
                it('can parse a frame number string', function () {
                    expect(parserUnderTest.asFrameNumber('18000', undefined)).toEqual(18000);
                });
                it('can parse a seconds string', function () {
                    expect(parserUnderTest.asFrameNumber('600.6', timecodeFormat_1.TimecodeFormat.SECONDS)).toEqual(18000);
                });
                it('can parse a nondropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:10:00:00', timecodeFormat_1.TimecodeFormat.NONDROPFRAME)).toEqual(18000);
                });
                it('can parse a dropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:10:00;18', timecodeFormat_1.TimecodeFormat.DROPFRAME)).toEqual(18000);
                });
                it('can parse a simple time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:10:00:18', timecodeFormat_1.TimecodeFormat.SIMPLE_TIME_CONVERSION)).toEqual(18000);
                });
            });
            describe('for frame number 100000', function () {
                it('can parse a frame number string', function () {
                    expect(parserUnderTest.asFrameNumber('100000', undefined)).toEqual(100000);
                });
                it('can parse a seconds string', function () {
                    expect(parserUnderTest.asFrameNumber('3336.667', timecodeFormat_1.TimecodeFormat.SECONDS)).toEqual(100000);
                });
                it('can parse a nondropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:55:33:10', timecodeFormat_1.TimecodeFormat.NONDROPFRAME)).toEqual(100000);
                });
                it('can parse a dropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:55:36;20', timecodeFormat_1.TimecodeFormat.DROPFRAME)).toEqual(100000);
                });
                it('can parse a simple time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:55:36:20', timecodeFormat_1.TimecodeFormat.SIMPLE_TIME_CONVERSION)).toEqual(100000);
                });
            });
            describe('for frame number 111694', function () {
                it('can parse a frame number string', function () {
                    expect(parserUnderTest.asFrameNumber('111694', undefined)).toEqual(111694);
                });
                it('can parse a seconds string', function () {
                    expect(parserUnderTest.asFrameNumber('3726.867', timecodeFormat_1.TimecodeFormat.SECONDS)).toEqual(111694);
                });
                it('can parse a nondropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('01:02:03:04', timecodeFormat_1.TimecodeFormat.NONDROPFRAME)).toEqual(111694);
                });
            });
            describe('for frame number 123456', function () {
                it('can parse a frame number string', function () {
                    expect(parserUnderTest.asFrameNumber('123456', undefined)).toEqual(123456);
                });
                it('can parse a seconds string', function () {
                    expect(parserUnderTest.asFrameNumber('4119.3', timecodeFormat_1.TimecodeFormat.SECONDS)).toEqual(123456);
                });
                it('can parse a nondropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('01:08:35:06', timecodeFormat_1.TimecodeFormat.NONDROPFRAME)).toEqual(123456);
                });
                it('can parse a dropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('01:08:39;10', timecodeFormat_1.TimecodeFormat.DROPFRAME)).toEqual(123456);
                });
                it('can parse a simple time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('01:08:39:09', timecodeFormat_1.TimecodeFormat.SIMPLE_TIME_CONVERSION)).toEqual(123456);
                });
            });
        });
        describe('for 59.94 fps', function () {
            beforeEach(function () {
                parserUnderTest = new timecodeParser_1.TimecodeParser(59.94);
            });
            describe('for frame number 0', function () {
                it('can parse a frame number string', function () {
                    expect(parserUnderTest.asFrameNumber('0', undefined)).toEqual(0);
                });
                it('can parse a seconds string', function () {
                    expect(parserUnderTest.asFrameNumber('0.000', timecodeFormat_1.TimecodeFormat.SECONDS)).toEqual(0);
                });
                it('can parse a nondropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:00:00:00', timecodeFormat_1.TimecodeFormat.NONDROPFRAME)).toEqual(0);
                });
                it('can parse a dropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:00:00;00', timecodeFormat_1.TimecodeFormat.DROPFRAME)).toEqual(0);
                });
                it('can parse a simple time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:00:00:00', timecodeFormat_1.TimecodeFormat.SIMPLE_TIME_CONVERSION)).toEqual(0);
                });
            });
            describe('for frame number 3600', function () {
                it('can parse a dropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:01:00;04', timecodeFormat_1.TimecodeFormat.DROPFRAME)).toEqual(3600);
                });
            });
            describe('for frame number 200000', function () {
                it('can parse a dropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:55:36;40', timecodeFormat_1.TimecodeFormat.DROPFRAME)).toEqual(200000);
                });
            });
        });
        describe('for 23.976 fps', function () {
            beforeEach(function () {
                parserUnderTest = new timecodeParser_1.TimecodeParser(23.976);
            });
            describe('for frame number 0', function () {
                it('can parse a frame number string', function () {
                    expect(parserUnderTest.asFrameNumber('0', undefined)).toEqual(0);
                });
                it('can parse a seconds string', function () {
                    expect(parserUnderTest.asFrameNumber('0.000', timecodeFormat_1.TimecodeFormat.SECONDS)).toEqual(0);
                });
                it('can parse a nondropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:00:00:00', timecodeFormat_1.TimecodeFormat.NONDROPFRAME)).toEqual(0);
                });
                it('can parse a dropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:00:00;00', timecodeFormat_1.TimecodeFormat.DROPFRAME)).toEqual(0);
                });
                it('can parse a simple time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:00:00:00', timecodeFormat_1.TimecodeFormat.SIMPLE_TIME_CONVERSION)).toEqual(0);
                });
            });
            describe('for frame number 1440', function () {
                it('can parse a dropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:01:00;01', timecodeFormat_1.TimecodeFormat.DROPFRAME)).toEqual(1440);
                });
            });
            describe('for frame number 6498', function () {
                it('can parse a nondropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:04:30:18', timecodeFormat_1.TimecodeFormat.NONDROPFRAME)).toEqual(6498);
                });
                it('can parse a dropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:04:30;22', timecodeFormat_1.TimecodeFormat.DROPFRAME)).toEqual(6498);
                });
                it('can parse a simple time conversion timecode', function () {
                    expect(parserUnderTest.asFrameNumber('00:04:31:00', timecodeFormat_1.TimecodeFormat.SIMPLE_TIME_CONVERSION)).toEqual(6498);
                });
            });
            describe('for frame number 100000', function () {
                it('can parse a dropframe timecode', function () {
                    expect(parserUnderTest.asFrameNumber('01:09:29;17', timecodeFormat_1.TimecodeFormat.DROPFRAME)).toEqual(100000);
                });
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
