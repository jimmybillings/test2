"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var player_state_service_1 = require("./player-state.service");
var index_1 = require("../../wazee-frame-formatter/index");
function main() {
    var initialState = function () {
        return {
            ready: false,
            canSupportCustomControls: true,
            playing: false,
            playingMarkers: false,
            playbackSpeed: 1,
            framesPerSecond: 29.97,
            currentFrame: undefined,
            durationFrame: undefined,
            inMarkerFrame: undefined,
            outMarkerFrame: undefined,
            sourceBasedOffset: '00:00:00:00',
            timecodeFormat: index_1.TimecodeFormat.SIMPLE_TIME_CONVERSION,
            timecodeBase: index_1.TimecodeBase.STREAM_BASED,
            volume: 100,
            changeDetectionEnabler: 0
        };
    };
    var frameNumberFor = function (seconds, framesPerSecond) {
        if (framesPerSecond === void 0) { framesPerSecond = 29.97; }
        return new index_1.Frame(framesPerSecond).setFromSeconds(seconds).asFrameNumber();
    };
    describe('Player State Service', function () {
        var serviceUnderTest;
        beforeEach(function () {
            serviceUnderTest = new player_state_service_1.PlayerStateService();
        });
        describe('state getter', function () {
            it('returns an Observable of the current state', function () {
                serviceUnderTest.state.subscribe(function (state) {
                    expect(state).toEqual(initialState());
                });
            });
        });
        describe('snapshot getter', function () {
            it('returns a one-time copy of the current state', function () {
                expect(serviceUnderTest.snapshot).toEqual(initialState());
            });
        });
        describe('updateWith()', function () {
            var updates = [
                { key: 'ready', value: true },
                { key: 'canSupportCustomControls', value: false },
                { key: 'playing', value: true },
                { key: 'playingMarkers', value: true },
                { key: 'playbackSpeed', value: 4 },
                { key: 'framesPerSecond', value: 23.976 },
                { key: 'currentFrame', value: new index_1.Frame(29.97).setFromFrameNumber(20) },
                { key: 'durationFrame', value: new index_1.Frame(29.97).setFromFrameNumber(21) },
                { key: 'inMarkerFrame', value: new index_1.Frame(29.97).setFromFrameNumber(22) },
                { key: 'outMarkerFrame', value: new index_1.Frame(29.97).setFromFrameNumber(23) },
                { key: 'sourceBasedOffset', value: '01:02:03:04' },
                { key: 'sourceBasedOffset', value: undefined, expected: '00:00:00:00' },
                { key: 'timecodeFormat', value: index_1.TimecodeFormat.SECONDS },
                { key: 'timecodeBase', value: index_1.TimecodeBase.SOURCE_BASED },
                { key: 'volume', value: 11 }
            ];
            updates.forEach(function (update) {
                describe("for " + update.key, function () {
                    var updateObject = {};
                    updateObject[update.key] = update.value;
                    var expectedNewState = __assign({}, initialState(), updateObject, { changeDetectionEnabler: 1 });
                    expectedNewState[update.key] = update.expected || update.value;
                    it('updates the current state Observable', function () {
                        serviceUnderTest.updateWith(updateObject);
                        var returnedState;
                        serviceUnderTest.state.subscribe(function (state) { return returnedState = state; });
                        expect(returnedState).toEqual(expectedNewState);
                    });
                    it('updates the snapshot', function () {
                        serviceUnderTest.updateWith(updateObject);
                        expect(serviceUnderTest.snapshot).toEqual(expectedNewState);
                    });
                });
            });
        });
        describe('reset()', function () {
            it('reverts to the initial state', function () {
                serviceUnderTest.updateWith({ playing: true, duration: 1234.123, currentTime: 173.174 });
                serviceUnderTest.reset();
                expect(serviceUnderTest.snapshot).toEqual(initialState());
            });
        });
        describe('Interdependencies', function () {
            describe('Updating with currentTime', function () {
                it('causes currentFrame to be updated', function () {
                    serviceUnderTest.updateWith({ currentTime: 42.43 });
                    expect(serviceUnderTest.snapshot.currentFrame.frameNumber).toBe(frameNumberFor(42.43));
                });
            });
            describe('Updating with duration', function () {
                it('causes durationFrame to be updated', function () {
                    serviceUnderTest.updateWith({ duration: 24.25 });
                    expect(serviceUnderTest.snapshot.durationFrame.frameNumber).toBe(frameNumberFor(24.25));
                });
            });
            describe('Updating with inMarker', function () {
                it('causes inMarkerFrame to be updated', function () {
                    serviceUnderTest.updateWith({ inMarker: 1.23 });
                    expect(serviceUnderTest.snapshot.inMarkerFrame.frameNumber).toBe(frameNumberFor(1.23));
                });
            });
            describe('Updating with outMarker', function () {
                it('causes outMarkerFrame to be updated', function () {
                    serviceUnderTest.updateWith({ outMarker: 4.56 });
                    expect(serviceUnderTest.snapshot.outMarkerFrame.frameNumber).toBe(frameNumberFor(4.56));
                });
                it('moves in marker if new out marker is before old in marker', function () {
                    serviceUnderTest.updateWith({ inMarker: 10 });
                    serviceUnderTest.updateWith({ outMarker: 7 });
                    expect(serviceUnderTest.snapshot.inMarkerFrame.frameNumber).toBe(frameNumberFor(7));
                    expect(serviceUnderTest.snapshot.outMarkerFrame.frameNumber).toBe(frameNumberFor(7));
                });
            });
            describe('Updating with inMarker and outMarker undefined', function () {
                it('causes inMarkerFrame and outMarkerFrame to be cleared', function () {
                    serviceUnderTest.updateWith({ inMarker: 1.23 });
                    serviceUnderTest.updateWith({ outMarker: 4.56 });
                    serviceUnderTest.updateWith({ inMarker: undefined, outMarker: undefined });
                    expect(serviceUnderTest.snapshot.inMarkerFrame).toBeUndefined();
                    expect(serviceUnderTest.snapshot.outMarkerFrame).toBeUndefined();
                });
            });
            describe('Updating with inMarkerFrameNumber', function () {
                it('causes inMarkerFrame to be updated', function () {
                    serviceUnderTest.updateWith({ inMarkerFrameNumber: 6.78 });
                    expect(serviceUnderTest.snapshot.inMarkerFrame.frameNumber).toBe(6.78);
                });
                it('moves out marker if new in marker is after old out marker', function () {
                    serviceUnderTest.updateWith({ outMarker: 15 });
                    serviceUnderTest.updateWith({ inMarker: 20 });
                    expect(serviceUnderTest.snapshot.inMarkerFrame.frameNumber).toBe(frameNumberFor(20));
                    expect(serviceUnderTest.snapshot.outMarkerFrame.frameNumber).toBe(frameNumberFor(20));
                });
            });
            describe('Updating with outMarkerFrameNumber', function () {
                it('causes outMarkerFrame to be updated', function () {
                    serviceUnderTest.updateWith({ outMarkerFrameNumber: 7.89 });
                    expect(serviceUnderTest.snapshot.outMarkerFrame.frameNumber).toBe(7.89);
                });
            });
            describe('Updating both inMarker and outMarker', function () {
                it('sets as expected if markers are in order', function () {
                    serviceUnderTest.updateWith({ inMarker: 2, outMarker: 3 });
                    expect(serviceUnderTest.snapshot.inMarkerFrame.frameNumber).toBe(frameNumberFor(2));
                    expect(serviceUnderTest.snapshot.outMarkerFrame.frameNumber).toBe(frameNumberFor(3));
                });
                it('moves out to in if markers are out of order', function () {
                    serviceUnderTest.updateWith({ inMarker: 5, outMarker: 4 });
                    expect(serviceUnderTest.snapshot.inMarkerFrame.frameNumber).toBe(frameNumberFor(5));
                    expect(serviceUnderTest.snapshot.outMarkerFrame.frameNumber).toBe(frameNumberFor(5));
                });
            });
        });
        describe('Source-based offset', function () {
            it('defaults as expected when not specified', function () {
                serviceUnderTest.updateWith({ currentTime: 42.43 });
                expect(serviceUnderTest.snapshot.currentFrame.sourceBasedOffsetFrames).toBe(0);
            });
            it('is used as expected when specified', function () {
                serviceUnderTest.updateWith({ currentTime: 42.43, sourceBasedOffset: '00:00:01:00' });
                expect(serviceUnderTest.snapshot.currentFrame.sourceBasedOffsetFrames).toBe(30);
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
