"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var wz_player_component_1 = require("./wz.player.component");
var mockJwPlayer_1 = require("../../mocks/mockJwPlayer");
var mockVideoElement_1 = require("../../mocks/mockVideoElement");
var mock_app_store_1 = require("../../../../../store/spec-helpers/mock-app.store");
function main() {
    describe('Wz Player Component', function () {
        var componentUnderTest;
        var stateChangeRequestEmitter;
        var mockElementRef;
        var mockRenderer;
        var mockZone;
        var mockJwPlayer;
        var mockVideoElement;
        var mockStore;
        var expectResetFor = function (assetType) {
            if (assetType === 'video' || assetType === 'html5Video') {
                expect(mockJwPlayer.remove).toHaveBeenCalled();
                if (assetType === 'html5Video') {
                    expect(mockVideoElement.numberOfDefinedEventCallbacks).toBe(0);
                }
                expect(componentUnderTest.stateChangeRequest.emit).not.toHaveBeenCalled();
            }
            expect(mockElementRef.nativeElement.innerHtml).toEqual('');
        };
        beforeEach(function () {
            mockElementRef = { nativeElement: { innerHtml: '', appendChild: jasmine.createSpy('appendChild') } };
            mockRenderer = {
                listen: function (videoElement, eventName, callback) {
                    videoElement.on(eventName, callback);
                    return function () { return videoElement.off(eventName); };
                }
            };
            mockZone = { run: jasmine.createSpy('zone').and.callFake(function (wrappedFunction) { return wrappedFunction(); }) };
            mockStore = new mock_app_store_1.MockAppStore();
            mockStore.createStateElement('uiConfig', 'components', {});
            spyOn(console, 'log');
            componentUnderTest = new wz_player_component_1.WzPlayerComponent(mockElementRef, mockRenderer, mockZone, mockStore);
            componentUnderTest.window = {
                jwplayer: jasmine.createSpy('jwplayer creator').and.returnValue(mockJwPlayer = new mockJwPlayer_1.MockJwPlayer()),
                document: {
                    querySelector: function (selector) {
                        return selector === 'video' ? (mockVideoElement = new mockVideoElement_1.MockVideoElement(mockJwPlayer.autoplay)) : null;
                    }
                }
            };
            componentUnderTest.stateChangeRequest.emit = jasmine.createSpy('stateUpdate emitter');
            stateChangeRequestEmitter = componentUnderTest.stateChangeRequest.emit;
        });
        it('defaults to basic mode', function () {
            expect(componentUnderTest.mode).toEqual('basic');
        });
        describe('For an Image', function () {
            var mockAsset = { resourceClass: 'Image' };
            beforeEach(function () { return componentUnderTest.asset = mockAsset; });
            describe('asset setter', function () {
                it('doesn\'t set up the player', function () {
                    expect(mockJwPlayer.setup).not.toHaveBeenCalled();
                });
                it('resets the asset if an asset was present', function () {
                    componentUnderTest.asset = { resourceClass: 'Image', some: 'otherProperty' };
                    expectResetFor('image');
                });
            });
            describe('asset getter', function () {
                it('returns the asset', function () {
                    expect(componentUnderTest.asset).toEqual(mockAsset);
                });
            });
            describe('ngOnDestroy()', function () {
                it('resets the player', function () {
                    componentUnderTest.ngOnDestroy();
                    expectResetFor('image');
                });
            });
            describe('togglePlayback()', function () {
                it('is not supported', function () {
                    expect(function () { return componentUnderTest.togglePlayback(); }).toThrowError();
                });
            });
            describe('playAtSpeed()', function () {
                it('is not supported', function () {
                    expect(function () { return componentUnderTest.playAtSpeed(2.5); }).toThrowError();
                });
            });
            describe('pause()', function () {
                it('is not supported', function () {
                    expect(function () { return componentUnderTest.pause(); }).toThrowError();
                });
            });
            describe('seekTo()', function () {
                it('is not supported', function () {
                    expect(function () { return componentUnderTest.seekTo(6.867); }).toThrowError();
                });
            });
            describe('seekToInMarker()', function () {
                it('is not supported', function () {
                    expect(function () { return componentUnderTest.seekToInMarker(); }).toThrowError();
                });
            });
            describe('seekToOutMarker()', function () {
                it('is not supported', function () {
                    expect(function () { return componentUnderTest.seekToOutMarker(); }).toThrowError();
                });
            });
            describe('setInMarkerToCurrentTime()', function () {
                it('is not supported', function () {
                    expect(function () { return componentUnderTest.setInMarkerToCurrentTime(); }).toThrowError();
                });
            });
            describe('setOutMarkerToCurrentTime()', function () {
                it('is not supported', function () {
                    expect(function () { return componentUnderTest.setOutMarkerToCurrentTime(); }).toThrowError();
                });
            });
            describe('clearMarkers()', function () {
                it('is not supported', function () {
                    expect(function () { return componentUnderTest.clearMarkers(); }).toThrowError();
                });
            });
            describe('toggleMarkersPlayback()', function () {
                it('is not supported', function () {
                    expect(function () { return componentUnderTest.toggleMarkersPlayback(); }).toThrowError();
                });
            });
            describe('toggleMute()', function () {
                it('is not supported', function () {
                    expect(function () { return componentUnderTest.toggleMute(); }).toThrowError();
                });
            });
            describe('setVolumeTo()', function () {
                it('is not supported', function () {
                    expect(function () { return componentUnderTest.setVolumeTo(11); }).toThrowError();
                });
            });
        });
        describe('For a Video', function () {
            describe('in basic mode', function () {
                beforeEach(function () {
                    componentUnderTest.mode = 'basic';
                    componentUnderTest.asset = {
                        resourceClass: 'NotImage',
                        clipThumbnailUrl: 'clipThumbnailUrl',
                        clipUrl: 'clipUrl',
                        someMetadata: {
                            name: 'Format.FrameRate',
                            value: '30'
                        }
                    };
                });
                it('sets up the player', function () {
                    expect(mockJwPlayer.setup).toHaveBeenCalledWith({
                        image: 'clipThumbnailUrl',
                        file: 'clipUrl',
                        autostart: true,
                        controls: false
                    });
                });
                it('resets the player if it already exists when a new asset is set', function () {
                    componentUnderTest.asset = {
                        resourceClass: 'AnotherNotImage',
                        clipThumbnailUrl: 'anotherClipThumbnailUrl',
                        clipUrl: 'anotherClipUrl',
                        someMetadata: {
                            name: 'Format.FrameRate',
                            value: '30'
                        }
                    };
                    expectResetFor('video');
                });
                describe('ngOnDestroy()', function () {
                    it('resets the player', function () {
                        componentUnderTest.ngOnDestroy();
                        expectResetFor('video');
                    });
                });
                describe('togglePlayback()', function () {
                    it('is not supported', function () {
                        expect(function () { return componentUnderTest.togglePlayback(); }).toThrowError();
                    });
                });
                describe('playAtSpeed()', function () {
                    it('is not supported', function () {
                        expect(function () { return componentUnderTest.playAtSpeed(2.5); }).toThrowError();
                    });
                });
                describe('pause()', function () {
                    it('is not supported', function () {
                        expect(function () { return componentUnderTest.pause(); }).toThrowError();
                    });
                });
                describe('seekTo()', function () {
                    it('is not supported', function () {
                        expect(function () { return componentUnderTest.seekTo(6.867); }).toThrowError();
                    });
                });
                describe('seekToInMarker()', function () {
                    it('is not supported', function () {
                        expect(function () { return componentUnderTest.seekToInMarker(); }).toThrowError();
                    });
                });
                describe('seekToOutMarker()', function () {
                    it('is not supported', function () {
                        expect(function () { return componentUnderTest.seekToOutMarker(); }).toThrowError();
                    });
                });
                describe('setInMarkerToCurrentTime()', function () {
                    it('is not supported', function () {
                        expect(function () { return componentUnderTest.setInMarkerToCurrentTime(); }).toThrowError();
                    });
                });
                describe('setOutMarkerToCurrentTime()', function () {
                    it('is not supported', function () {
                        expect(function () { return componentUnderTest.setOutMarkerToCurrentTime(); }).toThrowError();
                    });
                });
                describe('clearMarkers()', function () {
                    it('is not supported', function () {
                        expect(function () { return componentUnderTest.clearMarkers(); }).toThrowError();
                    });
                });
                describe('toggleMarkersPlayback()', function () {
                    it('is not supported', function () {
                        expect(function () { return componentUnderTest.toggleMarkersPlayback(); }).toThrowError();
                    });
                });
                describe('toggleMute()', function () {
                    it('is not supported', function () {
                        expect(function () { return componentUnderTest.toggleMute(); }).toThrowError();
                    });
                });
                describe('setVolumeTo()', function () {
                    it('is not supported', function () {
                        expect(function () { return componentUnderTest.setVolumeTo(11); }).toThrowError();
                    });
                });
                describe('after \'ready\' event is triggered', function () {
                    beforeEach(function () { return mockJwPlayer.trigger('ready'); });
                    it('uses JW Player\'s controls', function () {
                        expect(mockJwPlayer.getControls()).toBe(true);
                    });
                });
            });
            describe('in advanced mode', function () {
                [
                    {
                        state: 'no markers',
                        markers: {},
                        expectedInSeconds: undefined,
                        expectedOutSeconds: undefined,
                        expectedAutoStart: true
                    },
                    {
                        state: 'only timeStart',
                        markers: { timeStart: '3000' },
                        expectedInSeconds: 3,
                        expectedOutSeconds: undefined,
                        expectedAutoStart: true
                    },
                    {
                        state: 'only timeEnd',
                        markers: { timeEnd: '6000' },
                        expectedInSeconds: undefined,
                        expectedOutSeconds: 6,
                        expectedAutoStart: true
                    },
                    {
                        state: 'timeStart and timeEnd',
                        markers: { timeStart: '3000', timeEnd: '6000' },
                        expectedInSeconds: 3,
                        expectedOutSeconds: 6,
                        expectedAutoStart: false
                    }
                ].forEach(function (assetTest) {
                    describe("when asset has " + assetTest.state, function () {
                        beforeEach(function () {
                            componentUnderTest.mode = 'advanced';
                            componentUnderTest.asset =
                                Object.assign({
                                    resourceClass: 'NotImage',
                                    clipThumbnailUrl: undefined,
                                    clipUrl: 'clipUrl',
                                    someMetadata: {
                                        name: 'Format.FrameRate',
                                        value: '30'
                                    }
                                }, assetTest.markers);
                        });
                        describe('asset setter', function () {
                            it('sets up the player with the expected settings', function () {
                                expect(mockJwPlayer.setup).toHaveBeenCalledWith({
                                    image: null,
                                    file: 'clipUrl',
                                    autostart: assetTest.expectedAutoStart,
                                    controls: false
                                });
                            });
                            it('resets the player if an asset was already present', function () {
                                componentUnderTest.asset = {
                                    resourceClass: 'AnotherNotImage',
                                    clipThumbnailUrl: 'anotherClipThumbnailUrl',
                                    clipUrl: 'anotherClipUrl',
                                    someMetadata: {
                                        name: 'Format.FrameRate',
                                        value: '30'
                                    }
                                };
                                expectResetFor('video');
                            });
                        });
                        describe('with non-HTML5 video', function () {
                            beforeEach(function () { return mockJwPlayer.setProviderNameTo('flash'); });
                            describe('before \'ready\' event is triggered', function () {
                                it('doesn\'t emit a \'canSupportCustomControls\' or \'ready\' state update yet', function () {
                                    expect(stateChangeRequestEmitter)
                                        .not.toHaveBeenCalledWith({ canSupportCustomControls: jasmine.any(Boolean), ready: jasmine.any(Boolean) });
                                });
                            });
                            describe('after \'ready\' event is triggered', function () {
                                beforeEach(function () { return mockJwPlayer.trigger('ready'); });
                                it('uses JW Player\'s controls', function () {
                                    expect(mockJwPlayer.getControls()).toBe(true);
                                });
                                it('reports canSupportCustomControls: false, ready: true', function () {
                                    expect(stateChangeRequestEmitter).toHaveBeenCalledWith({ canSupportCustomControls: false, ready: true });
                                });
                                describe('ngOnDestroy()', function () {
                                    it('resets the player', function () {
                                        componentUnderTest.stateChangeRequest.emit.calls.reset();
                                        componentUnderTest.ngOnDestroy();
                                        expectResetFor('video');
                                    });
                                });
                                describe('togglePlayback()', function () {
                                    it('is not supported', function () {
                                        expect(function () { return componentUnderTest.togglePlayback(); }).toThrowError();
                                    });
                                });
                                describe('playAtSpeed()', function () {
                                    it('is not supported', function () {
                                        expect(function () { return componentUnderTest.playAtSpeed(2.5); }).toThrowError();
                                    });
                                });
                                describe('pause()', function () {
                                    it('is not supported', function () {
                                        expect(function () { return componentUnderTest.pause(); }).toThrowError();
                                    });
                                });
                                describe('seekTo()', function () {
                                    it('is not supported', function () {
                                        expect(function () { return componentUnderTest.seekTo(6.867); }).toThrowError();
                                    });
                                });
                                describe('seekToInMarker()', function () {
                                    it('is not supported', function () {
                                        expect(function () { return componentUnderTest.seekToInMarker(); }).toThrowError();
                                    });
                                });
                                describe('seekToOutMarker()', function () {
                                    it('is not supported', function () {
                                        expect(function () { return componentUnderTest.seekToOutMarker(); }).toThrowError();
                                    });
                                });
                                describe('setInMarkerToCurrentTime()', function () {
                                    it('is not supported', function () {
                                        expect(function () { return componentUnderTest.setInMarkerToCurrentTime(); }).toThrowError();
                                    });
                                });
                                describe('setOutMarkerToCurrentTime()', function () {
                                    it('is not supported', function () {
                                        expect(function () { return componentUnderTest.setOutMarkerToCurrentTime(); }).toThrowError();
                                    });
                                });
                                describe('clearMarkers()', function () {
                                    it('is not supported', function () {
                                        expect(function () { return componentUnderTest.clearMarkers(); }).toThrowError();
                                    });
                                });
                                describe('toggleMarkersPlayback()', function () {
                                    it('is not supported', function () {
                                        expect(function () { return componentUnderTest.toggleMarkersPlayback(); }).toThrowError();
                                    });
                                });
                                describe('toggleMute()', function () {
                                    it('is not supported', function () {
                                        expect(function () { return componentUnderTest.toggleMute(); }).toThrowError();
                                    });
                                });
                                describe('setVolumeTo()', function () {
                                    it('is not supported', function () {
                                        expect(function () { return componentUnderTest.setVolumeTo(11); }).toThrowError();
                                    });
                                });
                            });
                        });
                        describe('with HTML5 video', function () {
                            beforeEach(function () { return mockJwPlayer.setProviderNameTo('html5'); });
                            describe('before \'ready\' event is triggered', function () {
                                it('doesn\'t emit a \'canSupportCustomControls\' or \'ready\' state update yet', function () {
                                    expect(stateChangeRequestEmitter)
                                        .not.toHaveBeenCalledWith({ canSupportCustomControls: jasmine.any(Boolean), ready: jasmine.any(Boolean) });
                                });
                            });
                            describe('after \'ready\' event is triggered', function () {
                                beforeEach(function () { return mockJwPlayer.trigger('ready'); });
                                it('does not use JW Player\'s controls', function () {
                                    expect(mockJwPlayer.getControls()).toBe(false);
                                });
                                it('reports ready: true, canSupportCustomControls: true, framesPerSecond, in/out markers, volume', function () {
                                    expect(stateChangeRequestEmitter).toHaveBeenCalledTimes(1);
                                    expect(stateChangeRequestEmitter.calls.allArgs()).toEqual([[{
                                                ready: true,
                                                canSupportCustomControls: true,
                                                framesPerSecond: 30,
                                                inMarker: assetTest.expectedInSeconds,
                                                outMarker: assetTest.expectedOutSeconds,
                                                volume: 100
                                            }]]);
                                });
                                it('sets the \'oncontextmenu\' property on the videoElement', function () {
                                    expect(mockVideoElement.oncontextmenu).toBeDefined();
                                    expect(mockVideoElement.oncontextmenu()).toBe(false);
                                });
                                describe('after reporting canSupportCustomControls', function () {
                                    beforeEach(function () {
                                        componentUnderTest.stateChangeRequest.emit.calls.reset();
                                        if (assetTest.markers.hasOwnProperty('timeStart') && assetTest.markers.hasOwnProperty('timeEnd')) {
                                            mockVideoElement.simulateSeekCompletion();
                                        }
                                    });
                                    if (assetTest.markers.hasOwnProperty('timeStart') && assetTest.markers.hasOwnProperty('timeEnd')) {
                                        it('reports playingMarkers: true, playing: true, current time', function () {
                                            expect(stateChangeRequestEmitter.calls.allArgs())
                                                .toEqual([
                                                [{ playingMarkers: true }],
                                                [{ playing: true }],
                                                [{ currentTime: assetTest.expectedInSeconds }]
                                            ]);
                                        });
                                    }
                                    describe('after initialization is complete', function () {
                                        if (assetTest.markers.hasOwnProperty('timeStart') && assetTest.markers.hasOwnProperty('timeEnd')) {
                                            beforeEach(function () {
                                                componentUnderTest.seekTo(99);
                                                mockVideoElement.simulateSeekCompletion();
                                                componentUnderTest.stateChangeRequest.emit.calls.reset();
                                            });
                                        }
                                        describe('when \'durationchange\' event is triggered', function () {
                                            beforeEach(function () { return mockVideoElement.simulateDurationChangeTo(234.567); });
                                            it('reports the asset\'s duration', function () {
                                                expect(stateChangeRequestEmitter).toHaveBeenCalledWith({ duration: 234.567 });
                                            });
                                        });
                                        describe('ngOnDestroy()', function () {
                                            it('resets the player', function () {
                                                componentUnderTest.ngOnDestroy();
                                                expectResetFor('html5Video');
                                            });
                                        });
                                        describe('when display is clicked', function () {
                                            describe('when playback was playing', function () {
                                                it('pauses', function () {
                                                    mockJwPlayer.simulateDisplayClick();
                                                    expect(mockVideoElement.paused).toBe(true);
                                                });
                                                it('reports playing: false', function () {
                                                    mockJwPlayer.simulateDisplayClick();
                                                    expect(stateChangeRequestEmitter).toHaveBeenCalledTimes(1);
                                                    expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ playing: false }]);
                                                });
                                            });
                                            describe('when playback was paused', function () {
                                                beforeEach(function () { return componentUnderTest.togglePlayback(); });
                                                it('plays', function () {
                                                    mockJwPlayer.simulateDisplayClick();
                                                    expect(mockVideoElement.paused).toBe(false);
                                                });
                                                it('reports playing: true', function () {
                                                    mockJwPlayer.simulateDisplayClick();
                                                    expect(stateChangeRequestEmitter).toHaveBeenCalledTimes(2);
                                                    expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ playing: true }]);
                                                });
                                            });
                                        });
                                        describe('togglePlayback()', function () {
                                            describe('when playback was playing', function () {
                                                it('pauses', function () {
                                                    componentUnderTest.togglePlayback();
                                                    expect(mockVideoElement.paused).toBe(true);
                                                });
                                                it('reports playing: false', function () {
                                                    componentUnderTest.togglePlayback();
                                                    expect(stateChangeRequestEmitter).toHaveBeenCalledTimes(1);
                                                    expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ playing: false }]);
                                                });
                                            });
                                            describe('when playback was paused', function () {
                                                beforeEach(function () { return componentUnderTest.togglePlayback(); });
                                                it('plays', function () {
                                                    componentUnderTest.togglePlayback();
                                                    expect(mockVideoElement.paused).toBe(false);
                                                });
                                                it('reports playing: true', function () {
                                                    componentUnderTest.togglePlayback();
                                                    expect(stateChangeRequestEmitter).toHaveBeenCalledTimes(2);
                                                    expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ playing: true }]);
                                                });
                                            });
                                            describe('when fast forwarding', function () {
                                                beforeEach(function () {
                                                    componentUnderTest.playAtSpeed(4);
                                                    componentUnderTest.stateChangeRequest.emit.calls.reset();
                                                });
                                                it('pauses', function () {
                                                    componentUnderTest.togglePlayback();
                                                    expect(mockVideoElement.paused).toBe(true);
                                                });
                                                it('reports playbackSpeed: 1 and playing: false', function () {
                                                    componentUnderTest.togglePlayback();
                                                    expect(stateChangeRequestEmitter.calls.allArgs())
                                                        .toEqual([
                                                        [{ playbackSpeed: 1 }],
                                                        [{ playing: false }]
                                                    ]);
                                                });
                                            });
                                        });
                                        describe('playAtSpeed()', function () {
                                            it('does not yet support reverse playback', function () {
                                                expect(function () { return componentUnderTest.playAtSpeed(1, 'reverse'); }).toThrowError();
                                            });
                                            it('reports normal speed when the end of the video is reached', function () {
                                                componentUnderTest.playAtSpeed(4);
                                                mockVideoElement.simulatePlaybackEnded();
                                                expect(stateChangeRequestEmitter.calls.allArgs())
                                                    .toEqual([[{ playbackSpeed: 4 }], [{ playbackSpeed: 1 }], [{ playing: false }]]);
                                            });
                                            describe('when playback was playing', function () {
                                                it('is still playing', function () {
                                                    componentUnderTest.playAtSpeed(4);
                                                    expect(mockVideoElement.paused).toBe(false);
                                                });
                                                it('reports only playbackSpeed: 4 (and not playing: true)', function () {
                                                    componentUnderTest.playAtSpeed(4);
                                                    expect(stateChangeRequestEmitter).toHaveBeenCalledTimes(1);
                                                    expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ playbackSpeed: 4 }]);
                                                });
                                            });
                                            describe('when playback was paused', function () {
                                                beforeEach(function () {
                                                    componentUnderTest.togglePlayback();
                                                    componentUnderTest.stateChangeRequest.emit.calls.reset();
                                                });
                                                it('plays', function () {
                                                    componentUnderTest.playAtSpeed(4);
                                                    expect(mockVideoElement.paused).toBe(false);
                                                });
                                                it('reports playbackSpeed: 4 and playing: true', function () {
                                                    componentUnderTest.playAtSpeed(4);
                                                    expect(stateChangeRequestEmitter.calls.allArgs())
                                                        .toEqual([
                                                        [{ playbackSpeed: 4 }],
                                                        [{ playing: true }]
                                                    ]);
                                                });
                                            });
                                        });
                                        describe('pause()', function () {
                                            describe('when playback was playing', function () {
                                                it('is still playing', function () {
                                                    componentUnderTest.pause();
                                                    expect(mockVideoElement.paused).toBe(true);
                                                });
                                                it('reports playing: false', function () {
                                                    componentUnderTest.pause();
                                                    expect(stateChangeRequestEmitter).toHaveBeenCalledTimes(1);
                                                    expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ playing: false }]);
                                                });
                                            });
                                            describe('when playback was paused', function () {
                                                beforeEach(function () {
                                                    componentUnderTest.togglePlayback();
                                                    componentUnderTest.stateChangeRequest.emit.calls.reset();
                                                });
                                                it('pauses', function () {
                                                    componentUnderTest.pause();
                                                    expect(mockVideoElement.paused).toBe(true);
                                                });
                                                it('reports nothing', function () {
                                                    componentUnderTest.pause();
                                                    expect(stateChangeRequestEmitter).not.toHaveBeenCalled();
                                                });
                                            });
                                        });
                                        describe('toggleMute()', function () {
                                            describe('when not muted', function () {
                                                it('mutes', function () {
                                                    componentUnderTest.toggleMute();
                                                    expect(mockVideoElement.muted).toBe(true);
                                                });
                                                it('reports volume = 0', function () {
                                                    componentUnderTest.toggleMute();
                                                    expect(stateChangeRequestEmitter.calls.allArgs()).toEqual([[{ volume: 0 }]]);
                                                });
                                            });
                                            describe('when muted', function () {
                                                beforeEach(function () {
                                                    mockVideoElement.volume = 0.57;
                                                    componentUnderTest.toggleMute();
                                                    componentUnderTest.stateChangeRequest.emit.calls.reset();
                                                });
                                                it('unmutes', function () {
                                                    componentUnderTest.toggleMute();
                                                    expect(mockVideoElement.muted).toBe(false);
                                                });
                                                it('reports previous volume', function () {
                                                    componentUnderTest.toggleMute();
                                                    expect(stateChangeRequestEmitter.calls.allArgs()).toEqual([[{ volume: 57 }]]);
                                                });
                                            });
                                        });
                                        describe('setVolumeTo()', function () {
                                            describe('when not muted', function () {
                                                it('updates the volume', function () {
                                                    componentUnderTest.setVolumeTo(11);
                                                    expect(mockVideoElement.volume).toBe(0.11);
                                                });
                                                it('reports the new volume', function () {
                                                    componentUnderTest.setVolumeTo(11);
                                                    expect(stateChangeRequestEmitter.calls.allArgs()).toEqual([[{ volume: 11 }]]);
                                                });
                                            });
                                            describe('when muted', function () {
                                                beforeEach(function () {
                                                    mockVideoElement.volume = 0.57;
                                                    componentUnderTest.toggleMute();
                                                    componentUnderTest.stateChangeRequest.emit.calls.reset();
                                                });
                                                it('unmutes', function () {
                                                    componentUnderTest.setVolumeTo(11);
                                                    expect(mockVideoElement.muted).toBe(false);
                                                });
                                                it('updates the volume', function () {
                                                    componentUnderTest.setVolumeTo(11);
                                                    expect(mockVideoElement.volume).toBe(0.11);
                                                });
                                                it('reports the new volume', function () {
                                                    componentUnderTest.setVolumeTo(11);
                                                    expect(stateChangeRequestEmitter.calls.allArgs()).toEqual([[{ volume: 11 }]]);
                                                });
                                            });
                                        });
                                        describe('seekTo()', function () {
                                            it('doesn\'t immediately emit a currentTime status update', function () {
                                                componentUnderTest.seekTo(1234.567);
                                                expect(stateChangeRequestEmitter).not.toHaveBeenCalled();
                                            });
                                            it('reports current time after video element triggers \'seeked\'', function () {
                                                componentUnderTest.seekTo(1234.567);
                                                mockVideoElement.simulateSeekCompletion();
                                                expect(stateChangeRequestEmitter).toHaveBeenCalledTimes(1);
                                                expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ currentTime: 1234.567 }]);
                                            });
                                            it('reports current time immediately when seeking to the current time', function () {
                                                var seekingEventTriggerCount = 0;
                                                mockVideoElement.on('seeking', function () { return seekingEventTriggerCount += 1; });
                                                componentUnderTest.seekTo(1234.567);
                                                expect(seekingEventTriggerCount).toBe(1);
                                                mockVideoElement.simulateSeekCompletion();
                                                componentUnderTest.stateChangeRequest.emit.calls.reset();
                                                componentUnderTest.seekTo(1234.567);
                                                expect(seekingEventTriggerCount).toBe(1);
                                                expect(stateChangeRequestEmitter).toHaveBeenCalledTimes(1);
                                                expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ currentTime: 1234.567 }]);
                                            });
                                            describe('when multiple seeks are requested', function () {
                                                it('performs the first seek, then the final one, ignoring the others', function () {
                                                    componentUnderTest.seekTo(1234.567);
                                                    componentUnderTest.seekTo(2234.567);
                                                    componentUnderTest.seekTo(3234.567);
                                                    componentUnderTest.seekTo(4234.567);
                                                    mockVideoElement.simulateSeekCompletion();
                                                    mockVideoElement.simulateSeekCompletion();
                                                    expect(stateChangeRequestEmitter.calls.allArgs())
                                                        .toEqual([[{ currentTime: 1234.567 }], [{ currentTime: 4234.567 }]]);
                                                });
                                            });
                                            describe('when video has ended', function () {
                                                beforeEach(function () {
                                                    mockVideoElement.simulatePlaybackEnded();
                                                    componentUnderTest.stateChangeRequest.emit.calls.reset();
                                                });
                                                it('"primes the pump" by playing/pausing before seeking', function () {
                                                    componentUnderTest.seekTo(1234.567);
                                                    expect(stateChangeRequestEmitter.calls.allArgs())
                                                        .toEqual([[{ playing: true }], [{ playing: false }]]);
                                                });
                                                it('reports current time after video element triggers \'seeked\'', function () {
                                                    componentUnderTest.seekTo(1234.567);
                                                    mockVideoElement.simulateSeekCompletion();
                                                    expect(stateChangeRequestEmitter.calls.allArgs())
                                                        .toEqual([[{ playing: true }], [{ playing: false }], [{ currentTime: 1234.567 }]]);
                                                });
                                            });
                                        });
                                        describe('seekToInMarker()', function () {
                                            if (assetTest.markers.hasOwnProperty('timeStart')) {
                                                it('reports currentTime updated to in marker', function () {
                                                    componentUnderTest.seekToInMarker();
                                                    mockVideoElement.simulateSeekCompletion();
                                                    expect(stateChangeRequestEmitter).toHaveBeenCalledTimes(1);
                                                    expect(stateChangeRequestEmitter.calls.mostRecent().args)
                                                        .toEqual([{ currentTime: assetTest.expectedInSeconds }]);
                                                });
                                            }
                                            else {
                                                it('throws an error', function () {
                                                    expect(function () { return componentUnderTest.seekToInMarker(); }).toThrowError();
                                                });
                                            }
                                        });
                                        describe('seekToOutMarker()', function () {
                                            if (assetTest.markers.hasOwnProperty('timeEnd')) {
                                                it('reports currentTime updated to out marker', function () {
                                                    componentUnderTest.seekToOutMarker();
                                                    mockVideoElement.simulateSeekCompletion();
                                                    expect(stateChangeRequestEmitter).toHaveBeenCalledTimes(1);
                                                    expect(stateChangeRequestEmitter.calls.mostRecent().args)
                                                        .toEqual([{ currentTime: assetTest.expectedOutSeconds }]);
                                                });
                                            }
                                            else {
                                                it('throws an error', function () {
                                                    expect(function () { return componentUnderTest.seekToOutMarker(); }).toThrowError();
                                                });
                                            }
                                        });
                                        describe('setInMarkerToCurrentTime()', function () {
                                            it('reports inMarker update', function () {
                                                mockVideoElement.simulateTimeChangeTo(0.123);
                                                componentUnderTest.setInMarkerToCurrentTime();
                                                expect(stateChangeRequestEmitter).toHaveBeenCalledTimes(2);
                                                expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ inMarker: 0.123 }]);
                                            });
                                            if (assetTest.markers.hasOwnProperty('timeEnd')) {
                                                describe('if current time is greater than out marker', function () {
                                                    it('moves out marker, and reports inMarker and outMarker updates', function () {
                                                        mockVideoElement.simulateTimeChangeTo(9.876);
                                                        componentUnderTest.setInMarkerToCurrentTime();
                                                        expect(stateChangeRequestEmitter).toHaveBeenCalledTimes(2);
                                                        expect(stateChangeRequestEmitter.calls.mostRecent().args)
                                                            .toEqual([{ inMarker: 9.876, outMarker: 9.876 }]);
                                                    });
                                                });
                                            }
                                        });
                                        describe('setOutMarkerToCurrentTime()', function () {
                                            it('reports outMarker update', function () {
                                                mockVideoElement.simulateTimeChangeTo(5.678);
                                                componentUnderTest.setOutMarkerToCurrentTime();
                                                expect(stateChangeRequestEmitter).toHaveBeenCalledTimes(2);
                                                expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ outMarker: 5.678 }]);
                                            });
                                            if (assetTest.markers.hasOwnProperty('timeStart')) {
                                                describe('if current time is less than in marker', function () {
                                                    it('moves in marker, and reports inMarker and outMarker updates', function () {
                                                        mockVideoElement.simulateTimeChangeTo(0.999);
                                                        componentUnderTest.setOutMarkerToCurrentTime();
                                                        expect(stateChangeRequestEmitter).toHaveBeenCalledTimes(2);
                                                        expect(stateChangeRequestEmitter.calls.mostRecent().args)
                                                            .toEqual([{ inMarker: 0.999, outMarker: 0.999 }]);
                                                    });
                                                });
                                            }
                                        });
                                        describe('clearMarkers()', function () {
                                            it('reports inMarker: undefined, outMarker: undefined', function () {
                                                componentUnderTest.clearMarkers();
                                                expect(stateChangeRequestEmitter).toHaveBeenCalledTimes(1);
                                                expect(stateChangeRequestEmitter.calls.mostRecent().args)
                                                    .toEqual([{ inMarker: undefined, outMarker: undefined }]);
                                            });
                                        });
                                        describe('toggleMarkersPlayback()', function () {
                                            if (!assetTest.markers.hasOwnProperty('timeStart') || !assetTest.markers.hasOwnProperty('timeEnd')) {
                                                it('throws an error', function () {
                                                    expect(function () { return componentUnderTest.toggleMarkersPlayback(); }).toThrowError();
                                                });
                                            }
                                            else {
                                                [{ initialState: 'paused' }, { initialState: 'playing' }].forEach(function (stateTest) {
                                                    describe("when playback was initially " + stateTest.initialState, function () {
                                                        var seekingEventTriggerCount;
                                                        beforeEach(function () {
                                                            seekingEventTriggerCount = 0;
                                                            mockVideoElement.on('seeking', function () { return seekingEventTriggerCount += 1; });
                                                            if (stateTest.initialState === 'paused') {
                                                                componentUnderTest.togglePlayback();
                                                                componentUnderTest.stateChangeRequest.emit.calls.reset();
                                                            }
                                                            componentUnderTest.toggleMarkersPlayback();
                                                        });
                                                        describe('before \'seeked\' event is triggered', function () {
                                                            it('seeks', function () {
                                                                expect(seekingEventTriggerCount).toBe(1);
                                                            });
                                                            it('emits no stateUpdates yet', function () {
                                                                expect(stateChangeRequestEmitter).not.toHaveBeenCalled();
                                                            });
                                                            describe('and toggleMarkersPlayback() is somehow immediately called again', function () {
                                                                beforeEach(function () { return componentUnderTest.toggleMarkersPlayback(); });
                                                                if (stateTest.initialState === 'paused') {
                                                                    it('is still paused', function () {
                                                                        expect(mockVideoElement.paused).toBe(true);
                                                                    });
                                                                }
                                                                else {
                                                                    it('is still playing', function () {
                                                                        expect(mockVideoElement.paused).toBe(false);
                                                                    });
                                                                }
                                                                it('still emits no stateUpdates', function () {
                                                                    expect(stateChangeRequestEmitter).not.toHaveBeenCalled();
                                                                });
                                                                it('doesn\'t seek again', function () {
                                                                    expect(seekingEventTriggerCount).toBe(1);
                                                                });
                                                            });
                                                        });
                                                        describe('after \'seeked\' event is triggered', function () {
                                                            beforeEach(function () { return mockVideoElement.simulateSeekCompletion(); });
                                                            if (stateTest.initialState === 'paused') {
                                                                it('reports playingMarkers: true, playing: true, current time', function () {
                                                                    expect(stateChangeRequestEmitter.calls.allArgs())
                                                                        .toEqual([
                                                                        [{ playingMarkers: true }],
                                                                        [{ playing: true }],
                                                                        [{ currentTime: assetTest.expectedInSeconds }]
                                                                    ]);
                                                                });
                                                            }
                                                            else {
                                                                it('reports playingMarkers: true, current time', function () {
                                                                    expect(stateChangeRequestEmitter.calls.allArgs())
                                                                        .toEqual([
                                                                        [{ playingMarkers: true }],
                                                                        [{ currentTime: assetTest.expectedInSeconds }]
                                                                    ]);
                                                                });
                                                            }
                                                            it('is playing', function () {
                                                                expect(mockVideoElement.paused).toBe(false);
                                                            });
                                                            describe('when a time less than the out marker is reported', function () {
                                                                beforeEach(function () { return mockVideoElement.simulateTimeChangeTo(1.5); });
                                                                it('reports current time', function () {
                                                                    expect(stateChangeRequestEmitter)
                                                                        .toHaveBeenCalledTimes(stateTest.initialState === 'paused' ? 4 : 3);
                                                                    expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ currentTime: 1.5 }]);
                                                                });
                                                                it('is still playing', function () {
                                                                    expect(mockVideoElement.paused).toBe(false);
                                                                });
                                                            });
                                                            describe('when toggleMarkersPlayback() is called before the out marker is reached', function () {
                                                                beforeEach(function () { return componentUnderTest.toggleMarkersPlayback(); });
                                                                it('doesn\'t seek again', function () {
                                                                    expect(seekingEventTriggerCount).toBe(1);
                                                                });
                                                                it('reports playing: false', function () {
                                                                    expect(stateChangeRequestEmitter)
                                                                        .toHaveBeenCalledTimes(stateTest.initialState === 'paused' ? 4 : 3);
                                                                    expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ playing: false }]);
                                                                });
                                                                it('is paused', function () {
                                                                    expect(mockVideoElement.paused).toBe(true);
                                                                });
                                                                describe('and toggleMarkersPlayback() is called again', function () {
                                                                    beforeEach(function () { return componentUnderTest.toggleMarkersPlayback(); });
                                                                    it('doesn\'t seek again', function () {
                                                                        expect(seekingEventTriggerCount).toBe(1);
                                                                    });
                                                                    it('reports playing: true', function () {
                                                                        expect(stateChangeRequestEmitter)
                                                                            .toHaveBeenCalledTimes(stateTest.initialState === 'paused' ? 5 : 4);
                                                                        expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ playing: true }]);
                                                                    });
                                                                    it('is playing', function () {
                                                                        expect(mockVideoElement.paused).toBe(false);
                                                                    });
                                                                });
                                                                describe('and togglePlayback() is called', function () {
                                                                    beforeEach(function () { return componentUnderTest.togglePlayback(); });
                                                                    it('doesn\'t seek again', function () {
                                                                        expect(seekingEventTriggerCount).toBe(1);
                                                                    });
                                                                    it('reports playing: true', function () {
                                                                        expect(stateChangeRequestEmitter)
                                                                            .toHaveBeenCalledTimes(stateTest.initialState === 'paused' ? 5 : 4);
                                                                        expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ playing: true }]);
                                                                    });
                                                                    it('is playing', function () {
                                                                        expect(mockVideoElement.paused).toBe(false);
                                                                    });
                                                                });
                                                            });
                                                            describe('when togglePlayback() is called before the out marker is reached', function () {
                                                                beforeEach(function () { return componentUnderTest.togglePlayback(); });
                                                                it('doesn\'t seek again', function () {
                                                                    expect(seekingEventTriggerCount).toBe(1);
                                                                });
                                                                it('reports playing: false', function () {
                                                                    expect(stateChangeRequestEmitter)
                                                                        .toHaveBeenCalledTimes(stateTest.initialState === 'paused' ? 4 : 3);
                                                                    expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ playing: false }]);
                                                                });
                                                                it('is paused', function () {
                                                                    expect(mockVideoElement.paused).toBe(true);
                                                                });
                                                                describe('and togglePlayback() is called again', function () {
                                                                    beforeEach(function () { return componentUnderTest.togglePlayback(); });
                                                                    it('doesn\'t seek again', function () {
                                                                        expect(seekingEventTriggerCount).toBe(1);
                                                                    });
                                                                    it('reports playing: true', function () {
                                                                        expect(stateChangeRequestEmitter)
                                                                            .toHaveBeenCalledTimes(stateTest.initialState === 'paused' ? 5 : 4);
                                                                        expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ playing: true }]);
                                                                    });
                                                                    it('is playing', function () {
                                                                        expect(mockVideoElement.paused).toBe(false);
                                                                    });
                                                                });
                                                                describe('and toggleMarkersPlayback() is called', function () {
                                                                    beforeEach(function () { return componentUnderTest.toggleMarkersPlayback(); });
                                                                    it('doesn\'t seek again', function () {
                                                                        expect(seekingEventTriggerCount).toBe(1);
                                                                    });
                                                                    it('reports playing: true', function () {
                                                                        expect(stateChangeRequestEmitter)
                                                                            .toHaveBeenCalledTimes(stateTest.initialState === 'paused' ? 5 : 4);
                                                                        expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ playing: true }]);
                                                                    });
                                                                    it('is playing', function () {
                                                                        expect(mockVideoElement.paused).toBe(false);
                                                                    });
                                                                });
                                                            });
                                                            describe('when a seek is requested before the out marker is reached', function () {
                                                                beforeEach(function () { return componentUnderTest.seekTo(123); });
                                                                it('reports playingMarkers: false', function () {
                                                                    expect(stateChangeRequestEmitter)
                                                                        .toHaveBeenCalledTimes(stateTest.initialState === 'paused' ? 4 : 3);
                                                                    expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ playingMarkers: false }]);
                                                                });
                                                                it('is still playing', function () {
                                                                    expect(mockVideoElement.paused).toBe(false);
                                                                });
                                                                describe('and a later time event is somehow reported', function () {
                                                                    beforeEach(function () { return mockVideoElement.simulateTimeChangeTo(6); });
                                                                    it('reports the current time', function () {
                                                                        expect(stateChangeRequestEmitter)
                                                                            .toHaveBeenCalledTimes(stateTest.initialState === 'paused' ? 5 : 4);
                                                                        expect(stateChangeRequestEmitter.calls.mostRecent().args).toEqual([{ currentTime: 6 }]);
                                                                    });
                                                                    it('is still playing', function () {
                                                                        expect(mockVideoElement.paused).toBe(false);
                                                                    });
                                                                });
                                                            });
                                                            describe('when setInMarkerToCurrentTime() is called before the out marker is reached', function () {
                                                                var newTime = assetTest.expectedOutSeconds - 0.3;
                                                                beforeEach(function () {
                                                                    mockVideoElement.simulateTimeChangeTo(newTime);
                                                                    componentUnderTest.setInMarkerToCurrentTime();
                                                                });
                                                                it('reports current time and inMarker update', function () {
                                                                    expect(stateChangeRequestEmitter)
                                                                        .toHaveBeenCalledTimes(stateTest.initialState === 'paused' ? 5 : 4);
                                                                    expect(stateChangeRequestEmitter.calls.allArgs().slice(-2))
                                                                        .toEqual([
                                                                        [{ currentTime: newTime }],
                                                                        [{ inMarker: newTime }]
                                                                    ]);
                                                                });
                                                                it('is still playing', function () {
                                                                    expect(mockVideoElement.paused).toBe(false);
                                                                });
                                                            });
                                                            describe('when setOutMarkerToCurrentTime() is called before the out marker is reached', function () {
                                                                var newTime = assetTest.expectedOutSeconds - 0.2;
                                                                beforeEach(function () {
                                                                    mockVideoElement.simulateTimeChangeTo(newTime);
                                                                    componentUnderTest.setOutMarkerToCurrentTime();
                                                                });
                                                                it('reports current time, playing: false, playingMarkers: false, outMarker update', function () {
                                                                    expect(stateChangeRequestEmitter)
                                                                        .toHaveBeenCalledTimes(stateTest.initialState === 'paused' ? 7 : 6);
                                                                    expect(stateChangeRequestEmitter.calls.allArgs().slice(-4))
                                                                        .toEqual([
                                                                        [{ currentTime: newTime }],
                                                                        [{ playing: false }],
                                                                        [{ playingMarkers: false }],
                                                                        [{ outMarker: newTime }]
                                                                    ]);
                                                                });
                                                                it('is paused', function () {
                                                                    expect(mockVideoElement.paused).toBe(true);
                                                                });
                                                            });
                                                            describe('when clearMarkers() is called before the out marker is reached', function () {
                                                                var newTime = assetTest.expectedOutSeconds - 0.1;
                                                                beforeEach(function () {
                                                                    mockVideoElement.simulateTimeChangeTo(newTime);
                                                                    componentUnderTest.clearMarkers();
                                                                });
                                                                it('reports current time, playingMarkers: false, outMarker update', function () {
                                                                    expect(stateChangeRequestEmitter)
                                                                        .toHaveBeenCalledTimes(stateTest.initialState === 'paused' ? 6 : 5);
                                                                    expect(stateChangeRequestEmitter.calls.allArgs().slice(-3))
                                                                        .toEqual([
                                                                        [{ currentTime: newTime }],
                                                                        [{ playingMarkers: false }],
                                                                        [{ inMarker: undefined, outMarker: undefined }]
                                                                    ]);
                                                                });
                                                                it('is still playing', function () {
                                                                    expect(mockVideoElement.paused).toBe(false);
                                                                });
                                                            });
                                                            [
                                                                { condition: 'equal to', time: assetTest.expectedOutSeconds },
                                                                { condition: 'greater than', time: assetTest.expectedOutSeconds + 0.001 }
                                                            ].forEach(function (innerTest) {
                                                                describe("as soon as a time " + innerTest.condition + " the out marker is reported", function () {
                                                                    beforeEach(function () { return mockVideoElement.simulateTimeChangeTo(innerTest.time); });
                                                                    it('reports current time, playing: false, playingMarkers: false', function () {
                                                                        expect(stateChangeRequestEmitter)
                                                                            .toHaveBeenCalledTimes(stateTest.initialState === 'paused' ? 6 : 5);
                                                                        expect(stateChangeRequestEmitter.calls.allArgs().slice(-3))
                                                                            .toEqual([
                                                                            [{ currentTime: innerTest.time }],
                                                                            [{ playing: false }],
                                                                            [{ playingMarkers: false }]
                                                                        ]);
                                                                    });
                                                                    it('is paused', function () {
                                                                        expect(mockVideoElement.paused).toBe(true);
                                                                    });
                                                                    if (innerTest.condition === 'greater than') {
                                                                        it('seeks back to the out marker', function () {
                                                                            expect(seekingEventTriggerCount).toBe(2);
                                                                        });
                                                                        it('emits no additional stateUpdates', function () {
                                                                            expect(stateChangeRequestEmitter)
                                                                                .toHaveBeenCalledTimes(stateTest.initialState === 'paused' ? 6 : 5);
                                                                        });
                                                                        it('is still paused', function () {
                                                                            expect(mockVideoElement.paused).toBe(true);
                                                                        });
                                                                        describe('after \'seeked\' event is triggered', function () {
                                                                            beforeEach(function () { return mockVideoElement.simulateSeekCompletion(); });
                                                                            it('reports current time', function () {
                                                                                expect(stateChangeRequestEmitter)
                                                                                    .toHaveBeenCalledTimes(stateTest.initialState === 'paused' ? 7 : 6);
                                                                                expect(stateChangeRequestEmitter.calls.mostRecent().args)
                                                                                    .toEqual([{ currentTime: assetTest.expectedOutSeconds }]);
                                                                            });
                                                                            it('is still paused', function () {
                                                                                expect(mockVideoElement.paused).toBe(true);
                                                                            });
                                                                        });
                                                                    }
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            }
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zaGFyZWQvbW9kdWxlcy93ei1wbGF5ZXIvY29tcG9uZW50cy93ei1wbGF5ZXIvd3oucGxheWVyLmNvbXBvbmVudC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsNkRBQTBEO0FBQzFELHlEQUF3RDtBQUN4RCxpRUFBb0Y7QUFDcEYsbUZBQWdGO0FBRWhGO0lBQ0UsUUFBUSxDQUFDLHFCQUFxQixFQUFFO1FBQzlCLElBQUksa0JBQXFDLENBQUM7UUFDMUMsSUFBSSx5QkFBc0MsQ0FBQztRQUMzQyxJQUFJLGNBQW1CLENBQUM7UUFDeEIsSUFBSSxZQUFpQixDQUFDO1FBQ3RCLElBQUksUUFBYSxDQUFDO1FBQ2xCLElBQUksWUFBMEIsQ0FBQztRQUMvQixJQUFJLGdCQUFrQyxDQUFDO1FBQ3ZDLElBQUksU0FBdUIsQ0FBQztRQUU1QixJQUFNLGNBQWMsR0FBRyxVQUFDLFNBQWlCO1lBQ3ZDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsS0FBSyxPQUFPLElBQUksU0FBUyxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUM7Z0JBQ3hELE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztnQkFFL0MsRUFBRSxDQUFDLENBQUMsU0FBUyxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUM7b0JBQy9CLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakUsQ0FBQztnQkFFRCxNQUFNLENBQUMsa0JBQWtCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDNUUsQ0FBQztZQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUM7UUFFRixVQUFVLENBQUM7WUFDVCxjQUFjLEdB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ZW50cy93ei1wbGF5ZXIvd3oucGxheWVyLmNvbXBvbmVudC5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBXelBsYXllckNvbXBvbmVudCB9IGZyb20gJy4vd3oucGxheWVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNb2NrSndQbGF5ZXIgfSBmcm9tICcuLi8uLi9tb2Nrcy9tb2NrSndQbGF5ZXInO1xuaW1wb3J0IHsgTW9ja1ZpZGVvRXZlbnROYW1lLCBNb2NrVmlkZW9FbGVtZW50IH0gZnJvbSAnLi4vLi4vbW9ja3MvbW9ja1ZpZGVvRWxlbWVudCc7XG5pbXBvcnQgeyBNb2NrQXBwU3RvcmUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zdG9yZS9zcGVjLWhlbHBlcnMvbW9jay1hcHAuc3RvcmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFpbigpIHtcbiAgZGVzY3JpYmUoJ1d6IFBsYXllciBDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgbGV0IGNvbXBvbmVudFVuZGVyVGVzdDogV3pQbGF5ZXJDb21wb25lbnQ7XG4gICAgbGV0IHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXI6IGphc21pbmUuU3B5O1xuICAgIGxldCBtb2NrRWxlbWVudFJlZjogYW55O1xuICAgIGxldCBtb2NrUmVuZGVyZXI6IGFueTtcbiAgICBsZXQgbW9ja1pvbmU6IGFueTtcbiAgICBsZXQgbW9ja0p3UGxheWVyOiBNb2NrSndQbGF5ZXI7XG4gICAgbGV0IG1vY2tWaWRlb0VsZW1lbnQ6IE1vY2tWaWRlb0VsZW1lbnQ7XG4gICAgbGV0IG1vY2tTdG9yZTogTW9ja0FwcFN0b3JlO1xuXG4gICAgY29uc3QgZXhwZWN0UmVzZXRGb3IgPSAoYXNzZXRUeXBlOiBzdHJpbmcpID0+IHtcbiAgICAgIGlmIChhc3NldFR5cGUgPT09ICd2aWRlbycgfHwgYXNzZXRUeXBlID09PSAnaHRtbDVWaWRlbycpIHtcbiAgICAgICAgZXhwZWN0KG1vY2tKd1BsYXllci5yZW1vdmUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcblxuICAgICAgICBpZiAoYXNzZXRUeXBlID09PSAnaHRtbDVWaWRlbycpIHtcbiAgICAgICAgICBleHBlY3QobW9ja1ZpZGVvRWxlbWVudC5udW1iZXJPZkRlZmluZWRFdmVudENhbGxiYWNrcykudG9CZSgwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3Quc3RhdGVDaGFuZ2VSZXF1ZXN0LmVtaXQpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICB9XG5cbiAgICAgIGV4cGVjdChtb2NrRWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmlubmVySHRtbCkudG9FcXVhbCgnJyk7XG4gICAgfTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgbW9ja0VsZW1lbnRSZWYgPSB7IG5hdGl2ZUVsZW1lbnQ6IHsgaW5uZXJIdG1sOiAnJywgYXBwZW5kQ2hpbGQ6IGphc21pbmUuY3JlYXRlU3B5KCdhcHBlbmRDaGlsZCcpIH0gfTtcblxuICAgICAgbW9ja1JlbmRlcmVyID0ge1xuICAgICAgICBsaXN0ZW46ICh2aWRlb0VsZW1lbnQ6IE1vY2tWaWRlb0VsZW1lbnQsIGV2ZW50TmFtZTogTW9ja1ZpZGVvRXZlbnROYW1lLCBjYWxsYmFjazogRnVuY3Rpb24pID0+IHtcbiAgICAgICAgICB2aWRlb0VsZW1lbnQub24oZXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgICAgICAgcmV0dXJuICgpID0+IHZpZGVvRWxlbWVudC5vZmYoZXZlbnROYW1lKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgbW9ja1pvbmUgPSB7IHJ1bjogamFzbWluZS5jcmVhdGVTcHkoJ3pvbmUnKS5hbmQuY2FsbEZha2UoKHdyYXBwZWRGdW5jdGlvbjogRnVuY3Rpb24pID0+IHdyYXBwZWRGdW5jdGlvbigpKSB9O1xuXG4gICAgICBtb2NrU3RvcmUgPSBuZXcgTW9ja0FwcFN0b3JlKCk7XG4gICAgICBtb2NrU3RvcmUuY3JlYXRlU3RhdGVFbGVtZW50KCd1aUNvbmZpZycsICdjb21wb25lbnRzJywge30pO1xuXG4gICAgICBzcHlPbihjb25zb2xlLCAnbG9nJyk7ICAvLyBTdXBwcmVzcyB0ZW1wb3JhcnkgY29uc29sZS5sb2cgbWVzc2FnZXMgaW4gdGVzdCBvdXRwdXQuXG5cbiAgICAgIGNvbXBvbmVudFVuZGVyVGVzdCA9IG5ldyBXelBsYXllckNvbXBvbmVudChtb2NrRWxlbWVudFJlZiwgbW9ja1JlbmRlcmVyLCBtb2NrWm9uZSwgbW9ja1N0b3JlKTtcblxuICAgICAgY29tcG9uZW50VW5kZXJUZXN0LndpbmRvdyA9IHtcbiAgICAgICAgandwbGF5ZXI6IGphc21pbmUuY3JlYXRlU3B5KCdqd3BsYXllciBjcmVhdG9yJykuYW5kLnJldHVyblZhbHVlKG1vY2tKd1BsYXllciA9IG5ldyBNb2NrSndQbGF5ZXIoKSksXG4gICAgICAgIGRvY3VtZW50OiB7XG4gICAgICAgICAgcXVlcnlTZWxlY3RvcjogKHNlbGVjdG9yOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3RvciA9PT0gJ3ZpZGVvJyA/IChtb2NrVmlkZW9FbGVtZW50ID0gbmV3IE1vY2tWaWRlb0VsZW1lbnQobW9ja0p3UGxheWVyLmF1dG9wbGF5KSkgOiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnN0YXRlQ2hhbmdlUmVxdWVzdC5lbWl0ID0gamFzbWluZS5jcmVhdGVTcHkoJ3N0YXRlVXBkYXRlIGVtaXR0ZXInKTtcblxuICAgICAgc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlciA9IGNvbXBvbmVudFVuZGVyVGVzdC5zdGF0ZUNoYW5nZVJlcXVlc3QuZW1pdCBhcyBqYXNtaW5lLlNweTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWZhdWx0cyB0byBiYXNpYyBtb2RlJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC5tb2RlKS50b0VxdWFsKCdiYXNpYycpO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ0ZvciBhbiBJbWFnZScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tBc3NldCA9IHsgcmVzb3VyY2VDbGFzczogJ0ltYWdlJyB9O1xuXG4gICAgICBiZWZvcmVFYWNoKCgpID0+IGNvbXBvbmVudFVuZGVyVGVzdC5hc3NldCA9IG1vY2tBc3NldCk7XG5cbiAgICAgIGRlc2NyaWJlKCdhc3NldCBzZXR0ZXInLCAoKSA9PiB7XG4gICAgICAgIGl0KCdkb2VzblxcJ3Qgc2V0IHVwIHRoZSBwbGF5ZXInLCAoKSA9PiB7XG4gICAgICAgICAgZXhwZWN0KG1vY2tKd1BsYXllci5zZXR1cCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Jlc2V0cyB0aGUgYXNzZXQgaWYgYW4gYXNzZXQgd2FzIHByZXNlbnQnLCAoKSA9PiB7XG4gICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFzc2V0ID0geyByZXNvdXJjZUNsYXNzOiAnSW1hZ2UnLCBzb21lOiAnb3RoZXJQcm9wZXJ0eScgfTtcblxuICAgICAgICAgIGV4cGVjdFJlc2V0Rm9yKCdpbWFnZScpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBkZXNjcmliZSgnYXNzZXQgZ2V0dGVyJywgKCkgPT4ge1xuICAgICAgICBpdCgncmV0dXJucyB0aGUgYXNzZXQnLCAoKSA9PiB7XG4gICAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC5hc3NldCkudG9FcXVhbChtb2NrQXNzZXQpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBkZXNjcmliZSgnbmdPbkRlc3Ryb3koKScsICgpID0+IHtcbiAgICAgICAgaXQoJ3Jlc2V0cyB0aGUgcGxheWVyJywgKCkgPT4ge1xuICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5uZ09uRGVzdHJveSgpO1xuXG4gICAgICAgICAgZXhwZWN0UmVzZXRGb3IoJ2ltYWdlJyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCd0b2dnbGVQbGF5YmFjaygpJywgKCkgPT4ge1xuICAgICAgICBpdCgnaXMgbm90IHN1cHBvcnRlZCcsICgpID0+IHtcbiAgICAgICAgICBleHBlY3QoKCkgPT4gY29tcG9uZW50VW5kZXJUZXN0LnRvZ2dsZVBsYXliYWNrKCkpLnRvVGhyb3dFcnJvcigpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBkZXNjcmliZSgncGxheUF0U3BlZWQoKScsICgpID0+IHtcbiAgICAgICAgaXQoJ2lzIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgZXhwZWN0KCgpID0+IGNvbXBvbmVudFVuZGVyVGVzdC5wbGF5QXRTcGVlZCgyLjUpKS50b1Rocm93RXJyb3IoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJ3BhdXNlKCknLCAoKSA9PiB7XG4gICAgICAgIGl0KCdpcyBub3Qgc3VwcG9ydGVkJywgKCkgPT4ge1xuICAgICAgICAgIGV4cGVjdCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3QucGF1c2UoKSkudG9UaHJvd0Vycm9yKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCdzZWVrVG8oKScsICgpID0+IHtcbiAgICAgICAgaXQoJ2lzIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgZXhwZWN0KCgpID0+IGNvbXBvbmVudFVuZGVyVGVzdC5zZWVrVG8oNi44NjcpKS50b1Rocm93RXJyb3IoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJ3NlZWtUb0luTWFya2VyKCknLCAoKSA9PiB7XG4gICAgICAgIGl0KCdpcyBub3Qgc3VwcG9ydGVkJywgKCkgPT4ge1xuICAgICAgICAgIGV4cGVjdCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3Quc2Vla1RvSW5NYXJrZXIoKSkudG9UaHJvd0Vycm9yKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCdzZWVrVG9PdXRNYXJrZXIoKScsICgpID0+IHtcbiAgICAgICAgaXQoJ2lzIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgZXhwZWN0KCgpID0+IGNvbXBvbmVudFVuZGVyVGVzdC5zZWVrVG9PdXRNYXJrZXIoKSkudG9UaHJvd0Vycm9yKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCdzZXRJbk1hcmtlclRvQ3VycmVudFRpbWUoKScsICgpID0+IHtcbiAgICAgICAgaXQoJ2lzIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgZXhwZWN0KCgpID0+IGNvbXBvbmVudFVuZGVyVGVzdC5zZXRJbk1hcmtlclRvQ3VycmVudFRpbWUoKSkudG9UaHJvd0Vycm9yKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCdzZXRPdXRNYXJrZXJUb0N1cnJlbnRUaW1lKCknLCAoKSA9PiB7XG4gICAgICAgIGl0KCdpcyBub3Qgc3VwcG9ydGVkJywgKCkgPT4ge1xuICAgICAgICAgIGV4cGVjdCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3Quc2V0T3V0TWFya2VyVG9DdXJyZW50VGltZSgpKS50b1Rocm93RXJyb3IoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJ2NsZWFyTWFya2VycygpJywgKCkgPT4ge1xuICAgICAgICBpdCgnaXMgbm90IHN1cHBvcnRlZCcsICgpID0+IHtcbiAgICAgICAgICBleHBlY3QoKCkgPT4gY29tcG9uZW50VW5kZXJUZXN0LmNsZWFyTWFya2VycygpKS50b1Rocm93RXJyb3IoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJ3RvZ2dsZU1hcmtlcnNQbGF5YmFjaygpJywgKCkgPT4ge1xuICAgICAgICBpdCgnaXMgbm90IHN1cHBvcnRlZCcsICgpID0+IHtcbiAgICAgICAgICBleHBlY3QoKCkgPT4gY29tcG9uZW50VW5kZXJUZXN0LnRvZ2dsZU1hcmtlcnNQbGF5YmFjaygpKS50b1Rocm93RXJyb3IoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJ3RvZ2dsZU11dGUoKScsICgpID0+IHtcbiAgICAgICAgaXQoJ2lzIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgZXhwZWN0KCgpID0+IGNvbXBvbmVudFVuZGVyVGVzdC50b2dnbGVNdXRlKCkpLnRvVGhyb3dFcnJvcigpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBkZXNjcmliZSgnc2V0Vm9sdW1lVG8oKScsICgpID0+IHtcbiAgICAgICAgaXQoJ2lzIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgZXhwZWN0KCgpID0+IGNvbXBvbmVudFVuZGVyVGVzdC5zZXRWb2x1bWVUbygxMSkpLnRvVGhyb3dFcnJvcigpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ0ZvciBhIFZpZGVvJywgKCkgPT4ge1xuICAgICAgLy8gVGVzdCB3aGVyZSB0aGlzLm1vZGUgPT09ICdiYXNpYydcbiAgICAgIGRlc2NyaWJlKCdpbiBiYXNpYyBtb2RlJywgKCkgPT4ge1xuICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QubW9kZSA9ICdiYXNpYyc7XG4gICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFzc2V0ID0ge1xuICAgICAgICAgICAgcmVzb3VyY2VDbGFzczogJ05vdEltYWdlJyxcbiAgICAgICAgICAgIGNsaXBUaHVtYm5haWxVcmw6ICdjbGlwVGh1bWJuYWlsVXJsJyxcbiAgICAgICAgICAgIGNsaXBVcmw6ICdjbGlwVXJsJyxcbiAgICAgICAgICAgIHNvbWVNZXRhZGF0YToge1xuICAgICAgICAgICAgICBuYW1lOiAnRm9ybWF0LkZyYW1lUmF0ZScsXG4gICAgICAgICAgICAgIHZhbHVlOiAnMzAnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3NldHMgdXAgdGhlIHBsYXllcicsICgpID0+IHtcbiAgICAgICAgICBleHBlY3QobW9ja0p3UGxheWVyLnNldHVwKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgICAgICBpbWFnZTogJ2NsaXBUaHVtYm5haWxVcmwnLFxuICAgICAgICAgICAgZmlsZTogJ2NsaXBVcmwnLFxuICAgICAgICAgICAgYXV0b3N0YXJ0OiB0cnVlLFxuICAgICAgICAgICAgY29udHJvbHM6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdyZXNldHMgdGhlIHBsYXllciBpZiBpdCBhbHJlYWR5IGV4aXN0cyB3aGVuIGEgbmV3IGFzc2V0IGlzIHNldCcsICgpID0+IHtcbiAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuYXNzZXQgPSB7XG4gICAgICAgICAgICByZXNvdXJjZUNsYXNzOiAnQW5vdGhlck5vdEltYWdlJyxcbiAgICAgICAgICAgIGNsaXBUaHVtYm5haWxVcmw6ICdhbm90aGVyQ2xpcFRodW1ibmFpbFVybCcsXG4gICAgICAgICAgICBjbGlwVXJsOiAnYW5vdGhlckNsaXBVcmwnLFxuICAgICAgICAgICAgc29tZU1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgIG5hbWU6ICdGb3JtYXQuRnJhbWVSYXRlJyxcbiAgICAgICAgICAgICAgdmFsdWU6ICczMCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgZXhwZWN0UmVzZXRGb3IoJ3ZpZGVvJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKCduZ09uRGVzdHJveSgpJywgKCkgPT4ge1xuICAgICAgICAgIGl0KCdyZXNldHMgdGhlIHBsYXllcicsICgpID0+IHtcbiAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5uZ09uRGVzdHJveSgpO1xuXG4gICAgICAgICAgICBleHBlY3RSZXNldEZvcigndmlkZW8nKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3RvZ2dsZVBsYXliYWNrKCknLCAoKSA9PiB7XG4gICAgICAgICAgaXQoJ2lzIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICBleHBlY3QoKCkgPT4gY29tcG9uZW50VW5kZXJUZXN0LnRvZ2dsZVBsYXliYWNrKCkpLnRvVGhyb3dFcnJvcigpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgncGxheUF0U3BlZWQoKScsICgpID0+IHtcbiAgICAgICAgICBpdCgnaXMgbm90IHN1cHBvcnRlZCcsICgpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3QucGxheUF0U3BlZWQoMi41KSkudG9UaHJvd0Vycm9yKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKCdwYXVzZSgpJywgKCkgPT4ge1xuICAgICAgICAgIGl0KCdpcyBub3Qgc3VwcG9ydGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KCgpID0+IGNvbXBvbmVudFVuZGVyVGVzdC5wYXVzZSgpKS50b1Rocm93RXJyb3IoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3NlZWtUbygpJywgKCkgPT4ge1xuICAgICAgICAgIGl0KCdpcyBub3Qgc3VwcG9ydGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KCgpID0+IGNvbXBvbmVudFVuZGVyVGVzdC5zZWVrVG8oNi44NjcpKS50b1Rocm93RXJyb3IoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3NlZWtUb0luTWFya2VyKCknLCAoKSA9PiB7XG4gICAgICAgICAgaXQoJ2lzIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICBleHBlY3QoKCkgPT4gY29tcG9uZW50VW5kZXJUZXN0LnNlZWtUb0luTWFya2VyKCkpLnRvVGhyb3dFcnJvcigpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgnc2Vla1RvT3V0TWFya2VyKCknLCAoKSA9PiB7XG4gICAgICAgICAgaXQoJ2lzIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICBleHBlY3QoKCkgPT4gY29tcG9uZW50VW5kZXJUZXN0LnNlZWtUb091dE1hcmtlcigpKS50b1Rocm93RXJyb3IoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3NldEluTWFya2VyVG9DdXJyZW50VGltZSgpJywgKCkgPT4ge1xuICAgICAgICAgIGl0KCdpcyBub3Qgc3VwcG9ydGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KCgpID0+IGNvbXBvbmVudFVuZGVyVGVzdC5zZXRJbk1hcmtlclRvQ3VycmVudFRpbWUoKSkudG9UaHJvd0Vycm9yKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKCdzZXRPdXRNYXJrZXJUb0N1cnJlbnRUaW1lKCknLCAoKSA9PiB7XG4gICAgICAgICAgaXQoJ2lzIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICBleHBlY3QoKCkgPT4gY29tcG9uZW50VW5kZXJUZXN0LnNldE91dE1hcmtlclRvQ3VycmVudFRpbWUoKSkudG9UaHJvd0Vycm9yKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKCdjbGVhck1hcmtlcnMoKScsICgpID0+IHtcbiAgICAgICAgICBpdCgnaXMgbm90IHN1cHBvcnRlZCcsICgpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3QuY2xlYXJNYXJrZXJzKCkpLnRvVGhyb3dFcnJvcigpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgndG9nZ2xlTWFya2Vyc1BsYXliYWNrKCknLCAoKSA9PiB7XG4gICAgICAgICAgaXQoJ2lzIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICBleHBlY3QoKCkgPT4gY29tcG9uZW50VW5kZXJUZXN0LnRvZ2dsZU1hcmtlcnNQbGF5YmFjaygpKS50b1Rocm93RXJyb3IoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3RvZ2dsZU11dGUoKScsICgpID0+IHtcbiAgICAgICAgICBpdCgnaXMgbm90IHN1cHBvcnRlZCcsICgpID0+IHtcbiAgICAgICAgICAgIGV4cGVjdCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3QudG9nZ2xlTXV0ZSgpKS50b1Rocm93RXJyb3IoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3NldFZvbHVtZVRvKCknLCAoKSA9PiB7XG4gICAgICAgICAgaXQoJ2lzIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICBleHBlY3QoKCkgPT4gY29tcG9uZW50VW5kZXJUZXN0LnNldFZvbHVtZVRvKDExKSkudG9UaHJvd0Vycm9yKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKCdhZnRlciBcXCdyZWFkeVxcJyBldmVudCBpcyB0cmlnZ2VyZWQnLCAoKSA9PiB7XG4gICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiBtb2NrSndQbGF5ZXIudHJpZ2dlcigncmVhZHknKSk7XG5cbiAgICAgICAgICBpdCgndXNlcyBKVyBQbGF5ZXJcXCdzIGNvbnRyb2xzJywgKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KG1vY2tKd1BsYXllci5nZXRDb250cm9scygpKS50b0JlKHRydWUpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCdpbiBhZHZhbmNlZCBtb2RlJywgKCkgPT4ge1xuICAgICAgICBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhdGU6ICdubyBtYXJrZXJzJyxcbiAgICAgICAgICAgIG1hcmtlcnM6IHt9LFxuICAgICAgICAgICAgZXhwZWN0ZWRJblNlY29uZHM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGV4cGVjdGVkT3V0U2Vjb25kczogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZXhwZWN0ZWRBdXRvU3RhcnQ6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRlOiAnb25seSB0aW1lU3RhcnQnLFxuICAgICAgICAgICAgbWFya2VyczogeyB0aW1lU3RhcnQ6ICczMDAwJyB9LFxuICAgICAgICAgICAgZXhwZWN0ZWRJblNlY29uZHM6IDMsXG4gICAgICAgICAgICBleHBlY3RlZE91dFNlY29uZHM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGV4cGVjdGVkQXV0b1N0YXJ0OiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0ZTogJ29ubHkgdGltZUVuZCcsXG4gICAgICAgICAgICBtYXJrZXJzOiB7IHRpbWVFbmQ6ICc2MDAwJyB9LFxuICAgICAgICAgICAgZXhwZWN0ZWRJblNlY29uZHM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGV4cGVjdGVkT3V0U2Vjb25kczogNixcbiAgICAgICAgICAgIGV4cGVjdGVkQXV0b1N0YXJ0OiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0ZTogJ3RpbWVTdGFydCBhbmQgdGltZUVuZCcsXG4gICAgICAgICAgICBtYXJrZXJzOiB7IHRpbWVTdGFydDogJzMwMDAnLCB0aW1lRW5kOiAnNjAwMCcgfSxcbiAgICAgICAgICAgIGV4cGVjdGVkSW5TZWNvbmRzOiAzLFxuICAgICAgICAgICAgZXhwZWN0ZWRPdXRTZWNvbmRzOiA2LFxuICAgICAgICAgICAgZXhwZWN0ZWRBdXRvU3RhcnQ6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICBdLmZvckVhY2goYXNzZXRUZXN0ID0+IHtcbiAgICAgICAgICBkZXNjcmliZShgd2hlbiBhc3NldCBoYXMgJHthc3NldFRlc3Quc3RhdGV9YCwgKCkgPT4ge1xuICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5tb2RlID0gJ2FkdmFuY2VkJztcbiAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFzc2V0ID1cbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgICAgICAgIHJlc291cmNlQ2xhc3M6ICdOb3RJbWFnZScsXG4gICAgICAgICAgICAgICAgICBjbGlwVGh1bWJuYWlsVXJsOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICBjbGlwVXJsOiAnY2xpcFVybCcsXG4gICAgICAgICAgICAgICAgICBzb21lTWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0Zvcm1hdC5GcmFtZVJhdGUnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJzMwJ1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGFzc2V0VGVzdC5tYXJrZXJzKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBkZXNjcmliZSgnYXNzZXQgc2V0dGVyJywgKCkgPT4ge1xuICAgICAgICAgICAgICBpdCgnc2V0cyB1cCB0aGUgcGxheWVyIHdpdGggdGhlIGV4cGVjdGVkIHNldHRpbmdzJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrSndQbGF5ZXIuc2V0dXApLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgICAgICAgICAgIGltYWdlOiBudWxsLFxuICAgICAgICAgICAgICAgICAgZmlsZTogJ2NsaXBVcmwnLFxuICAgICAgICAgICAgICAgICAgYXV0b3N0YXJ0OiBhc3NldFRlc3QuZXhwZWN0ZWRBdXRvU3RhcnQsXG4gICAgICAgICAgICAgICAgICBjb250cm9sczogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgaXQoJ3Jlc2V0cyB0aGUgcGxheWVyIGlmIGFuIGFzc2V0IHdhcyBhbHJlYWR5IHByZXNlbnQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmFzc2V0ID0ge1xuICAgICAgICAgICAgICAgICAgcmVzb3VyY2VDbGFzczogJ0Fub3RoZXJOb3RJbWFnZScsXG4gICAgICAgICAgICAgICAgICBjbGlwVGh1bWJuYWlsVXJsOiAnYW5vdGhlckNsaXBUaHVtYm5haWxVcmwnLFxuICAgICAgICAgICAgICAgICAgY2xpcFVybDogJ2Fub3RoZXJDbGlwVXJsJyxcbiAgICAgICAgICAgICAgICAgIHNvbWVNZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnRm9ybWF0LkZyYW1lUmF0ZScsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnMzAnXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGV4cGVjdFJlc2V0Rm9yKCd2aWRlbycpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBkZXNjcmliZSgnd2l0aCBub24tSFRNTDUgdmlkZW8nLCAoKSA9PiB7XG4gICAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4gbW9ja0p3UGxheWVyLnNldFByb3ZpZGVyTmFtZVRvKCdmbGFzaCcpKTtcblxuICAgICAgICAgICAgICBkZXNjcmliZSgnYmVmb3JlIFxcJ3JlYWR5XFwnIGV2ZW50IGlzIHRyaWdnZXJlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpdCgnZG9lc25cXCd0IGVtaXQgYSBcXCdjYW5TdXBwb3J0Q3VzdG9tQ29udHJvbHNcXCcgb3IgXFwncmVhZHlcXCcgc3RhdGUgdXBkYXRlIHlldCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyKVxuICAgICAgICAgICAgICAgICAgICAubm90LnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHsgY2FuU3VwcG9ydEN1c3RvbUNvbnRyb2xzOiBqYXNtaW5lLmFueShCb29sZWFuKSwgcmVhZHk6IGphc21pbmUuYW55KEJvb2xlYW4pIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBkZXNjcmliZSgnYWZ0ZXIgXFwncmVhZHlcXCcgZXZlbnQgaXMgdHJpZ2dlcmVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4gbW9ja0p3UGxheWVyLnRyaWdnZXIoJ3JlYWR5JykpO1xuXG4gICAgICAgICAgICAgICAgaXQoJ3VzZXMgSlcgUGxheWVyXFwncyBjb250cm9scycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrSndQbGF5ZXIuZ2V0Q29udHJvbHMoKSkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGl0KCdyZXBvcnRzIGNhblN1cHBvcnRDdXN0b21Db250cm9sczogZmFsc2UsIHJlYWR5OiB0cnVlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHsgY2FuU3VwcG9ydEN1c3RvbUNvbnRyb2xzOiBmYWxzZSwgcmVhZHk6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBkZXNjcmliZSgnbmdPbkRlc3Ryb3koKScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGl0KCdyZXNldHMgdGhlIHBsYXllcicsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3Qgd2FudCBpbml0aWFsaXphdGlvbiBjYWxscyB0byBhZmZlY3QgZnV0dXJlIHZlcmlmaWNhdGlvbnMuXG4gICAgICAgICAgICAgICAgICAgIChjb21wb25lbnRVbmRlclRlc3Quc3RhdGVDaGFuZ2VSZXF1ZXN0LmVtaXQgYXMgamFzbWluZS5TcHkpLmNhbGxzLnJlc2V0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0Lm5nT25EZXN0cm95KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZXhwZWN0UmVzZXRGb3IoJ3ZpZGVvJyk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGRlc2NyaWJlKCd0b2dnbGVQbGF5YmFjaygpJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaXQoJ2lzIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3QudG9nZ2xlUGxheWJhY2soKSkudG9UaHJvd0Vycm9yKCk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGRlc2NyaWJlKCdwbGF5QXRTcGVlZCgpJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaXQoJ2lzIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3QucGxheUF0U3BlZWQoMi41KSkudG9UaHJvd0Vycm9yKCk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGRlc2NyaWJlKCdwYXVzZSgpJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaXQoJ2lzIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3QucGF1c2UoKSkudG9UaHJvd0Vycm9yKCk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGRlc2NyaWJlKCdzZWVrVG8oKScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGl0KCdpcyBub3Qgc3VwcG9ydGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBleHBlY3QoKCkgPT4gY29tcG9uZW50VW5kZXJUZXN0LnNlZWtUbyg2Ljg2NykpLnRvVGhyb3dFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBkZXNjcmliZSgnc2Vla1RvSW5NYXJrZXIoKScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGl0KCdpcyBub3Qgc3VwcG9ydGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBleHBlY3QoKCkgPT4gY29tcG9uZW50VW5kZXJUZXN0LnNlZWtUb0luTWFya2VyKCkpLnRvVGhyb3dFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBkZXNjcmliZSgnc2Vla1RvT3V0TWFya2VyKCknLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpdCgnaXMgbm90IHN1cHBvcnRlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXhwZWN0KCgpID0+IGNvbXBvbmVudFVuZGVyVGVzdC5zZWVrVG9PdXRNYXJrZXIoKSkudG9UaHJvd0Vycm9yKCk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGRlc2NyaWJlKCdzZXRJbk1hcmtlclRvQ3VycmVudFRpbWUoKScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGl0KCdpcyBub3Qgc3VwcG9ydGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBleHBlY3QoKCkgPT4gY29tcG9uZW50VW5kZXJUZXN0LnNldEluTWFya2VyVG9DdXJyZW50VGltZSgpKS50b1Rocm93RXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZGVzY3JpYmUoJ3NldE91dE1hcmtlclRvQ3VycmVudFRpbWUoKScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGl0KCdpcyBub3Qgc3VwcG9ydGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBleHBlY3QoKCkgPT4gY29tcG9uZW50VW5kZXJUZXN0LnNldE91dE1hcmtlclRvQ3VycmVudFRpbWUoKSkudG9UaHJvd0Vycm9yKCk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGRlc2NyaWJlKCdjbGVhck1hcmtlcnMoKScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGl0KCdpcyBub3Qgc3VwcG9ydGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBleHBlY3QoKCkgPT4gY29tcG9uZW50VW5kZXJUZXN0LmNsZWFyTWFya2VycygpKS50b1Rocm93RXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZGVzY3JpYmUoJ3RvZ2dsZU1hcmtlcnNQbGF5YmFjaygpJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaXQoJ2lzIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3QudG9nZ2xlTWFya2Vyc1BsYXliYWNrKCkpLnRvVGhyb3dFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBkZXNjcmliZSgndG9nZ2xlTXV0ZSgpJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaXQoJ2lzIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3QudG9nZ2xlTXV0ZSgpKS50b1Rocm93RXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZGVzY3JpYmUoJ3NldFZvbHVtZVRvKCknLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpdCgnaXMgbm90IHN1cHBvcnRlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXhwZWN0KCgpID0+IGNvbXBvbmVudFVuZGVyVGVzdC5zZXRWb2x1bWVUbygxMSkpLnRvVGhyb3dFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGRlc2NyaWJlKCd3aXRoIEhUTUw1IHZpZGVvJywgKCkgPT4ge1xuICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IG1vY2tKd1BsYXllci5zZXRQcm92aWRlck5hbWVUbygnaHRtbDUnKSk7XG5cbiAgICAgICAgICAgICAgZGVzY3JpYmUoJ2JlZm9yZSBcXCdyZWFkeVxcJyBldmVudCBpcyB0cmlnZ2VyZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaXQoJ2RvZXNuXFwndCBlbWl0IGEgXFwnY2FuU3VwcG9ydEN1c3RvbUNvbnRyb2xzXFwnIG9yIFxcJ3JlYWR5XFwnIHN0YXRlIHVwZGF0ZSB5ZXQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlcilcbiAgICAgICAgICAgICAgICAgICAgLm5vdC50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7IGNhblN1cHBvcnRDdXN0b21Db250cm9sczogamFzbWluZS5hbnkoQm9vbGVhbiksIHJlYWR5OiBqYXNtaW5lLmFueShCb29sZWFuKSB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgZGVzY3JpYmUoJ2FmdGVyIFxcJ3JlYWR5XFwnIGV2ZW50IGlzIHRyaWdnZXJlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IG1vY2tKd1BsYXllci50cmlnZ2VyKCdyZWFkeScpKTtcblxuICAgICAgICAgICAgICAgIGl0KCdkb2VzIG5vdCB1c2UgSlcgUGxheWVyXFwncyBjb250cm9scycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrSndQbGF5ZXIuZ2V0Q29udHJvbHMoKSkudG9CZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpdCgncmVwb3J0cyByZWFkeTogdHJ1ZSwgY2FuU3VwcG9ydEN1c3RvbUNvbnRyb2xzOiB0cnVlLCBmcmFtZXNQZXJTZWNvbmQsIGluL291dCBtYXJrZXJzLCB2b2x1bWUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlcikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIuY2FsbHMuYWxsQXJncygpKS50b0VxdWFsKFtbe1xuICAgICAgICAgICAgICAgICAgICByZWFkeTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2FuU3VwcG9ydEN1c3RvbUNvbnRyb2xzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmcmFtZXNQZXJTZWNvbmQ6IDMwLFxuICAgICAgICAgICAgICAgICAgICBpbk1hcmtlcjogYXNzZXRUZXN0LmV4cGVjdGVkSW5TZWNvbmRzLFxuICAgICAgICAgICAgICAgICAgICBvdXRNYXJrZXI6IGFzc2V0VGVzdC5leHBlY3RlZE91dFNlY29uZHMsXG4gICAgICAgICAgICAgICAgICAgIHZvbHVtZTogMTAwXG4gICAgICAgICAgICAgICAgICB9XV0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaXQoJ3NldHMgdGhlIFxcJ29uY29udGV4dG1lbnVcXCcgcHJvcGVydHkgb24gdGhlIHZpZGVvRWxlbWVudCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrVmlkZW9FbGVtZW50Lm9uY29udGV4dG1lbnUpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICAgICAgICBleHBlY3QobW9ja1ZpZGVvRWxlbWVudC5vbmNvbnRleHRtZW51KCkpLnRvQmUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZGVzY3JpYmUoJ2FmdGVyIHJlcG9ydGluZyBjYW5TdXBwb3J0Q3VzdG9tQ29udHJvbHMnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3Qgd2FudCBpbml0aWFsaXphdGlvbiBjYWxscyB0byBhZmZlY3QgZnV0dXJlIHZlcmlmaWNhdGlvbnMuXG4gICAgICAgICAgICAgICAgICAgIChjb21wb25lbnRVbmRlclRlc3Quc3RhdGVDaGFuZ2VSZXF1ZXN0LmVtaXQgYXMgamFzbWluZS5TcHkpLmNhbGxzLnJlc2V0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFzc2V0VGVzdC5tYXJrZXJzLmhhc093blByb3BlcnR5KCd0aW1lU3RhcnQnKSAmJiBhc3NldFRlc3QubWFya2Vycy5oYXNPd25Qcm9wZXJ0eSgndGltZUVuZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gQ29tcGxldGUgdGhlIHNlZWsgY2F1c2VkIGJ5IHRvZ2dsZU1hcmtlcnNQbGF5YmFjaygpLCB3aGljaCB3YXNcbiAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsZWQgYmVjYXVzZSB3ZSB3ZXJlIGluaXRpYWxpemVkIHdpdGggYm90aCBtYXJrZXJzLlxuICAgICAgICAgICAgICAgICAgICAgIG1vY2tWaWRlb0VsZW1lbnQuc2ltdWxhdGVTZWVrQ29tcGxldGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgaWYgKGFzc2V0VGVzdC5tYXJrZXJzLmhhc093blByb3BlcnR5KCd0aW1lU3RhcnQnKSAmJiBhc3NldFRlc3QubWFya2Vycy5oYXNPd25Qcm9wZXJ0eSgndGltZUVuZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0KCdyZXBvcnRzIHBsYXlpbmdNYXJrZXJzOiB0cnVlLCBwbGF5aW5nOiB0cnVlLCBjdXJyZW50IHRpbWUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIuY2FsbHMuYWxsQXJncygpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRvRXF1YWwoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBbeyBwbGF5aW5nTWFya2VyczogdHJ1ZSB9XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW3sgcGxheWluZzogdHJ1ZSB9XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW3sgY3VycmVudFRpbWU6IGFzc2V0VGVzdC5leHBlY3RlZEluU2Vjb25kcyB9XVxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBkZXNjcmliZSgnYWZ0ZXIgaW5pdGlhbGl6YXRpb24gaXMgY29tcGxldGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhc3NldFRlc3QubWFya2Vycy5oYXNPd25Qcm9wZXJ0eSgndGltZVN0YXJ0JykgJiYgYXNzZXRUZXN0Lm1hcmtlcnMuaGFzT3duUHJvcGVydHkoJ3RpbWVFbmQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gS2lsbCBpbml0aWFsIGF1dG9wbGF5IGJldHdlZW4gbWFya2Vycy5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zZWVrVG8oOTkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9ja1ZpZGVvRWxlbWVudC5zaW11bGF0ZVNlZWtDb21wbGV0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IHdhbnQgaW5pdGlhbGl6YXRpb24gY2FsbHMgdG8gYWZmZWN0IGZ1dHVyZSB2ZXJpZmljYXRpb25zLlxuICAgICAgICAgICAgICAgICAgICAgICAgKGNvbXBvbmVudFVuZGVyVGVzdC5zdGF0ZUNoYW5nZVJlcXVlc3QuZW1pdCBhcyBqYXNtaW5lLlNweSkuY2FsbHMucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCd3aGVuIFxcJ2R1cmF0aW9uY2hhbmdlXFwnIGV2ZW50IGlzIHRyaWdnZXJlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IG1vY2tWaWRlb0VsZW1lbnQuc2ltdWxhdGVEdXJhdGlvbkNoYW5nZVRvKDIzNC41NjcpKTtcblxuICAgICAgICAgICAgICAgICAgICAgIGl0KCdyZXBvcnRzIHRoZSBhc3NldFxcJ3MgZHVyYXRpb24nLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoeyBkdXJhdGlvbjogMjM0LjU2NyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmUoJ25nT25EZXN0cm95KCknLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgaXQoJ3Jlc2V0cyB0aGUgcGxheWVyJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0Lm5nT25EZXN0cm95KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdFJlc2V0Rm9yKCdodG1sNVZpZGVvJyk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCd3aGVuIGRpc3BsYXkgaXMgY2xpY2tlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnd2hlbiBwbGF5YmFjayB3YXMgcGxheWluZycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdwYXVzZXMnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1vY2tKd1BsYXllci5zaW11bGF0ZURpc3BsYXlDbGljaygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrVmlkZW9FbGVtZW50LnBhdXNlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpdCgncmVwb3J0cyBwbGF5aW5nOiBmYWxzZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9ja0p3UGxheWVyLnNpbXVsYXRlRGlzcGxheUNsaWNrKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIuY2FsbHMubW9zdFJlY2VudCgpLmFyZ3MpLnRvRXF1YWwoW3sgcGxheWluZzogZmFsc2UgfV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnd2hlbiBwbGF5YmFjayB3YXMgcGF1c2VkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3QudG9nZ2xlUGxheWJhY2soKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdwbGF5cycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9ja0p3UGxheWVyLnNpbXVsYXRlRGlzcGxheUNsaWNrKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KG1vY2tWaWRlb0VsZW1lbnQucGF1c2VkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpdCgncmVwb3J0cyBwbGF5aW5nOiB0cnVlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtb2NrSndQbGF5ZXIuc2ltdWxhdGVEaXNwbGF5Q2xpY2soKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlcikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlci5jYWxscy5tb3N0UmVjZW50KCkuYXJncykudG9FcXVhbChbeyBwbGF5aW5nOiB0cnVlIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgndG9nZ2xlUGxheWJhY2soKScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnd2hlbiBwbGF5YmFjayB3YXMgcGxheWluZycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdwYXVzZXMnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC50b2dnbGVQbGF5YmFjaygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrVmlkZW9FbGVtZW50LnBhdXNlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpdCgncmVwb3J0cyBwbGF5aW5nOiBmYWxzZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnRvZ2dsZVBsYXliYWNrKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIuY2FsbHMubW9zdFJlY2VudCgpLmFyZ3MpLnRvRXF1YWwoW3sgcGxheWluZzogZmFsc2UgfV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnd2hlbiBwbGF5YmFjayB3YXMgcGF1c2VkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3QudG9nZ2xlUGxheWJhY2soKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdwbGF5cycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnRvZ2dsZVBsYXliYWNrKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KG1vY2tWaWRlb0VsZW1lbnQucGF1c2VkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpdCgncmVwb3J0cyBwbGF5aW5nOiB0cnVlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QudG9nZ2xlUGxheWJhY2soKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlcikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlci5jYWxscy5tb3N0UmVjZW50KCkuYXJncykudG9FcXVhbChbeyBwbGF5aW5nOiB0cnVlIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmUoJ3doZW4gZmFzdCBmb3J3YXJkaW5nJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5wbGF5QXRTcGVlZCg0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCB3YW50IGluaXRpYWxpemF0aW9uIGNhbGxzIHRvIGFmZmVjdCBmdXR1cmUgdmVyaWZpY2F0aW9ucy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGNvbXBvbmVudFVuZGVyVGVzdC5zdGF0ZUNoYW5nZVJlcXVlc3QuZW1pdCBhcyBqYXNtaW5lLlNweSkuY2FsbHMucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpdCgncGF1c2VzJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QudG9nZ2xlUGxheWJhY2soKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QobW9ja1ZpZGVvRWxlbWVudC5wYXVzZWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3JlcG9ydHMgcGxheWJhY2tTcGVlZDogMSBhbmQgcGxheWluZzogZmFsc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC50b2dnbGVQbGF5YmFjaygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyLmNhbGxzLmFsbEFyZ3MoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9FcXVhbChbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbeyBwbGF5YmFja1NwZWVkOiAxIH1dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3sgcGxheWluZzogZmFsc2UgfV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgncGxheUF0U3BlZWQoKScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBpdCgnZG9lcyBub3QgeWV0IHN1cHBvcnQgcmV2ZXJzZSBwbGF5YmFjaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3QucGxheUF0U3BlZWQoMSwgJ3JldmVyc2UnKSkudG9UaHJvd0Vycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpdCgncmVwb3J0cyBub3JtYWwgc3BlZWQgd2hlbiB0aGUgZW5kIG9mIHRoZSB2aWRlbyBpcyByZWFjaGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnBsYXlBdFNwZWVkKDQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9ja1ZpZGVvRWxlbWVudC5zaW11bGF0ZVBsYXliYWNrRW5kZWQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIuY2FsbHMuYWxsQXJncygpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAudG9FcXVhbChbW3sgcGxheWJhY2tTcGVlZDogNCB9XSwgW3sgcGxheWJhY2tTcGVlZDogMSB9XSwgW3sgcGxheWluZzogZmFsc2UgfV1dKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCd3aGVuIHBsYXliYWNrIHdhcyBwbGF5aW5nJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ2lzIHN0aWxsIHBsYXlpbmcnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5wbGF5QXRTcGVlZCg0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QobW9ja1ZpZGVvRWxlbWVudC5wYXVzZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdyZXBvcnRzIG9ubHkgcGxheWJhY2tTcGVlZDogNCAoYW5kIG5vdCBwbGF5aW5nOiB0cnVlKScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnBsYXlBdFNwZWVkKDQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyLmNhbGxzLm1vc3RSZWNlbnQoKS5hcmdzKS50b0VxdWFsKFt7IHBsYXliYWNrU3BlZWQ6IDQgfV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnd2hlbiBwbGF5YmFjayB3YXMgcGF1c2VkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC50b2dnbGVQbGF5YmFjaygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IHdhbnQgaW5pdGlhbGl6YXRpb24gY2FsbHMgdG8gYWZmZWN0IGZ1dHVyZSB2ZXJpZmljYXRpb25zLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAoY29tcG9uZW50VW5kZXJUZXN0LnN0YXRlQ2hhbmdlUmVxdWVzdC5lbWl0IGFzIGphc21pbmUuU3B5KS5jYWxscy5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdwbGF5cycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnBsYXlBdFNwZWVkKDQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrVmlkZW9FbGVtZW50LnBhdXNlZCkudG9CZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3JlcG9ydHMgcGxheWJhY2tTcGVlZDogNCBhbmQgcGxheWluZzogdHJ1ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnBsYXlBdFNwZWVkKDQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyLmNhbGxzLmFsbEFyZ3MoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9FcXVhbChbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbeyBwbGF5YmFja1NwZWVkOiA0IH1dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3sgcGxheWluZzogdHJ1ZSB9XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCdwYXVzZSgpJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCd3aGVuIHBsYXliYWNrIHdhcyBwbGF5aW5nJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ2lzIHN0aWxsIHBsYXlpbmcnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5wYXVzZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrVmlkZW9FbGVtZW50LnBhdXNlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpdCgncmVwb3J0cyBwbGF5aW5nOiBmYWxzZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnBhdXNlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIuY2FsbHMubW9zdFJlY2VudCgpLmFyZ3MpLnRvRXF1YWwoW3sgcGxheWluZzogZmFsc2UgfV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnd2hlbiBwbGF5YmFjayB3YXMgcGF1c2VkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC50b2dnbGVQbGF5YmFjaygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IHdhbnQgaW5pdGlhbGl6YXRpb24gY2FsbHMgdG8gYWZmZWN0IGZ1dHVyZSB2ZXJpZmljYXRpb25zLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAoY29tcG9uZW50VW5kZXJUZXN0LnN0YXRlQ2hhbmdlUmVxdWVzdC5lbWl0IGFzIGphc21pbmUuU3B5KS5jYWxscy5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdwYXVzZXMnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5wYXVzZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrVmlkZW9FbGVtZW50LnBhdXNlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpdCgncmVwb3J0cyBub3RoaW5nJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QucGF1c2UoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlcikubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgndG9nZ2xlTXV0ZSgpJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCd3aGVuIG5vdCBtdXRlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdtdXRlcycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnRvZ2dsZU11dGUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QobW9ja1ZpZGVvRWxlbWVudC5tdXRlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpdCgncmVwb3J0cyB2b2x1bWUgPSAwJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QudG9nZ2xlTXV0ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyLmNhbGxzLmFsbEFyZ3MoKSkudG9FcXVhbChbW3sgdm9sdW1lOiAwIH1dXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCd3aGVuIG11dGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1vY2tWaWRlb0VsZW1lbnQudm9sdW1lID0gMC41NztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnRvZ2dsZU11dGUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCB3YW50IGluaXRpYWxpemF0aW9uIGNhbGxzIHRvIGFmZmVjdCBmdXR1cmUgdmVyaWZpY2F0aW9ucy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGNvbXBvbmVudFVuZGVyVGVzdC5zdGF0ZUNoYW5nZVJlcXVlc3QuZW1pdCBhcyBqYXNtaW5lLlNweSkuY2FsbHMucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpdCgndW5tdXRlcycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnRvZ2dsZU11dGUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QobW9ja1ZpZGVvRWxlbWVudC5tdXRlZCkudG9CZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3JlcG9ydHMgcHJldmlvdXMgdm9sdW1lJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QudG9nZ2xlTXV0ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyLmNhbGxzLmFsbEFyZ3MoKSkudG9FcXVhbChbW3sgdm9sdW1lOiA1NyB9XV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCdzZXRWb2x1bWVUbygpJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCd3aGVuIG5vdCBtdXRlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0KCd1cGRhdGVzIHRoZSB2b2x1bWUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zZXRWb2x1bWVUbygxMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KG1vY2tWaWRlb0VsZW1lbnQudm9sdW1lKS50b0JlKDAuMTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdyZXBvcnRzIHRoZSBuZXcgdm9sdW1lJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc2V0Vm9sdW1lVG8oMTEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyLmNhbGxzLmFsbEFyZ3MoKSkudG9FcXVhbChbW3sgdm9sdW1lOiAxMSB9XV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnd2hlbiBtdXRlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtb2NrVmlkZW9FbGVtZW50LnZvbHVtZSA9IDAuNTc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC50b2dnbGVNdXRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG9uJ3Qgd2FudCBpbml0aWFsaXphdGlvbiBjYWxscyB0byBhZmZlY3QgZnV0dXJlIHZlcmlmaWNhdGlvbnMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChjb21wb25lbnRVbmRlclRlc3Quc3RhdGVDaGFuZ2VSZXF1ZXN0LmVtaXQgYXMgamFzbWluZS5TcHkpLmNhbGxzLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3VubXV0ZXMnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zZXRWb2x1bWVUbygxMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KG1vY2tWaWRlb0VsZW1lbnQubXV0ZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0KCd1cGRhdGVzIHRoZSB2b2x1bWUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zZXRWb2x1bWVUbygxMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KG1vY2tWaWRlb0VsZW1lbnQudm9sdW1lKS50b0JlKDAuMTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdyZXBvcnRzIHRoZSBuZXcgdm9sdW1lJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc2V0Vm9sdW1lVG8oMTEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyLmNhbGxzLmFsbEFyZ3MoKSkudG9FcXVhbChbW3sgdm9sdW1lOiAxMSB9XV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCdzZWVrVG8oKScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBpdCgnZG9lc25cXCd0IGltbWVkaWF0ZWx5IGVtaXQgYSBjdXJyZW50VGltZSBzdGF0dXMgdXBkYXRlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnNlZWtUbygxMjM0LjU2Nyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgaXQoJ3JlcG9ydHMgY3VycmVudCB0aW1lIGFmdGVyIHZpZGVvIGVsZW1lbnQgdHJpZ2dlcnMgXFwnc2Vla2VkXFwnJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnNlZWtUbygxMjM0LjU2Nyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2NrVmlkZW9FbGVtZW50LnNpbXVsYXRlU2Vla0NvbXBsZXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyLmNhbGxzLm1vc3RSZWNlbnQoKS5hcmdzKS50b0VxdWFsKFt7IGN1cnJlbnRUaW1lOiAxMjM0LjU2NyB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpdCgncmVwb3J0cyBjdXJyZW50IHRpbWUgaW1tZWRpYXRlbHkgd2hlbiBzZWVraW5nIHRvIHRoZSBjdXJyZW50IHRpbWUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2Vla2luZ0V2ZW50VHJpZ2dlckNvdW50OiBudW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9ja1ZpZGVvRWxlbWVudC5vbignc2Vla2luZycsICgpID0+IHNlZWtpbmdFdmVudFRyaWdnZXJDb3VudCArPSAxKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnNlZWtUbygxMjM0LjU2Nyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc2Vla2luZ0V2ZW50VHJpZ2dlckNvdW50KS50b0JlKDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9ja1ZpZGVvRWxlbWVudC5zaW11bGF0ZVNlZWtDb21wbGV0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IHdhbnQgaW5pdGlhbGl6YXRpb24gY2FsbHMgdG8gYWZmZWN0IGZ1dHVyZSB2ZXJpZmljYXRpb25zLlxuICAgICAgICAgICAgICAgICAgICAgICAgKGNvbXBvbmVudFVuZGVyVGVzdC5zdGF0ZUNoYW5nZVJlcXVlc3QuZW1pdCBhcyBqYXNtaW5lLlNweSkuY2FsbHMucmVzZXQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2VlayB0byBjdXJyZW50IHRpbWUuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc2Vla1RvKDEyMzQuNTY3KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHNlZWtpbmdFdmVudFRyaWdnZXJDb3VudCkudG9CZSgxKTsgIC8vIFNob3VsZCBub3QgaGF2ZSByZXF1ZXN0ZWQgYW5vdGhlciBzZWVrLlxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyLmNhbGxzLm1vc3RSZWNlbnQoKS5hcmdzKS50b0VxdWFsKFt7IGN1cnJlbnRUaW1lOiAxMjM0LjU2NyB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnd2hlbiBtdWx0aXBsZSBzZWVrcyBhcmUgcmVxdWVzdGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3BlcmZvcm1zIHRoZSBmaXJzdCBzZWVrLCB0aGVuIHRoZSBmaW5hbCBvbmUsIGlnbm9yaW5nIHRoZSBvdGhlcnMnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpcnN0IHNlZWtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnNlZWtUbygxMjM0LjU2Nyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V2ZXJhbCBtb3JlIHNlZWtzXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zZWVrVG8oMjIzNC41NjcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc2Vla1RvKDMyMzQuNTY3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnNlZWtUbyg0MjM0LjU2Nyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmlyc3Qgc2VlayBjb21wbGV0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9ja1ZpZGVvRWxlbWVudC5zaW11bGF0ZVNlZWtDb21wbGV0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmluYWwgc2VlayBjb21wbGV0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9ja1ZpZGVvRWxlbWVudC5zaW11bGF0ZVNlZWtDb21wbGV0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIuY2FsbHMuYWxsQXJncygpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0VxdWFsKFtbeyBjdXJyZW50VGltZTogMTIzNC41NjcgfV0sIFt7IGN1cnJlbnRUaW1lOiA0MjM0LjU2NyB9XV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnd2hlbiB2aWRlbyBoYXMgZW5kZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9ja1ZpZGVvRWxlbWVudC5zaW11bGF0ZVBsYXliYWNrRW5kZWQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCB3YW50IGluaXRpYWxpemF0aW9uIGNhbGxzIHRvIGFmZmVjdCBmdXR1cmUgdmVyaWZpY2F0aW9ucy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGNvbXBvbmVudFVuZGVyVGVzdC5zdGF0ZUNoYW5nZVJlcXVlc3QuZW1pdCBhcyBqYXNtaW5lLlNweSkuY2FsbHMucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpdCgnXCJwcmltZXMgdGhlIHB1bXBcIiBieSBwbGF5aW5nL3BhdXNpbmcgYmVmb3JlIHNlZWtpbmcnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zZWVrVG8oMTIzNC41NjcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyLmNhbGxzLmFsbEFyZ3MoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9FcXVhbChbW3sgcGxheWluZzogdHJ1ZSB9XSwgW3sgcGxheWluZzogZmFsc2UgfV1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpdCgncmVwb3J0cyBjdXJyZW50IHRpbWUgYWZ0ZXIgdmlkZW8gZWxlbWVudCB0cmlnZ2VycyBcXCdzZWVrZWRcXCcnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zZWVrVG8oMTIzNC41NjcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtb2NrVmlkZW9FbGVtZW50LnNpbXVsYXRlU2Vla0NvbXBsZXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlci5jYWxscy5hbGxBcmdzKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvRXF1YWwoW1t7IHBsYXlpbmc6IHRydWUgfV0sIFt7IHBsYXlpbmc6IGZhbHNlIH1dLCBbeyBjdXJyZW50VGltZTogMTIzNC41NjcgfV1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnc2Vla1RvSW5NYXJrZXIoKScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYXNzZXRUZXN0Lm1hcmtlcnMuaGFzT3duUHJvcGVydHkoJ3RpbWVTdGFydCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdCgncmVwb3J0cyBjdXJyZW50VGltZSB1cGRhdGVkIHRvIGluIG1hcmtlcicsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnNlZWtUb0luTWFya2VyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1vY2tWaWRlb0VsZW1lbnQuc2ltdWxhdGVTZWVrQ29tcGxldGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyLmNhbGxzLm1vc3RSZWNlbnQoKS5hcmdzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0VxdWFsKFt7IGN1cnJlbnRUaW1lOiBhc3NldFRlc3QuZXhwZWN0ZWRJblNlY29uZHMgfV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0KCd0aHJvd3MgYW4gZXJyb3InLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3Quc2Vla1RvSW5NYXJrZXIoKSkudG9UaHJvd0Vycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCdzZWVrVG9PdXRNYXJrZXIoKScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYXNzZXRUZXN0Lm1hcmtlcnMuaGFzT3duUHJvcGVydHkoJ3RpbWVFbmQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3JlcG9ydHMgY3VycmVudFRpbWUgdXBkYXRlZCB0byBvdXQgbWFya2VyJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc2Vla1RvT3V0TWFya2VyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1vY2tWaWRlb0VsZW1lbnQuc2ltdWxhdGVTZWVrQ29tcGxldGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyLmNhbGxzLm1vc3RSZWNlbnQoKS5hcmdzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0VxdWFsKFt7IGN1cnJlbnRUaW1lOiBhc3NldFRlc3QuZXhwZWN0ZWRPdXRTZWNvbmRzIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdCgndGhyb3dzIGFuIGVycm9yJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QoKCkgPT4gY29tcG9uZW50VW5kZXJUZXN0LnNlZWtUb091dE1hcmtlcigpKS50b1Rocm93RXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmUoJ3NldEluTWFya2VyVG9DdXJyZW50VGltZSgpJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGl0KCdyZXBvcnRzIGluTWFya2VyIHVwZGF0ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vY2tWaWRlb0VsZW1lbnQuc2ltdWxhdGVUaW1lQ2hhbmdlVG8oMC4xMjMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnNldEluTWFya2VyVG9DdXJyZW50VGltZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlcikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIuY2FsbHMubW9zdFJlY2VudCgpLmFyZ3MpLnRvRXF1YWwoW3sgaW5NYXJrZXI6IDAuMTIzIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChhc3NldFRlc3QubWFya2Vycy5oYXNPd25Qcm9wZXJ0eSgndGltZUVuZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnaWYgY3VycmVudCB0aW1lIGlzIGdyZWF0ZXIgdGhhbiBvdXQgbWFya2VyJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpdCgnbW92ZXMgb3V0IG1hcmtlciwgYW5kIHJlcG9ydHMgaW5NYXJrZXIgYW5kIG91dE1hcmtlciB1cGRhdGVzJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vY2tWaWRlb0VsZW1lbnQuc2ltdWxhdGVUaW1lQ2hhbmdlVG8oOS44NzYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zZXRJbk1hcmtlclRvQ3VycmVudFRpbWUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIuY2FsbHMubW9zdFJlY2VudCgpLmFyZ3MpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9FcXVhbChbeyBpbk1hcmtlcjogOS44NzYsIG91dE1hcmtlcjogOS44NzYgfV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmUoJ3NldE91dE1hcmtlclRvQ3VycmVudFRpbWUoKScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBpdCgncmVwb3J0cyBvdXRNYXJrZXIgdXBkYXRlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9ja1ZpZGVvRWxlbWVudC5zaW11bGF0ZVRpbWVDaGFuZ2VUbyg1LjY3OCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc2V0T3V0TWFya2VyVG9DdXJyZW50VGltZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlcikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIuY2FsbHMubW9zdFJlY2VudCgpLmFyZ3MpLnRvRXF1YWwoW3sgb3V0TWFya2VyOiA1LjY3OCB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYXNzZXRUZXN0Lm1hcmtlcnMuaGFzT3duUHJvcGVydHkoJ3RpbWVTdGFydCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnaWYgY3VycmVudCB0aW1lIGlzIGxlc3MgdGhhbiBpbiBtYXJrZXInLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdtb3ZlcyBpbiBtYXJrZXIsIGFuZCByZXBvcnRzIGluTWFya2VyIGFuZCBvdXRNYXJrZXIgdXBkYXRlcycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2NrVmlkZW9FbGVtZW50LnNpbXVsYXRlVGltZUNoYW5nZVRvKDAuOTk5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc2V0T3V0TWFya2VyVG9DdXJyZW50VGltZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlci5jYWxscy5tb3N0UmVjZW50KCkuYXJncylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0VxdWFsKFt7IGluTWFya2VyOiAwLjk5OSwgb3V0TWFya2VyOiAwLjk5OSB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnY2xlYXJNYXJrZXJzKCknLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgaXQoJ3JlcG9ydHMgaW5NYXJrZXI6IHVuZGVmaW5lZCwgb3V0TWFya2VyOiB1bmRlZmluZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QuY2xlYXJNYXJrZXJzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlci5jYWxscy5tb3N0UmVjZW50KCkuYXJncylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvRXF1YWwoW3sgaW5NYXJrZXI6IHVuZGVmaW5lZCwgb3V0TWFya2VyOiB1bmRlZmluZWQgfV0pO1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgndG9nZ2xlTWFya2Vyc1BsYXliYWNrKCknLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gSWNreSBuZWdhdGl2ZSBpZiBzdGF0ZW1lbnQsIHNvIGFzIG5vdCB0byBidXJ5IHRoZSBlbHNlIGNhc2UgbWFueSwgbWFueSBsaW5lcyBiZWxvdy5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFzc2V0VGVzdC5tYXJrZXJzLmhhc093blByb3BlcnR5KCd0aW1lU3RhcnQnKSB8fCAhYXNzZXRUZXN0Lm1hcmtlcnMuaGFzT3duUHJvcGVydHkoJ3RpbWVFbmQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3Rocm93cyBhbiBlcnJvcicsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KCgpID0+IGNvbXBvbmVudFVuZGVyVGVzdC50b2dnbGVNYXJrZXJzUGxheWJhY2soKSkudG9UaHJvd0Vycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgW3sgaW5pdGlhbFN0YXRlOiAncGF1c2VkJyB9LCB7IGluaXRpYWxTdGF0ZTogJ3BsYXlpbmcnIH1dLmZvckVhY2goc3RhdGVUZXN0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmUoYHdoZW4gcGxheWJhY2sgd2FzIGluaXRpYWxseSAke3N0YXRlVGVzdC5pbml0aWFsU3RhdGV9YCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZWVraW5nRXZlbnRUcmlnZ2VyQ291bnQ6IG51bWJlcjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vla2luZ0V2ZW50VHJpZ2dlckNvdW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vY2tWaWRlb0VsZW1lbnQub24oJ3NlZWtpbmcnLCAoKSA9PiBzZWVraW5nRXZlbnRUcmlnZ2VyQ291bnQgKz0gMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZVRlc3QuaW5pdGlhbFN0YXRlID09PSAncGF1c2VkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3QudG9nZ2xlUGxheWJhY2soKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCB3YW50IGluaXRpYWxpemF0aW9uIGNhbGxzIHRvIGFmZmVjdCBmdXR1cmUgdmVyaWZpY2F0aW9ucy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNvbXBvbmVudFVuZGVyVGVzdC5zdGF0ZUNoYW5nZVJlcXVlc3QuZW1pdCBhcyBqYXNtaW5lLlNweSkuY2FsbHMucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnRvZ2dsZU1hcmtlcnNQbGF5YmFjaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmUoJ2JlZm9yZSBcXCdzZWVrZWRcXCcgZXZlbnQgaXMgdHJpZ2dlcmVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3NlZWtzJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc2Vla2luZ0V2ZW50VHJpZ2dlckNvdW50KS50b0JlKDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdlbWl0cyBubyBzdGF0ZVVwZGF0ZXMgeWV0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlcikubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnYW5kIHRvZ2dsZU1hcmtlcnNQbGF5YmFjaygpIGlzIHNvbWVob3cgaW1tZWRpYXRlbHkgY2FsbGVkIGFnYWluJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IGNvbXBvbmVudFVuZGVyVGVzdC50b2dnbGVNYXJrZXJzUGxheWJhY2soKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlVGVzdC5pbml0aWFsU3RhdGUgPT09ICdwYXVzZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ2lzIHN0aWxsIHBhdXNlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrVmlkZW9FbGVtZW50LnBhdXNlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdCgnaXMgc3RpbGwgcGxheWluZycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrVmlkZW9FbGVtZW50LnBhdXNlZCkudG9CZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdCgnc3RpbGwgZW1pdHMgbm8gc3RhdGVVcGRhdGVzJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdCgnZG9lc25cXCd0IHNlZWsgYWdhaW4nLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHNlZWtpbmdFdmVudFRyaWdnZXJDb3VudCkudG9CZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCdhZnRlciBcXCdzZWVrZWRcXCcgZXZlbnQgaXMgdHJpZ2dlcmVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiBtb2NrVmlkZW9FbGVtZW50LnNpbXVsYXRlU2Vla0NvbXBsZXRpb24oKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZVRlc3QuaW5pdGlhbFN0YXRlID09PSAncGF1c2VkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdCgncmVwb3J0cyBwbGF5aW5nTWFya2VyczogdHJ1ZSwgcGxheWluZzogdHJ1ZSwgY3VycmVudCB0aW1lJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyLmNhbGxzLmFsbEFyZ3MoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0VxdWFsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3sgcGxheWluZ01hcmtlcnM6IHRydWUgfV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt7IHBsYXlpbmc6IHRydWUgfV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt7IGN1cnJlbnRUaW1lOiBhc3NldFRlc3QuZXhwZWN0ZWRJblNlY29uZHMgfV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdyZXBvcnRzIHBsYXlpbmdNYXJrZXJzOiB0cnVlLCBjdXJyZW50IHRpbWUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIuY2FsbHMuYWxsQXJncygpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvRXF1YWwoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbeyBwbGF5aW5nTWFya2VyczogdHJ1ZSB9XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3sgY3VycmVudFRpbWU6IGFzc2V0VGVzdC5leHBlY3RlZEluU2Vjb25kcyB9XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdCgnaXMgcGxheWluZycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KG1vY2tWaWRlb0VsZW1lbnQucGF1c2VkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnd2hlbiBhIHRpbWUgbGVzcyB0aGFuIHRoZSBvdXQgbWFya2VyIGlzIHJlcG9ydGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IG1vY2tWaWRlb0VsZW1lbnQuc2ltdWxhdGVUaW1lQ2hhbmdlVG8oMS41KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3JlcG9ydHMgY3VycmVudCB0aW1lJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcyhzdGF0ZVRlc3QuaW5pdGlhbFN0YXRlID09PSAncGF1c2VkJyA/IDQgOiAzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlci5jYWxscy5tb3N0UmVjZW50KCkuYXJncykudG9FcXVhbChbeyBjdXJyZW50VGltZTogMS41IH1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ2lzIHN0aWxsIHBsYXlpbmcnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KG1vY2tWaWRlb0VsZW1lbnQucGF1c2VkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmUoJ3doZW4gdG9nZ2xlTWFya2Vyc1BsYXliYWNrKCkgaXMgY2FsbGVkIGJlZm9yZSB0aGUgb3V0IG1hcmtlciBpcyByZWFjaGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IGNvbXBvbmVudFVuZGVyVGVzdC50b2dnbGVNYXJrZXJzUGxheWJhY2soKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ2RvZXNuXFwndCBzZWVrIGFnYWluJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzZWVraW5nRXZlbnRUcmlnZ2VyQ291bnQpLnRvQmUoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdyZXBvcnRzIHBsYXlpbmc6IGZhbHNlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcyhzdGF0ZVRlc3QuaW5pdGlhbFN0YXRlID09PSAncGF1c2VkJyA/IDQgOiAzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlci5jYWxscy5tb3N0UmVjZW50KCkuYXJncykudG9FcXVhbChbeyBwbGF5aW5nOiBmYWxzZSB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdpcyBwYXVzZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KG1vY2tWaWRlb0VsZW1lbnQucGF1c2VkKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnYW5kIHRvZ2dsZU1hcmtlcnNQbGF5YmFjaygpIGlzIGNhbGxlZCBhZ2FpbicsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IGNvbXBvbmVudFVuZGVyVGVzdC50b2dnbGVNYXJrZXJzUGxheWJhY2soKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdCgnZG9lc25cXCd0IHNlZWsgYWdhaW4nLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc2Vla2luZ0V2ZW50VHJpZ2dlckNvdW50KS50b0JlKDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3JlcG9ydHMgcGxheWluZzogdHJ1ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9IYXZlQmVlbkNhbGxlZFRpbWVzKHN0YXRlVGVzdC5pbml0aWFsU3RhdGUgPT09ICdwYXVzZWQnID8gNSA6IDQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIuY2FsbHMubW9zdFJlY2VudCgpLmFyZ3MpLnRvRXF1YWwoW3sgcGxheWluZzogdHJ1ZSB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdCgnaXMgcGxheWluZycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrVmlkZW9FbGVtZW50LnBhdXNlZCkudG9CZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCdhbmQgdG9nZ2xlUGxheWJhY2soKSBpcyBjYWxsZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3QudG9nZ2xlUGxheWJhY2soKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdCgnZG9lc25cXCd0IHNlZWsgYWdhaW4nLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc2Vla2luZ0V2ZW50VHJpZ2dlckNvdW50KS50b0JlKDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3JlcG9ydHMgcGxheWluZzogdHJ1ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9IYXZlQmVlbkNhbGxlZFRpbWVzKHN0YXRlVGVzdC5pbml0aWFsU3RhdGUgPT09ICdwYXVzZWQnID8gNSA6IDQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIuY2FsbHMubW9zdFJlY2VudCgpLmFyZ3MpLnRvRXF1YWwoW3sgcGxheWluZzogdHJ1ZSB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdCgnaXMgcGxheWluZycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrVmlkZW9FbGVtZW50LnBhdXNlZCkudG9CZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCd3aGVuIHRvZ2dsZVBsYXliYWNrKCkgaXMgY2FsbGVkIGJlZm9yZSB0aGUgb3V0IG1hcmtlciBpcyByZWFjaGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IGNvbXBvbmVudFVuZGVyVGVzdC50b2dnbGVQbGF5YmFjaygpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdCgnZG9lc25cXCd0IHNlZWsgYWdhaW4nLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHNlZWtpbmdFdmVudFRyaWdnZXJDb3VudCkudG9CZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3JlcG9ydHMgcGxheWluZzogZmFsc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9IYXZlQmVlbkNhbGxlZFRpbWVzKHN0YXRlVGVzdC5pbml0aWFsU3RhdGUgPT09ICdwYXVzZWQnID8gNCA6IDMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyLmNhbGxzLm1vc3RSZWNlbnQoKS5hcmdzKS50b0VxdWFsKFt7IHBsYXlpbmc6IGZhbHNlIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ2lzIHBhdXNlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QobW9ja1ZpZGVvRWxlbWVudC5wYXVzZWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCdhbmQgdG9nZ2xlUGxheWJhY2soKSBpcyBjYWxsZWQgYWdhaW4nLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3QudG9nZ2xlUGxheWJhY2soKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdCgnZG9lc25cXCd0IHNlZWsgYWdhaW4nLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc2Vla2luZ0V2ZW50VHJpZ2dlckNvdW50KS50b0JlKDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3JlcG9ydHMgcGxheWluZzogdHJ1ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9IYXZlQmVlbkNhbGxlZFRpbWVzKHN0YXRlVGVzdC5pbml0aWFsU3RhdGUgPT09ICdwYXVzZWQnID8gNSA6IDQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIuY2FsbHMubW9zdFJlY2VudCgpLmFyZ3MpLnRvRXF1YWwoW3sgcGxheWluZzogdHJ1ZSB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdCgnaXMgcGxheWluZycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrVmlkZW9FbGVtZW50LnBhdXNlZCkudG9CZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCdhbmQgdG9nZ2xlTWFya2Vyc1BsYXliYWNrKCkgaXMgY2FsbGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4gY29tcG9uZW50VW5kZXJUZXN0LnRvZ2dsZU1hcmtlcnNQbGF5YmFjaygpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdkb2VzblxcJ3Qgc2VlayBhZ2FpbicsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzZWVraW5nRXZlbnRUcmlnZ2VyQ291bnQpLnRvQmUoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdCgncmVwb3J0cyBwbGF5aW5nOiB0cnVlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0hhdmVCZWVuQ2FsbGVkVGltZXMoc3RhdGVUZXN0LmluaXRpYWxTdGF0ZSA9PT0gJ3BhdXNlZCcgPyA1IDogNCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlci5jYWxscy5tb3N0UmVjZW50KCkuYXJncykudG9FcXVhbChbeyBwbGF5aW5nOiB0cnVlIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdpcyBwbGF5aW5nJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KG1vY2tWaWRlb0VsZW1lbnQucGF1c2VkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmUoJ3doZW4gYSBzZWVrIGlzIHJlcXVlc3RlZCBiZWZvcmUgdGhlIG91dCBtYXJrZXIgaXMgcmVhY2hlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiBjb21wb25lbnRVbmRlclRlc3Quc2Vla1RvKDEyMykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdyZXBvcnRzIHBsYXlpbmdNYXJrZXJzOiBmYWxzZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0hhdmVCZWVuQ2FsbGVkVGltZXMoc3RhdGVUZXN0LmluaXRpYWxTdGF0ZSA9PT0gJ3BhdXNlZCcgPyA0IDogMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIuY2FsbHMubW9zdFJlY2VudCgpLmFyZ3MpLnRvRXF1YWwoW3sgcGxheWluZ01hcmtlcnM6IGZhbHNlIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ2lzIHN0aWxsIHBsYXlpbmcnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KG1vY2tWaWRlb0VsZW1lbnQucGF1c2VkKS50b0JlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmUoJ2FuZCBhIGxhdGVyIHRpbWUgZXZlbnQgaXMgc29tZWhvdyByZXBvcnRlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IG1vY2tWaWRlb0VsZW1lbnQuc2ltdWxhdGVUaW1lQ2hhbmdlVG8oNikpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3JlcG9ydHMgdGhlIGN1cnJlbnQgdGltZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9IYXZlQmVlbkNhbGxlZFRpbWVzKHN0YXRlVGVzdC5pbml0aWFsU3RhdGUgPT09ICdwYXVzZWQnID8gNSA6IDQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIuY2FsbHMubW9zdFJlY2VudCgpLmFyZ3MpLnRvRXF1YWwoW3sgY3VycmVudFRpbWU6IDYgfV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ2lzIHN0aWxsIHBsYXlpbmcnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QobW9ja1ZpZGVvRWxlbWVudC5wYXVzZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnd2hlbiBzZXRJbk1hcmtlclRvQ3VycmVudFRpbWUoKSBpcyBjYWxsZWQgYmVmb3JlIHRoZSBvdXQgbWFya2VyIGlzIHJlYWNoZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1RpbWU6IG51bWJlciA9IGFzc2V0VGVzdC5leHBlY3RlZE91dFNlY29uZHMgLSAwLjM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9ja1ZpZGVvRWxlbWVudC5zaW11bGF0ZVRpbWVDaGFuZ2VUbyhuZXdUaW1lKTsgLy8gaGFwcGVucyBiZWNhdXNlIHRoZSBwbGF5ZXIgaXMgcGxheWluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zZXRJbk1hcmtlclRvQ3VycmVudFRpbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3JlcG9ydHMgY3VycmVudCB0aW1lIGFuZCBpbk1hcmtlciB1cGRhdGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9IYXZlQmVlbkNhbGxlZFRpbWVzKHN0YXRlVGVzdC5pbml0aWFsU3RhdGUgPT09ICdwYXVzZWQnID8gNSA6IDQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyLmNhbGxzLmFsbEFyZ3MoKS5zbGljZSgtMikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9FcXVhbChbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt7IGN1cnJlbnRUaW1lOiBuZXdUaW1lIH1dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbeyBpbk1hcmtlcjogbmV3VGltZSB9XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdpcyBzdGlsbCBwbGF5aW5nJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrVmlkZW9FbGVtZW50LnBhdXNlZCkudG9CZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCd3aGVuIHNldE91dE1hcmtlclRvQ3VycmVudFRpbWUoKSBpcyBjYWxsZWQgYmVmb3JlIHRoZSBvdXQgbWFya2VyIGlzIHJlYWNoZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1RpbWU6IG51bWJlciA9IGFzc2V0VGVzdC5leHBlY3RlZE91dFNlY29uZHMgLSAwLjI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9ja1ZpZGVvRWxlbWVudC5zaW11bGF0ZVRpbWVDaGFuZ2VUbyhuZXdUaW1lKTsgLy8gaGFwcGVucyBiZWNhdXNlIHRoZSBwbGF5ZXIgaXMgcGxheWluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFVuZGVyVGVzdC5zZXRPdXRNYXJrZXJUb0N1cnJlbnRUaW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdyZXBvcnRzIGN1cnJlbnQgdGltZSwgcGxheWluZzogZmFsc2UsIHBsYXlpbmdNYXJrZXJzOiBmYWxzZSwgb3V0TWFya2VyIHVwZGF0ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0hhdmVCZWVuQ2FsbGVkVGltZXMoc3RhdGVUZXN0LmluaXRpYWxTdGF0ZSA9PT0gJ3BhdXNlZCcgPyA3IDogNik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlci5jYWxscy5hbGxBcmdzKCkuc2xpY2UoLTQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvRXF1YWwoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbeyBjdXJyZW50VGltZTogbmV3VGltZSB9XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3sgcGxheWluZzogZmFsc2UgfV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt7IHBsYXlpbmdNYXJrZXJzOiBmYWxzZSB9XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3sgb3V0TWFya2VyOiBuZXdUaW1lIH1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ2lzIHBhdXNlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QobW9ja1ZpZGVvRWxlbWVudC5wYXVzZWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKCd3aGVuIGNsZWFyTWFya2VycygpIGlzIGNhbGxlZCBiZWZvcmUgdGhlIG91dCBtYXJrZXIgaXMgcmVhY2hlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3VGltZTogbnVtYmVyID0gYXNzZXRUZXN0LmV4cGVjdGVkT3V0U2Vjb25kcyAtIDAuMTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2NrVmlkZW9FbGVtZW50LnNpbXVsYXRlVGltZUNoYW5nZVRvKG5ld1RpbWUpOyAvLyBoYXBwZW5zIGJlY2F1c2UgdGhlIHBsYXllciBpcyBwbGF5aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmNsZWFyTWFya2VycygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdCgncmVwb3J0cyBjdXJyZW50IHRpbWUsIHBsYXlpbmdNYXJrZXJzOiBmYWxzZSwgb3V0TWFya2VyIHVwZGF0ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0hhdmVCZWVuQ2FsbGVkVGltZXMoc3RhdGVUZXN0LmluaXRpYWxTdGF0ZSA9PT0gJ3BhdXNlZCcgPyA2IDogNSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlci5jYWxscy5hbGxBcmdzKCkuc2xpY2UoLTMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvRXF1YWwoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbeyBjdXJyZW50VGltZTogbmV3VGltZSB9XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3sgcGxheWluZ01hcmtlcnM6IGZhbHNlIH1dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbeyBpbk1hcmtlcjogdW5kZWZpbmVkLCBvdXRNYXJrZXI6IHVuZGVmaW5lZCB9XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdpcyBzdGlsbCBwbGF5aW5nJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrVmlkZW9FbGVtZW50LnBhdXNlZCkudG9CZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBjb25kaXRpb246ICdlcXVhbCB0bycsIHRpbWU6IGFzc2V0VGVzdC5leHBlY3RlZE91dFNlY29uZHMgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBjb25kaXRpb246ICdncmVhdGVyIHRoYW4nLCB0aW1lOiBhc3NldFRlc3QuZXhwZWN0ZWRPdXRTZWNvbmRzICsgMC4wMDEgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5mb3JFYWNoKGlubmVyVGVzdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlKGBhcyBzb29uIGFzIGEgdGltZSAke2lubmVyVGVzdC5jb25kaXRpb259IHRoZSBvdXQgbWFya2VyIGlzIHJlcG9ydGVkYCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZUVhY2goKCkgPT4gbW9ja1ZpZGVvRWxlbWVudC5zaW11bGF0ZVRpbWVDaGFuZ2VUbyhpbm5lclRlc3QudGltZSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3JlcG9ydHMgY3VycmVudCB0aW1lLCBwbGF5aW5nOiBmYWxzZSwgcGxheWluZ01hcmtlcnM6IGZhbHNlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0KHN0YXRlQ2hhbmdlUmVxdWVzdEVtaXR0ZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0hhdmVCZWVuQ2FsbGVkVGltZXMoc3RhdGVUZXN0LmluaXRpYWxTdGF0ZSA9PT0gJ3BhdXNlZCcgPyA2IDogNSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyLmNhbGxzLmFsbEFyZ3MoKS5zbGljZSgtMykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0VxdWFsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbeyBjdXJyZW50VGltZTogaW5uZXJUZXN0LnRpbWUgfV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3sgcGxheWluZzogZmFsc2UgfV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3sgcGxheWluZ01hcmtlcnM6IGZhbHNlIH1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ2lzIHBhdXNlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrVmlkZW9FbGVtZW50LnBhdXNlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbm5lclRlc3QuY29uZGl0aW9uID09PSAnZ3JlYXRlciB0aGFuJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3NlZWtzIGJhY2sgdG8gdGhlIG91dCBtYXJrZXInLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzZWVraW5nRXZlbnRUcmlnZ2VyQ291bnQpLnRvQmUoMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ2VtaXRzIG5vIGFkZGl0aW9uYWwgc3RhdGVVcGRhdGVzJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9IYXZlQmVlbkNhbGxlZFRpbWVzKHN0YXRlVGVzdC5pbml0aWFsU3RhdGUgPT09ICdwYXVzZWQnID8gNiA6IDUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0KCdpcyBzdGlsbCBwYXVzZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrVmlkZW9FbGVtZW50LnBhdXNlZCkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgnYWZ0ZXIgXFwnc2Vla2VkXFwnIGV2ZW50IGlzIHRyaWdnZXJlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlRWFjaCgoKSA9PiBtb2NrVmlkZW9FbGVtZW50LnNpbXVsYXRlU2Vla0NvbXBsZXRpb24oKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ3JlcG9ydHMgY3VycmVudCB0aW1lJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYW5nZVJlcXVlc3RFbWl0dGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcyhzdGF0ZVRlc3QuaW5pdGlhbFN0YXRlID09PSAncGF1c2VkJyA/IDcgOiA2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFuZ2VSZXF1ZXN0RW1pdHRlci5jYWxscy5tb3N0UmVjZW50KCkuYXJncylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0VxdWFsKFt7IGN1cnJlbnRUaW1lOiBhc3NldFRlc3QuZXhwZWN0ZWRPdXRTZWNvbmRzIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQoJ2lzIHN0aWxsIHBhdXNlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3QobW9ja1ZpZGVvRWxlbWVudC5wYXVzZWQpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXX0=
