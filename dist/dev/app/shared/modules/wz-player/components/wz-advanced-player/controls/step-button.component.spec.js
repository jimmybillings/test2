"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var step_button_component_1 = require("./step-button.component");
var index_1 = require("../../../../wazee-frame-formatter/index");
function main() {
    describe('Step Button Component', function () {
        var componentUnderTest;
        var mockPlayerState;
        var tests = [
            {
                size: '-5s', direction: 'reverse', iconClass: 'five-second', title: 'ASSET.ADV_PLAYER.SKIP_5S_BACK_BTN_TITLE',
                boundaryFrame: new index_1.Frame(29.97).setFromSeconds(5)
            },
            {
                size: '-1s', direction: 'reverse', iconClass: 'one-second', title: 'ASSET.ADV_PLAYER.SKIP_1S_BACK_BTN_TITLE',
                boundaryFrame: new index_1.Frame(29.97).setFromSeconds(1)
            },
            {
                size: '-1f', direction: 'reverse', iconClass: 'one-frame', title: 'ASSET.ADV_PLAYER.SKIP_1F_BACK_BTN_TITLE',
                boundaryFrame: new index_1.Frame(29.97).setFromFrameNumber(1)
            },
            {
                size: '+1f', direction: 'forward', iconClass: 'one-frame', title: 'ASSET.ADV_PLAYER.SKIP_1F_FORWARD_BTN_TITLE',
                boundaryFrame: new index_1.Frame(29.97).setFromSeconds(30).addFrames(-1)
            },
            {
                size: '+1s', direction: 'forward', iconClass: 'one-second', title: 'ASSET.ADV_PLAYER.SKIP_1S_FORWARD_BTN_TITLE',
                boundaryFrame: new index_1.Frame(29.97).setFromSeconds(30 - 1)
            },
            {
                size: '+5s', direction: 'forward', iconClass: 'five-second', title: 'ASSET.ADV_PLAYER.SKIP_5S_FORWARD_BTN_TITLE',
                boundaryFrame: new index_1.Frame(29.97).setFromSeconds(30 - 5)
            },
            { size: 'blah', direction: undefined, iconClass: undefined, title: undefined },
            { size: 'x1f', direction: undefined, iconClass: undefined, title: undefined },
            { size: '-7f', direction: undefined, iconClass: undefined, title: undefined },
            { size: '-1z', direction: undefined, iconClass: undefined, title: undefined },
            { size: '+1fgh', direction: undefined, iconClass: undefined, title: undefined }
        ];
        beforeEach(function () {
            mockPlayerState = {
                durationFrame: new index_1.Frame(29.97).setFromSeconds(30),
                framesPerSecond: 29.97
            };
            componentUnderTest = new step_button_component_1.StepButtonComponent();
            componentUnderTest.request.emit = jasmine.createSpy('request emitter');
            componentUnderTest.playerState = mockPlayerState;
        });
        tests.forEach(function (test) {
            describe("for size '" + test.size + "'", function () {
                beforeEach(function () {
                    componentUnderTest.size = test.size;
                });
                it("sets direction to '" + test.direction + "'", function () {
                    expect(componentUnderTest.direction).toBe(test.direction);
                });
                it("sets iconClass to '" + test.iconClass + "'", function () {
                    expect(componentUnderTest.iconClass).toBe(test.iconClass);
                });
                it("sets title to '" + test.title + "'", function () {
                    expect(componentUnderTest.title).toBe(test.title);
                });
                describe('canStep getter', function () {
                    describe('when the player state is undefined', function () {
                        it('returns false', function () {
                            componentUnderTest.playerState = undefined;
                            expect(componentUnderTest.canStep).toBe(false);
                        });
                    });
                    describe('when the current frame is undefined', function () {
                        it('returns false', function () {
                            componentUnderTest.playerState = {};
                            expect(componentUnderTest.canStep).toBe(false);
                        });
                    });
                    describe('when the current frame is at the boundary', function () {
                        beforeEach(function () {
                            componentUnderTest.playerState = Object.assign({}, mockPlayerState, { currentFrame: test.boundaryFrame });
                        });
                        if (test.direction) {
                            it('returns true', function () {
                                expect(componentUnderTest.canStep).toBe(true);
                            });
                        }
                        else {
                            it('returns false', function () {
                                expect(componentUnderTest.canStep).toBe(false);
                            });
                        }
                    });
                    describe('when the current frame is before the boundary', function () {
                        beforeEach(function () {
                            componentUnderTest.playerState = Object.assign({}, mockPlayerState, { currentFrame: new index_1.Frame(29.97).setFromFrameNumber(test.boundaryFrame ? test.boundaryFrame.frameNumber - 1 : 0) });
                        });
                        if (test.direction === 'reverse') {
                            it('returns false', function () {
                                expect(componentUnderTest.canStep).toBe(false);
                            });
                        }
                        else if (test.direction === 'forward') {
                            it('returns true', function () {
                                expect(componentUnderTest.canStep).toBe(true);
                            });
                        }
                        else {
                            it('returns false', function () {
                                expect(componentUnderTest.canStep).toBe(false);
                            });
                        }
                    });
                    describe('when the current frame is after the boundary', function () {
                        beforeEach(function () {
                            componentUnderTest.playerState = Object.assign({}, mockPlayerState, { currentFrame: new index_1.Frame(29.97).setFromFrameNumber(test.boundaryFrame ? test.boundaryFrame.frameNumber + 1 : 0) });
                        });
                        if (test.direction === 'reverse') {
                            it('returns true', function () {
                                expect(componentUnderTest.canStep).toBe(true);
                            });
                        }
                        else if (test.direction === 'forward') {
                            it('returns false', function () {
                                expect(componentUnderTest.canStep).toBe(false);
                            });
                        }
                        else {
                            it('returns false', function () {
                                expect(componentUnderTest.canStep).toBe(false);
                            });
                        }
                    });
                });
                describe('onClick()', function () {
                    describe('when the player state is undefined', function () {
                        it('does nothing', function () {
                            componentUnderTest.playerState = undefined;
                            componentUnderTest.onClick();
                            expect(componentUnderTest.request.emit).not.toHaveBeenCalled();
                        });
                    });
                    describe('when the current frame is undefined', function () {
                        it('does nothing', function () {
                            componentUnderTest.playerState = {};
                            componentUnderTest.onClick();
                            expect(componentUnderTest.request.emit).not.toHaveBeenCalled();
                        });
                    });
                    describe('when the current frame is at the boundary', function () {
                        beforeEach(function () {
                            componentUnderTest.playerState = Object.assign({}, mockPlayerState, { currentFrame: test.boundaryFrame });
                            componentUnderTest.onClick();
                        });
                        if (test.direction === 'reverse') {
                            it('requests a seek to frame 0', function () {
                                expect(componentUnderTest.request.emit)
                                    .toHaveBeenCalledWith({ type: 'SEEK_TO_FRAME', frame: new index_1.Frame(29.97).setFromFrameNumber(0) });
                            });
                        }
                        else if (test.direction === 'forward') {
                            it('requests a seek to the final frame', function () {
                                expect(componentUnderTest.request.emit)
                                    .toHaveBeenCalledWith({ type: 'SEEK_TO_FRAME', frame: new index_1.Frame(29.97).setFromFrameNumber(899) });
                            });
                        }
                        else {
                            it('does nothing', function () {
                                expect(componentUnderTest.request.emit).not.toHaveBeenCalled();
                            });
                        }
                    });
                    describe('when the current frame is before the boundary', function () {
                        beforeEach(function () {
                            componentUnderTest.playerState = Object.assign({}, mockPlayerState, { currentFrame: new index_1.Frame(29.97).setFromFrameNumber(test.boundaryFrame ? test.boundaryFrame.frameNumber - 1 : 0) });
                            componentUnderTest.onClick();
                        });
                        if (test.direction === 'reverse') {
                            it('does nothing', function () {
                                expect(componentUnderTest.request.emit).not.toHaveBeenCalled();
                            });
                        }
                        else if (test.direction === 'forward') {
                            it('requests a seek to the final frame minus 1', function () {
                                expect(componentUnderTest.request.emit)
                                    .toHaveBeenCalledWith({ type: 'SEEK_TO_FRAME', frame: new index_1.Frame(29.97).setFromFrameNumber(899 - 1) });
                            });
                        }
                        else {
                            it('does nothing', function () {
                                expect(componentUnderTest.request.emit).not.toHaveBeenCalled();
                            });
                        }
                    });
                    describe('when the current frame is after the boundary', function () {
                        beforeEach(function () {
                            componentUnderTest.playerState = Object.assign({}, mockPlayerState, { currentFrame: new index_1.Frame(29.97).setFromFrameNumber(test.boundaryFrame ? test.boundaryFrame.frameNumber + 1 : 0) });
                            componentUnderTest.onClick();
                        });
                        if (test.direction === 'reverse') {
                            it('requests a seek to frame 1', function () {
                                expect(componentUnderTest.request.emit)
                                    .toHaveBeenCalledWith({ type: 'SEEK_TO_FRAME', frame: new index_1.Frame(29.97).setFromFrameNumber(1) });
                            });
                        }
                        else if (test.direction === 'forward') {
                            it('does nothing', function () {
                                expect(componentUnderTest.request.emit).not.toHaveBeenCalled();
                            });
                        }
                        else {
                            it('does nothing', function () {
                                expect(componentUnderTest.request.emit).not.toHaveBeenCalled();
                            });
                        }
                    });
                });
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
