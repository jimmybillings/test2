"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var timecode_format_button_component_1 = require("./timecode-format-button.component");
var index_1 = require("../../../../wazee-frame-formatter/index");
function main() {
    describe('Timecode Format Button Component', function () {
        var componentUnderTest;
        beforeEach(function () {
            componentUnderTest = new timecode_format_button_component_1.TimecodeFormatButtonComponent();
            componentUnderTest.request.emit = jasmine.createSpy('request emitter');
        });
        describe('currentTimecodeFormatBaseTranslationKey getter', function () {
            it('returns the correct key for stream-based timecode', function () {
                componentUnderTest.playerState = {
                    timecodeBase: index_1.TimecodeBase.STREAM_BASED, timecodeFormat: index_1.TimecodeFormat.SIMPLE_TIME_CONVERSION
                };
                expect(componentUnderTest.currentTimecodeFormatBaseTranslationKey)
                    .toBe('ASSET.ADV_PLAYER.TIMECODE_FORMAT_BASE_DISPLAY.STREAM_BASED_TIMECODE');
            });
            it('returns the correct key for source-based timecode', function () {
                componentUnderTest.playerState = {
                    timecodeBase: index_1.TimecodeBase.SOURCE_BASED, timecodeFormat: index_1.TimecodeFormat.SIMPLE_TIME_CONVERSION
                };
                expect(componentUnderTest.currentTimecodeFormatBaseTranslationKey)
                    .toBe('ASSET.ADV_PLAYER.TIMECODE_FORMAT_BASE_DISPLAY.SOURCE_BASED_TIMECODE');
            });
            it('returns the correct key for stream-based seconds', function () {
                componentUnderTest.playerState = {
                    timecodeBase: index_1.TimecodeBase.STREAM_BASED, timecodeFormat: index_1.TimecodeFormat.SECONDS
                };
                expect(componentUnderTest.currentTimecodeFormatBaseTranslationKey)
                    .toBe('ASSET.ADV_PLAYER.TIMECODE_FORMAT_BASE_DISPLAY.STREAM_BASED_SECONDS');
            });
            it('returns the correct key for source-based seconds', function () {
                componentUnderTest.playerState = {
                    timecodeBase: index_1.TimecodeBase.SOURCE_BASED, timecodeFormat: index_1.TimecodeFormat.SECONDS
                };
                expect(componentUnderTest.currentTimecodeFormatBaseTranslationKey)
                    .toBe('ASSET.ADV_PLAYER.TIMECODE_FORMAT_BASE_DISPLAY.SOURCE_BASED_SECONDS');
            });
        });
        describe('currentFrame getter', function () {
            it('returns the expected frame', function () {
                componentUnderTest.playerState = { currentFrame: { some: 'frame' } };
                expect(componentUnderTest.currentFrame).toEqual({ some: 'frame' });
            });
        });
        describe('canSelectSourceBased getter', function () {
            it('returns false if the player state has no current frame', function () {
                componentUnderTest.playerState = {};
                expect(componentUnderTest.canSelectSourceBased).toBe(false);
            });
            it('returns false if the player state\'s current frame has a zero offset', function () {
                componentUnderTest.playerState = { currentFrame: { sourceBasedOffsetFrames: 0 } };
                expect(componentUnderTest.canSelectSourceBased).toBe(false);
            });
            it('returns true if the player state\'s current frame has an offset greater than 0', function () {
                componentUnderTest.playerState = { currentFrame: { sourceBasedOffsetFrames: 1 } };
                expect(componentUnderTest.canSelectSourceBased).toBe(true);
            });
        });
        describe('selectStreamBasedTimecode()', function () {
            it('emits the expected request', function () {
                componentUnderTest.selectStreamBasedTimecode();
                expect(componentUnderTest.request.emit).toHaveBeenCalledWith({
                    type: 'CHANGE_TIMECODE_DISPLAY',
                    format: index_1.TimecodeFormat.SIMPLE_TIME_CONVERSION,
                    base: index_1.TimecodeBase.STREAM_BASED
                });
            });
        });
        describe('selectSourceBasedTimecode()', function () {
            it('emits the expected request', function () {
                componentUnderTest.selectSourceBasedTimecode();
                expect(componentUnderTest.request.emit).toHaveBeenCalledWith({
                    type: 'CHANGE_TIMECODE_DISPLAY',
                    format: index_1.TimecodeFormat.SIMPLE_TIME_CONVERSION,
                    base: index_1.TimecodeBase.SOURCE_BASED
                });
            });
        });
        describe('selectStreamBasedSeconds()', function () {
            it('emits the expected request', function () {
                componentUnderTest.selectStreamBasedSeconds();
                expect(componentUnderTest.request.emit).toHaveBeenCalledWith({
                    type: 'CHANGE_TIMECODE_DISPLAY',
                    format: index_1.TimecodeFormat.SECONDS,
                    base: index_1.TimecodeBase.STREAM_BASED
                });
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
