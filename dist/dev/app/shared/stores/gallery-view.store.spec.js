"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("rxjs/Observable");
var reducer_1 = require("../tests/reducer");
var gallery_view_store_1 = require("./gallery-view.store");
function main() {
    var initialState = {
        results: [],
        numberOfLevels: 0,
        path: []
    };
    describe('gallery reducer', function () {
        describe('REPLACE_GALLERY', function () {
            reducer_1.addStandardReducerTestsFor(gallery_view_store_1.gallery, 'REPLACE_GALLERY', initialState);
            it('returns payload when current state is passed in', function () {
                expect(gallery_view_store_1.gallery(initialState, { type: 'REPLACE_GALLERY', payload: { property1: 'new', other: 'stuff' } }))
                    .toEqual({ property1: 'new', other: 'stuff' });
            });
            it('returns payload when current state is not passed in', function () {
                expect(gallery_view_store_1.gallery(undefined, { type: 'REPLACE_GALLERY', payload: { some: 'payload' } }))
                    .toEqual({ some: 'payload' });
            });
            it('returns initial state when payload is not passed in', function () {
                expect(gallery_view_store_1.gallery({ property1: 'existing1', property2: 'existing2' }, { type: 'REPLACE_GALLERY' }))
                    .toEqual(initialState);
            });
        });
    });
    describe('Gallery View Store', function () {
        var storeUnderTest;
        var mockStore;
        beforeEach(function () {
            mockStore = {
                select: jasmine.createSpy('select').and.returnValue(Observable_1.Observable.of({ someKey: 'someValue' })),
                dispatch: jasmine.createSpy('dispatch')
            };
            storeUnderTest = new gallery_view_store_1.GalleryViewStore(mockStore);
        });
        describe('data getter', function () {
            it('accesses the right part of the global store', function () {
                storeUnderTest.data.subscribe();
                expect(mockStore.select).toHaveBeenCalledWith('gallery');
            });
            it('returns the expected data', function () {
                storeUnderTest.data.subscribe(function (data) {
                    expect(data).toEqual({ someKey: 'someValue' });
                });
            });
        });
        describe('state getter', function () {
            it('should return the state', function () {
                expect(storeUnderTest.state).toEqual({ someKey: 'someValue' });
            });
        });
        describe('replaceWith()', function () {
            it('dispatches REPLACE_GALLERY with the expected payload', function () {
                var results = [{ id: 3, name: 'Name 3', resultCount: 42, hasMore: false }];
                var path = [{ ids: [1, 2], names: ['Name 1', 'Name 2'] }];
                storeUnderTest.replaceWith(results, path);
                expect(mockStore.dispatch).toHaveBeenCalledWith({ type: 'REPLACE_GALLERY', payload: { results: results, numberOfLevels: 1, path: path } });
            });
            it('calculates the correct number of levels for a complex results set', function () {
                var results = [
                    {
                        id: 3, name: 'Name 3', resultCount: 42, hasMore: true, children: [
                            {
                                id: 4, name: 'Name 4_1', resultCount: 17, hasMore: true, children: [
                                    { id: 5, name: 'Name 5_1', resultCount: 2, hasMore: false },
                                    { id: 5, name: 'Name 5_2', resultCount: 46, hasMore: false },
                                    { id: 5, name: 'Name 5_3', resultCount: 23, hasMore: false }
                                ]
                            },
                            {
                                id: 4, name: 'Name 4_2', resultCount: 99, hasMore: true, children: [
                                    { id: 5, name: 'Name 5_1', resultCount: 2, hasMore: false },
                                    { id: 5, name: 'Name 5_2', resultCount: 46, hasMore: false },
                                    { id: 5, name: 'Name 5_3', resultCount: 23, hasMore: false }
                                ]
                            }
                        ]
                    }
                ];
                var path = [{ ids: [1, 2], names: ['Name 1', 'Name 2'] }];
                storeUnderTest.replaceWith(results, path);
                expect(mockStore.dispatch).toHaveBeenCalledWith({ type: 'REPLACE_GALLERY', payload: { results: results, numberOfLevels: 3, path: path } });
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
