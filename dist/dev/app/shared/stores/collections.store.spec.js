"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var collections_store_1 = require("./collections.store");
var reducer_1 = require("../tests/reducer");
var Observable_1 = require("rxjs/Observable");
var common_functions_1 = require("../utilities/common.functions");
function main() {
    var initialState = {
        items: [],
        pagination: {
            totalCount: 0,
            currentPage: 1,
            pageSize: 100,
            hasNextPage: false,
            hasPreviousPage: false,
            numberOfPages: 0
        }
    };
    describe('REPLACE_COLLECTIONS', function () {
        reducer_1.addStandardReducerTestsFor(collections_store_1.collections, 'REPLACE_COLLECTIONS', initialState);
        it('returns payload when current state is passed in', function () {
            expect(collections_store_1.collections({ property1: 'existing1', property2: 'existing2' }, { type: 'REPLACE_COLLECTIONS', payload: { property1: 'new', other: 'stuff' } }))
                .toEqual({ property1: 'new', other: 'stuff' });
        });
        it('returns payload when current state is not passed in', function () {
            expect(collections_store_1.collections(undefined, { type: 'REPLACE_COLLECTIONS', payload: { some: 'payload' } }))
                .toEqual({ some: 'payload' });
        });
        it('returns initial state when payload is not passed in', function () {
            expect(collections_store_1.collections({ property1: 'existing1', property2: 'existing2' }, { type: 'REPLACE_COLLECTIONS' }))
                .toEqual(initialState);
        });
    });
    describe('ADD_COLLECTION', function () {
        reducer_1.addStandardReducerTestsFor(collections_store_1.collections, 'ADD_COLLECTION', initialState);
        it('returns current state merged with payload when current state is passed in', function () {
            expect(collections_store_1.collections({ items: [{ collection: '1' }, { collection: '2' }] }, { type: 'ADD_COLLECTION', payload: { collection: '3' } }))
                .toEqual({ items: [{ collection: '1' }, { collection: '2' }, { collection: '3' }] });
        });
        it('returns initial state merged with payload when current state is not passed in', function () {
            var expectedResult = common_functions_1.Common.clone(initialState);
            expectedResult.items = [{ collection: '42' }];
            expect(collections_store_1.collections(undefined, { type: 'ADD_COLLECTION', payload: { collection: '42' } }))
                .toEqual(expectedResult);
        });
        it('returns current state merged with payload when current state does not define items', function () {
            expect(collections_store_1.collections({ some: 'nonitems' }, { type: 'ADD_COLLECTION', payload: { collection: '123' } }))
                .toEqual({ some: 'nonitems', items: [{ collection: '123' }] });
        });
        it('returns current state unchanged when payload is not passed in', function () {
            expect(collections_store_1.collections({ items: [{ collection: '1' }, { collection: '2' }] }, { type: 'ADD_COLLECTION' }))
                .toEqual({ items: [{ collection: '1' }, { collection: '2' }] });
        });
    });
    describe('UPDATE_COLLECTION', function () {
        var tempInitialState = { items: [{ id: 42, content: 'original' }] };
        var tempPayload = { id: 42, content: 'new' };
        reducer_1.addStandardReducerTestsFor(collections_store_1.collections, 'UPDATE_COLLECTION', tempInitialState, tempPayload);
        it('returns current state updated with payload collection when current state is passed in', function () {
            expect(collections_store_1.collections(tempInitialState, { type: 'UPDATE_COLLECTION', payload: tempPayload }))
                .toEqual({ items: [{ id: 42, content: 'new' }] });
        });
        it('returns initial state unchanged when current state is not passed in', function () {
            expect(collections_store_1.collections(undefined, { type: 'UPDATE_COLLECTION', payload: tempPayload }))
                .toEqual(initialState);
        });
        it('returns current state unchanged when payload is a nonexistent collection', function () {
            expect(collections_store_1.collections(tempInitialState, { type: 'UPDATE_COLLECTION', payload: { id: 17, content: 'whatever' } }))
                .toEqual({ items: [{ id: 42, content: 'original' }] });
        });
        it('returns current state unchanged when current state does not define items', function () {
            expect(collections_store_1.collections({ some: 'nonitems' }, { type: 'UPDATE_COLLECTION', payload: tempPayload }))
                .toEqual({ some: 'nonitems' });
        });
        it('returns current state unchanged when payload is not passed in', function () {
            expect(collections_store_1.collections(tempInitialState, { type: 'UPDATE_COLLECTION' }))
                .toEqual(tempInitialState);
        });
    });
    describe('DELETE_COLLECTION', function () {
        var tempInitialState = { items: [{ id: 25, content: 'whatever' }] };
        var tempPayload = 25;
        reducer_1.addStandardReducerTestsFor(collections_store_1.collections, 'DELETE_COLLECTION', tempInitialState, tempPayload);
        it('returns current state minus the collection with the payload ID when current state is passed in', function () {
            expect(collections_store_1.collections({ items: [{ id: 123 }, { id: 456 }] }, { type: 'DELETE_COLLECTION', payload: 123 }))
                .toEqual({ items: [{ id: 456 }] });
        });
        it('returns initial state when current state is not passed in', function () {
            expect(collections_store_1.collections(undefined, { type: 'DELETE_COLLECTION', payload: 123 }))
                .toEqual(initialState);
        });
        it('returns current state unchanged when current state does not define items', function () {
            expect(collections_store_1.collections({ some: 'nonitems' }, { type: 'DELETE_COLLECTION', payload: 99 }))
                .toEqual({ some: 'nonitems' });
        });
        it('returns current state unchanged when payload is not passed in', function () {
            expect(collections_store_1.collections(tempInitialState, { type: 'DELETE_COLLECTION' }))
                .toEqual(tempInitialState);
        });
    });
    describe('DELETE_ALL_COLLECTIONS', function () {
        it('returns initial state when current state is passed in', function () {
            expect(collections_store_1.collections({ property1: 'existing1', property2: 'existing2' }, { type: 'DELETE_ALL_COLLECTIONS' }))
                .toEqual(initialState);
        });
        it('returns initial state when current state is not passed in', function () {
            expect(collections_store_1.collections(undefined, { type: 'DELETE_ALL_COLLECTIONS' }))
                .toEqual(initialState);
        });
    });
}
exports.main = main;
;
describe('Collections Store', function () {
    var storeUnderTest, mockStore;
    beforeEach(function () {
        mockStore = {
            select: jasmine.createSpy('select').and.returnValue(Observable_1.Observable.of({ someKey: 'someValue' })),
            dispatch: jasmine.createSpy('dispatch')
        };
        storeUnderTest = new collections_store_1.CollectionsStore(mockStore);
    });
    describe('data getter', function () {
        it('accesses the right part of the global store', function () {
            storeUnderTest.data.subscribe();
            expect(mockStore.select).toHaveBeenCalledWith('collections');
        });
        it('returns the expected data', function () {
            storeUnderTest.data.subscribe(function (data) {
                expect(data).toEqual({ someKey: 'someValue' });
            });
        });
    });
    describe('state getter', function () {
        it('should return the state', function () {
            expect(storeUnderTest.state).toEqual({ someKey: 'someValue' });
        });
    });
    describe('deleteAllCollections()', function () {
        it('should dispatch DELETE_ALL_COLLECTIONS', function () {
            storeUnderTest.deleteAllCollections();
            expect(mockStore.dispatch).toHaveBeenCalledWith({ type: 'DELETE_ALL_COLLECTIONS' });
        });
    });
    describe('deleteCollectionWith()', function () {
        it('should dispatch DELETE_COLLECTION with the collectionId', function () {
            storeUnderTest.deleteCollectionWith(123);
            expect(mockStore.dispatch).toHaveBeenCalledWith({ type: 'DELETE_COLLECTION', payload: 123 });
        });
    });
    describe('add()', function () {
        it('should dispatch ADD_COLLECTION with the new collection', function () {
            var newCollection = { id: 1, name: 'Cat', owner: 12, lastUpdated: null, createdOn: null, siteName: 'core' };
            storeUnderTest.add(newCollection);
            expect(mockStore.dispatch).toHaveBeenCalledWith({ type: 'ADD_COLLECTION', payload: newCollection });
        });
    });
    describe('update()', function () {
        it('should dispatch UPDATE_COLLECTION with the updated collection', function () {
            var updatedCollection = { id: 1, name: 'Dog', owner: 12, lastUpdated: null, createdOn: null, siteName: 'core' };
            storeUnderTest.update(updatedCollection);
            expect(mockStore.dispatch).toHaveBeenCalledWith({ type: 'UPDATE_COLLECTION', payload: updatedCollection });
        });
    });
    describe('replaceAllCollectionsWith()', function () {
        it('should replace with the items passed in', function () {
            var collection = { id: 1, name: 'Dogs', owner: 12, lastUpdated: null, createdOn: null, siteName: 'core' };
            var replacements = {
                items: [collection], totalCount: 1, currentPage: 0,
                hasNextPage: false, hasPreviousPage: false, numberOfPages: 1, pageSize: 1
            };
            storeUnderTest.replaceAllCollectionsWith(replacements);
            expect(mockStore.dispatch).toHaveBeenCalledWith({
                type: 'REPLACE_COLLECTIONS',
                payload: {
                    items: [collection],
                    pagination: { totalCount: 1, currentPage: 1, hasNextPage: false, hasPreviousPage: false, numberOfPages: 1, pageSize: 1 }
                }
            });
        });
        it('should replace with an empty array if there are no items', function () {
            var replacements = { totalCount: 0, currentPage: 0, hasNextPage: false, hasPreviousPage: false, numberOfPages: 1, pageSize: 0 };
            storeUnderTest.replaceAllCollectionsWith(replacements);
            expect(mockStore.dispatch).toHaveBeenCalledWith({
                type: 'REPLACE_COLLECTIONS',
                payload: {
                    items: [],
                    pagination: { totalCount: 0, currentPage: 1, hasNextPage: false, hasPreviousPage: false, numberOfPages: 1, pageSize: 0 }
                }
            });
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
