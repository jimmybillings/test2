"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dateRange_1 = require("./dateRange");
function main() {
    describe('Date Range', function () {
        var rangeUnderTest;
        beforeEach(function () {
            rangeUnderTest = new dateRange_1.DateRange();
        });
        describe('get()', function () {
            it('returns the start value for "start"', function () {
                rangeUnderTest.start = '2000-01-01';
                expect(rangeUnderTest.get('start')).toEqual('2000-01-01');
            });
            it('returns the end value for "end"', function () {
                rangeUnderTest.end = '2000-12-31';
                expect(rangeUnderTest.get('end')).toEqual('2000-12-31');
            });
            it('throws an error for an unknown range key', function () {
                expect(function () { return rangeUnderTest.get('huh?'); }).toThrowError(TypeError);
            });
        });
        describe('set()', function () {
            it('sets the start value', function () {
                rangeUnderTest.set('start', '2001-02-03');
                expect(rangeUnderTest.start).toEqual('2001-02-03');
                expect(rangeUnderTest.end).toBeNull();
            });
            it('sets the start value to null for the beginning of time', function () {
                rangeUnderTest.set('start', '1000-01-01');
                expect(rangeUnderTest.start).toBeNull();
            });
            it('formats the start value', function () {
                rangeUnderTest.set('start', 'Feb 3 2001');
                expect(rangeUnderTest.start).toEqual('2001-02-03');
            });
            it('sets the end value', function () {
                rangeUnderTest.set('end', '2001-03-04');
                expect(rangeUnderTest.start).toBeNull();
                expect(rangeUnderTest.end).toEqual('2001-03-04');
            });
            it('sets the end value to null for the end of time', function () {
                rangeUnderTest.set('end', '3000-01-01');
                expect(rangeUnderTest.end).toBeNull();
            });
            it('formats the end value', function () {
                rangeUnderTest.set('end', 'Mar 4 2001');
                expect(rangeUnderTest.end).toEqual('2001-03-04');
            });
            it('sets the start value from a range string', function () {
                rangeUnderTest.set('start', '2001-05-06 - 2001-06-07');
                expect(rangeUnderTest.start).toEqual('2001-05-06');
                expect(rangeUnderTest.end).toBeNull();
            });
            it('sets the end value from a range string', function () {
                rangeUnderTest.set('end', '2001-07-08 - 2001-08-09');
                expect(rangeUnderTest.start).toBeNull();
                expect(rangeUnderTest.end).toEqual('2001-08-09');
            });
            it('throws an error for an unknown range key', function () {
                expect(function () { return rangeUnderTest.set('what?', '2001-03-04'); }).toThrowError(TypeError);
            });
            it('throws an error for an unparseable date', function () {
                expect(function () { return rangeUnderTest.set('start', 'not a date'); }).toThrowError(TypeError);
            });
        });
        describe('toString()', function () {
            it('returns the right range when start and end are set', function () {
                rangeUnderTest.start = '2002-07-07';
                rangeUnderTest.end = '2003-08-08';
                expect(rangeUnderTest.toString()).toEqual('2002-07-07 - 2003-08-08');
            });
            it('returns the right range when only start is set', function () {
                rangeUnderTest.start = '2005-12-12';
                expect(rangeUnderTest.toString()).toEqual('2005-12-12 - 3000-01-01');
            });
            it('returns the right range when only end is set', function () {
                rangeUnderTest.end = '2004-09-09';
                expect(rangeUnderTest.toString()).toEqual('1000-01-01 - 2004-09-09');
            });
            it('returns the right range when neither start nor end is set', function () {
                expect(rangeUnderTest.toString()).toEqual('1000-01-01 - 3000-01-01');
            });
        });
        describe('toHumanString()', function () {
            it('returns the right string when start and end are set', function () {
                rangeUnderTest.start = '2007-05-22';
                rangeUnderTest.end = '2007-05-22';
                expect(rangeUnderTest.toHumanString()).toEqual('5/22/2007 - 5/22/2007');
            });
            it('returns the right string when only start is set', function () {
                rangeUnderTest.start = '2009-04-23';
                expect(rangeUnderTest.toHumanString()).toEqual('On or after 4/23/2009');
            });
            it('returns the right string when only end is set', function () {
                rangeUnderTest.end = '1998-09-27';
                expect(rangeUnderTest.toHumanString()).toEqual('On or before 9/27/1998');
            });
            it('returns the right string when neither start nor end is set', function () {
                expect(rangeUnderTest.toHumanString()).toEqual('Any date');
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
