"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../../shared/modules/wazee-frame-formatter/index");
var enhanced_asset_1 = require("./enhanced-asset");
function main() {
    describe('Enhanced Asset', function () {
        var assetUnderTest;
        var frameRate = 30;
        var frameRateMetadatum = frameRate + " fps";
        var durationInMilliseconds = 9000;
        var durationInFrames = durationInMilliseconds * frameRate / 1000;
        var generateFrameTestsFrom = function (tests, frameGetterName, frameNumberGetterName, millisecondsGetterName, percentageGetterName) {
            if (millisecondsGetterName === void 0) { millisecondsGetterName = undefined; }
            if (percentageGetterName === void 0) { percentageGetterName = undefined; }
            var _loop_1 = function (test) {
                var expectedResultDescription = test.expected ? 'its expected value' : 'undefined';
                it("returns " + expectedResultDescription + " when the asset " + test.condition, function () {
                    Object.assign(assetUnderTest, { metadata: [] }, test.hasOwnProperty('timeStart') ? { timeStart: test.timeStart } : null, test.hasOwnProperty('timeEnd') ? { timeEnd: test.timeEnd } : null);
                    if (test.frameRate)
                        assetUnderTest.metadata[0] = { name: 'Format.FrameRate', value: frameRateMetadatum };
                    if (test.duration)
                        assetUnderTest.metadata[1] = { name: 'Format.Duration', value: "" + durationInMilliseconds };
                    if (test.expectedMilliseconds >= 0) {
                        var expectedFrame = new index_1.Frame(frameRate).setFromSeconds(test.expectedMilliseconds / 1000);
                        expect(assetUnderTest[frameGetterName]).toEqual(expectedFrame);
                        expect(assetUnderTest[frameNumberGetterName]).toEqual(expectedFrame.frameNumber);
                        if (millisecondsGetterName) {
                            expect(assetUnderTest[millisecondsGetterName]).toEqual(test.expectedMilliseconds);
                        }
                        if (percentageGetterName) {
                            expect(assetUnderTest[percentageGetterName])
                                .toEqual(test.duration ? test.expectedMilliseconds * 100 / durationInMilliseconds : 0);
                        }
                    }
                    else {
                        expect(assetUnderTest[frameGetterName]).toBeUndefined();
                        expect(assetUnderTest[frameNumberGetterName]).toBeUndefined();
                        if (millisecondsGetterName) {
                            expect(assetUnderTest[millisecondsGetterName]).toBeUndefined();
                        }
                        if (percentageGetterName) {
                            expect(assetUnderTest[percentageGetterName]).toBe(0);
                        }
                    }
                });
            };
            for (var _i = 0, tests_1 = tests; _i < tests_1.length; _i++) {
                var test = tests_1[_i];
                _loop_1(test);
            }
        };
        var generateMetadataTestsFor = function (getterName, metadataName, getterReturnValues, index) {
            if (index === void 0) { index = -1; }
            var isIndexed = index >= 0;
            var _loop_2 = function (metadataValue) {
                var getterReturnValue = getterReturnValues[metadataValue];
                it("returns the " + (isIndexed ? "metadata value at index " + index : metadataName + " metadata value"), function () {
                    var metadata = [];
                    metadata[isIndexed ? index : 0] = { name: metadataName, value: metadataValue };
                    Object.assign(assetUnderTest, { metadata: metadata });
                    expect(assetUnderTest[getterName]).toEqual(getterReturnValue);
                });
                if (isIndexed) {
                    it('does not care about the metadata name', function () {
                        var metadata = [];
                        metadata[isIndexed ? index : 0] = { name: "Not." + metadataName, value: metadataValue };
                        Object.assign(assetUnderTest, { metadata: metadata });
                        expect(assetUnderTest[getterName]).toEqual(getterReturnValue);
                    });
                }
            };
            for (var _i = 0, _a = Object.keys(getterReturnValues); _i < _a.length; _i++) {
                var metadataValue = _a[_i];
                _loop_2(metadataValue);
            }
            it('returns undefined if the asset is missing the requested metadata', function () {
                expect(assetUnderTest[getterName]).toBeUndefined();
            });
            if (isIndexed) {
                it('returns undefined if the asset has the requested metadata at a different index', function () {
                    var metadata = [];
                    metadata[(isIndexed ? index : 0) + 1] = { name: metadataName, value: 'the metadata value' };
                    Object.assign(assetUnderTest, { metadata: metadata });
                    expect(assetUnderTest[getterName]).toBeUndefined();
                });
            }
            if (!isIndexed) {
                it('caches its value', function () {
                    var metadata = [];
                    metadata[isIndexed ? index : 0] = { name: metadataName, value: 'the metadata value' };
                    Object.assign(assetUnderTest, { metadata: metadata });
                    spyOn(assetUnderTest, 'getMetadataValueFor');
                    var value = assetUnderTest[getterName];
                    value = assetUnderTest[getterName];
                    expect(assetUnderTest.getMetadataValueFor).toHaveBeenCalledTimes(1);
                });
            }
        };
        beforeEach(function () {
            assetUnderTest = new enhanced_asset_1.EnhancedAsset();
        });
        describe('each getter in [durationFrame, durationFrameNumber]', function () {
            var tests = [
                { condition: 'has no duration and no frame rate', expectedMilliseconds: undefined },
                { condition: 'has only a frame rate', frameRate: true, expectedMilliseconds: undefined },
                { condition: 'has only a duration', duration: true, expectedMilliseconds: undefined },
                {
                    condition: 'has a duration and a frame rate',
                    duration: true, frameRate: true, expectedMilliseconds: durationInMilliseconds
                },
            ];
            generateFrameTestsFrom(tests, 'durationFrame', 'durationFrameNumber');
        });
        describe('durationMilliseconds getter', function () {
            generateMetadataTestsFor('durationMilliseconds', 'Format.Duration', { '12345678': 12345678, '12345678.9': 12345678, '00:01:00': undefined });
            it('can handle HH:MM:SS duration metadata when a frame rate is defined', function () {
                Object.assign(assetUnderTest, { metadata: [{ name: 'Format.FrameRate', value: '30 fps' }, { name: 'Format.Duration', value: '00:01:00' }] });
                expect(assetUnderTest.durationMilliseconds).toBe(60000);
            });
        });
        describe('each getter in [subclipDurationFrame, subclipDurationFrameNumber, subclipDurationMilliseconds, subclipDurationPercentage]', function () {
            var tests = [
                { condition: 'has no timeStart, no timeEnd, no duration, and no frame rate', expectedMilliseconds: undefined },
                { condition: 'has only a frame rate', frameRate: true, expectedMilliseconds: undefined },
                { condition: 'has only a duration', duration: true, expectedMilliseconds: undefined },
                {
                    condition: 'has a duration and a frame rate',
                    duration: true, frameRate: true, expectedMilliseconds: durationInMilliseconds
                },
                { condition: 'has only a timeEnd', timeEnd: 6000, expectedMilliseconds: undefined },
                {
                    condition: 'has a timeEnd and a frame rate', timeEnd: 6000, frameRate: true, expectedMilliseconds: 6000 - 0
                },
                { condition: 'has a timeEnd and a duration', timeEnd: 6000, duration: true, expectedMilliseconds: undefined },
                {
                    condition: 'has a timeEnd, a duration, and a frame rate',
                    timeEnd: 6000, duration: true, frameRate: true, expectedMilliseconds: 6000 - 0
                },
                { condition: 'has only a timeStart', timeStart: 3000, expectedMilliseconds: undefined },
                { condition: 'has a timeStart and a frame rate', timeStart: 3000, frameRate: true, expectedMilliseconds: undefined },
                { condition: 'has a timeStart and a duration', timeStart: 3000, duration: true, expectedMilliseconds: undefined },
                {
                    condition: 'has a timeStart, a frame rate, and a duration',
                    timeStart: 3000, frameRate: true, duration: true, expectedMilliseconds: durationInMilliseconds - 3000
                },
                { condition: 'has a timeStart and a timeEnd', timeStart: 3000, timeEnd: 6000, expectedMilliseconds: undefined },
                {
                    condition: 'has a timeStart, a timeEnd, and a frame rate',
                    timeStart: 3000, timeEnd: 6000, frameRate: true, expectedMilliseconds: 6000 - 3000
                },
                {
                    condition: 'has a timeStart, a timeEnd, and a duration',
                    timeStart: 3000, timeEnd: 6000, duration: true, expectedMilliseconds: undefined
                },
                {
                    condition: 'has a timeStart, a timeEnd, a duration, and a frame rate',
                    timeStart: 3000, timeEnd: 6000, duration: true, frameRate: true, expectedMilliseconds: 6000 - 3000
                }
            ];
            generateFrameTestsFrom(tests, 'subclipDurationFrame', 'subclipDurationFrameNumber', 'subclipDurationMilliseconds', 'subclipDurationPercentage');
        });
        describe('each getter in [inMarkerFrame, inMarkerFrameNumber, inMarkerMilliseconds, inMarkerPercentage]', function () {
            var tests = [
                { condition: 'has no timeStart and no frame rate', expectedMilliseconds: undefined },
                { condition: 'has only a frame rate', frameRate: true, expectedMilliseconds: 0 },
                { condition: 'has only a positive timeStart', timeStart: 3000, expectedMilliseconds: undefined },
                { condition: 'has a positive timeStart and a frame rate', timeStart: 3000, frameRate: true, expectedMilliseconds: 3000 },
                { condition: 'has only a zero timeStart', timeStart: 0, expectedMilliseconds: undefined },
                { condition: 'has a zero timeStart and a frame rate', timeStart: 0, frameRate: true, expectedMilliseconds: 0 },
                { condition: 'has only a negative timeStart', timeStart: -1, expectedMilliseconds: undefined },
                { condition: 'has a negative timeStart and a frame rate', timeStart: -1, frameRate: true, expectedMilliseconds: 0 }
            ];
            generateFrameTestsFrom(tests, 'inMarkerFrame', 'inMarkerFrameNumber', 'inMarkerMilliseconds', 'inMarkerPercentage');
        });
        describe('each getter in [outMarkerFrame, outMarkerFrameNumber, outMarkerMilliseconds, outMarkerPercentage]', function () {
            var tests = [
                { condition: 'has no timeEnd, no duration, and no frame rate', expectedMilliseconds: undefined },
                { condition: 'has only a frame rate', frameRate: true, expectedMilliseconds: undefined },
                { condition: 'has only a duration', duration: true, expectedMilliseconds: undefined },
                {
                    condition: 'has a duration and a frame rate',
                    duration: true, frameRate: true, expectedMilliseconds: durationInMilliseconds
                },
                { condition: 'has only a positive timeEnd', timeEnd: 6000, expectedMilliseconds: undefined },
                { condition: 'has a positive timeEnd and a frame rate', timeEnd: 6000, frameRate: true, expectedMilliseconds: 6000 },
                { condition: 'has a positive timeEnd and a duration', timeEnd: 6000, duration: true, expectedMilliseconds: undefined },
                {
                    condition: 'has a positive timeEnd, a duration, and a frame rate',
                    timeEnd: 6000, duration: true, frameRate: true, expectedMilliseconds: 6000
                },
                { condition: 'has only a zero timeEnd', timeEnd: 0, expectedMilliseconds: undefined },
                { condition: 'has a zero timeEnd and a frame rate', timeEnd: 0, frameRate: true, expectedMilliseconds: 0 },
                { condition: 'has a zero timeEnd and a duration', timeEnd: 0, duration: true, expectedMilliseconds: undefined },
                {
                    condition: 'has a zero timeEnd, a duration, and a frame rate',
                    timeEnd: 0, duration: true, frameRate: true, expectedMilliseconds: 0
                },
                { condition: 'has only a negative timeEnd', timeEnd: -2, expectedMilliseconds: undefined },
                { condition: 'has a negative timeEnd and a frame rate', timeEnd: -2, frameRate: true, expectedMilliseconds: undefined },
                { condition: 'has a negative timeEnd and a duration', timeEnd: -2, duration: true, expectedMilliseconds: undefined },
                {
                    condition: 'has a negative timeEnd, a duration, and a frame rate',
                    timeEnd: -2, duration: true, frameRate: true, expectedMilliseconds: durationInMilliseconds
                }
            ];
            generateFrameTestsFrom(tests, 'outMarkerFrame', 'outMarkerFrameNumber', 'outMarkerMilliseconds', 'outMarkerPercentage');
        });
        describe('getMetadataValueFor()', function () {
            beforeEach(function () {
                Object.assign(assetUnderTest, { metadata: [] });
                assetUnderTest.metadata[42] = { name: 'Some.Name', value: 'some value' };
                assetUnderTest.metadata[47] = { name: 'Some.Other.Name', value: 'some other value' };
            });
            it('returns the expected metadata', function () {
                expect(assetUnderTest.getMetadataValueFor('Some.Name')).toEqual('some value');
                expect(assetUnderTest.getMetadataValueFor('Some.Other.Name')).toEqual('some other value');
            });
            it('returns undefined for a name that doesn\'t exist', function () {
                expect(assetUnderTest.getMetadataValueFor('Some.Nonexistent.Name')).toBeUndefined();
            });
            it('returns undefined for a name that doesn\'t have a value', function () {
                assetUnderTest.metadata[0] = { name: 'Yet.Another.Name' };
                expect(assetUnderTest.getMetadataValueFor('Yet.Another.Name')).toBeUndefined();
            });
            it('is not confused by empty elements in the metadata array', function () {
                assetUnderTest.metadata[0] = {};
                expect(assetUnderTest.getMetadataValueFor('Some.Name')).toEqual('some value');
            });
            it('is not confused by undefined elements in the metadata array', function () {
                assetUnderTest.metadata[0] = undefined;
                expect(assetUnderTest.getMetadataValueFor('Some.Name')).toEqual('some value');
            });
            it('is not confused by null elements in the metadata array', function () {
                assetUnderTest.metadata[0] = null;
                expect(assetUnderTest.getMetadataValueFor('Some.Name')).toEqual('some value');
            });
            it('is not confused by unexpected properties in the metadata object', function () {
                assetUnderTest.metadata[42] = { name: 'Some.Name', value: 'some value', other: 'junk', and: 'things' };
                expect(assetUnderTest.getMetadataValueFor('Some.Name')).toEqual('some value');
            });
        });
        describe('convertMetadataValueFor()', function () {
            beforeEach(function () {
                Object.assign(assetUnderTest, { metadata: [] });
            });
            it('returns the return value of the passed-in function applied to the metadata value', function () {
                Object.assign(assetUnderTest, { metadata: [{ name: 'Some.Name', value: '3.14 bottles of beer on the wall' }] });
                expect(assetUnderTest.convertMetadataValueFor('Some.Name', function (value) { return parseFloat(value) * 2; })).toEqual(6.28);
            });
            it('returns undefined if the asset is missing the requested metadata', function () {
                expect(assetUnderTest.convertMetadataValueFor('Some.Name', function (value) { return parseFloat(value) * 2; })).toBeUndefined();
            });
        });
        describe('subclipMarkers getter', function () {
            var tests = [
                { hasFrameRate: false, timeStart: undefined, timeEnd: undefined, expectedIn: false, expectedOut: false },
                { hasFrameRate: false, timeStart: undefined, timeEnd: null, expectedIn: false, expectedOut: false },
                { hasFrameRate: false, timeStart: undefined, timeEnd: -2, expectedIn: false, expectedOut: false },
                { hasFrameRate: false, timeStart: undefined, timeEnd: 2000, expectedIn: false, expectedOut: false },
                { hasFrameRate: false, timeStart: null, timeEnd: undefined, expectedIn: false, expectedOut: false },
                { hasFrameRate: false, timeStart: null, timeEnd: null, expectedIn: false, expectedOut: false },
                { hasFrameRate: false, timeStart: null, timeEnd: -2, expectedIn: false, expectedOut: false },
                { hasFrameRate: false, timeStart: null, timeEnd: 2000, expectedIn: false, expectedOut: false },
                { hasFrameRate: false, timeStart: -1, timeEnd: undefined, expectedIn: false, expectedOut: false },
                { hasFrameRate: false, timeStart: -1, timeEnd: null, expectedIn: false, expectedOut: false },
                { hasFrameRate: false, timeStart: -1, timeEnd: -2, expectedIn: false, expectedOut: false },
                { hasFrameRate: false, timeStart: -1, timeEnd: 2000, expectedIn: false, expectedOut: false },
                { hasFrameRate: false, timeStart: 1000, timeEnd: undefined, expectedIn: false, expectedOut: false },
                { hasFrameRate: false, timeStart: 1000, timeEnd: null, expectedIn: false, expectedOut: false },
                { hasFrameRate: false, timeStart: 1000, timeEnd: -2, expectedIn: false, expectedOut: false },
                { hasFrameRate: false, timeStart: 1000, timeEnd: 2000, expectedIn: false, expectedOut: false },
                { hasFrameRate: true, timeStart: undefined, timeEnd: undefined, expectedIn: false, expectedOut: false },
                { hasFrameRate: true, timeStart: undefined, timeEnd: null, expectedIn: false, expectedOut: false },
                { hasFrameRate: true, timeStart: undefined, timeEnd: -2, expectedIn: false, expectedOut: false },
                { hasFrameRate: true, timeStart: undefined, timeEnd: 2000, expectedIn: false, expectedOut: true },
                { hasFrameRate: true, timeStart: null, timeEnd: undefined, expectedIn: false, expectedOut: false },
                { hasFrameRate: true, timeStart: null, timeEnd: null, expectedIn: false, expectedOut: false },
                { hasFrameRate: true, timeStart: null, timeEnd: -2, expectedIn: false, expectedOut: false },
                { hasFrameRate: true, timeStart: null, timeEnd: 2000, expectedIn: false, expectedOut: true },
                { hasFrameRate: true, timeStart: -1, timeEnd: undefined, expectedIn: false, expectedOut: false },
                { hasFrameRate: true, timeStart: -1, timeEnd: null, expectedIn: false, expectedOut: false },
                { hasFrameRate: true, timeStart: -1, timeEnd: -2, expectedIn: false, expectedOut: false },
                { hasFrameRate: true, timeStart: -1, timeEnd: 2000, expectedIn: false, expectedOut: true },
                { hasFrameRate: true, timeStart: 1000, timeEnd: undefined, expectedIn: true, expectedOut: false },
                { hasFrameRate: true, timeStart: 1000, timeEnd: null, expectedIn: true, expectedOut: false },
                { hasFrameRate: true, timeStart: 1000, timeEnd: -2, expectedIn: true, expectedOut: false },
                { hasFrameRate: true, timeStart: 1000, timeEnd: 2000, expectedIn: true, expectedOut: true },
            ];
            tests.forEach(function (test) {
                var inMarkerFrame = new index_1.Frame(30).setFromFrameNumber(30);
                var outMarkerFrame = new index_1.Frame(30).setFromFrameNumber(60);
                describe("when asset has " + (test.hasFrameRate ? 'a' : 'no') + " frame rate", function () {
                    it("has " + (test.expectedIn ? 'an' : 'no') + " in marker and " + (test.expectedIn ? 'an' : 'no') + " out marker" +
                        (" when timeStart = " + test.timeStart + " and timeEnd = " + test.timeEnd), function () {
                        if (test.hasFrameRate) {
                            Object.assign(assetUnderTest, { metadata: [] });
                            assetUnderTest.metadata[0] = { name: 'Format.FrameRate', value: '30 fps' };
                        }
                        Object.assign(assetUnderTest, { timeStart: test.timeStart, timeEnd: test.timeEnd });
                        expect(assetUnderTest.subclipMarkers).toEqual({
                            in: test.expectedIn ? inMarkerFrame : undefined,
                            out: test.expectedOut ? outMarkerFrame : undefined
                        });
                    });
                });
            });
        });
        describe('title getter', function () {
            generateMetadataTestsFor('title', 'Title', { 'This Is a Title': 'This Is a Title' }, 0);
        });
        describe('description getter', function () {
            generateMetadataTestsFor('description', 'Description', { 'This is a description.': 'This is a description.' }, 1);
        });
        describe('formatType getter', function () {
            generateMetadataTestsFor('formatType', 'TE.DigitalFormat', { 'High Definition': 'High Definition' });
        });
        describe('isImage getter', function () {
            it('returns true for an image', function () {
                Object.assign(assetUnderTest, { resourceClass: 'Image' });
                expect(assetUnderTest.isImage).toBe(true);
            });
            it('returns false for a non-image', function () {
                Object.assign(assetUnderTest, { resourceClass: 'blah' });
                expect(assetUnderTest.isImage).toBe(false);
            });
            it('returns false if the asset is missing resourceClass', function () {
                expect(assetUnderTest.isImage).toBe(false);
            });
        });
        describe('framesPerSecond getter', function () {
            generateMetadataTestsFor('framesPerSecond', 'Format.FrameRate', { '29.97 fps': 29.97 });
        });
        describe('isSubclipped getter', function () {
            var tests = [
                { condition: 'has no timeStart and no timeEnd', expectedResult: false },
                { condition: 'has only a positive timeStart', timeStart: 3000, expectedResult: true },
                { condition: 'has only a zero timeStart', timeStart: 0, expectedResult: true },
                { condition: 'has only a negative timeStart', timeStart: -1, expectedResult: false },
                { condition: 'has only a positive timeEnd', timeEnd: 6000, expectedResult: true },
                { condition: 'has only a zero timeEnd', timeEnd: 0, expectedResult: true },
                { condition: 'has only a negative timeEnd', timeEnd: -2, expectedResult: false },
                { condition: 'has a positive timeStart and a positive timeEnd', timeStart: 3000, timeEnd: 6000, expectedResult: true },
                { condition: 'has a zero timeStart and a positive timeEnd', timeStart: 0, timeEnd: 6000, expectedResult: true },
                { condition: 'has a negative timeStart and a positive timeEnd', timeStart: -1, timeEnd: 6000, expectedResult: true },
                { condition: 'has a positive timeStart and a zero timeEnd', timeStart: 3000, timeEnd: 0, expectedResult: true },
                { condition: 'has a zero timeStart and a zero timeEnd', timeStart: 0, timeEnd: 0, expectedResult: true },
                { condition: 'has a negative timeStart and a zero timeEnd', timeStart: -1, timeEnd: 0, expectedResult: true },
                { condition: 'has a positive timeStart and a negative timeEnd', timeStart: 3000, timeEnd: -2, expectedResult: true },
                { condition: 'has a zero timeStart and a negative timeEnd', timeStart: 0, timeEnd: -2, expectedResult: true },
                { condition: 'has a negative timeStart and a negative timeEnd', timeStart: -1, timeEnd: -2, expectedResult: false }
            ];
            var _loop_3 = function (test) {
                it("returns " + test.expectedResult + " for an asset that " + test.condition, function () {
                    Object.assign(assetUnderTest, { metadata: [] }, test.hasOwnProperty('timeStart') ? { timeStart: test.timeStart } : null, test.hasOwnProperty('timeEnd') ? { timeEnd: test.timeEnd } : null);
                    expect(assetUnderTest.isSubclipped).toBe(test.expectedResult);
                });
            };
            for (var _i = 0, tests_2 = tests; _i < tests_2.length; _i++) {
                var test = tests_2[_i];
                _loop_3(test);
            }
        });
        describe('routerLink()', function () {
            it('Returns correct path for a collection asset', function () {
                Object.assign(assetUnderTest, {
                    assetId: 47,
                    uuid: 'aabb-ccdd-eeff-gghh',
                    type: 'collection',
                    parentId: 1
                });
                expect(assetUnderTest.routerLink).toEqual(["/collections/1/asset/aabb-ccdd-eeff-gghh"]);
            });
            it('Returns correct path for a quote edit asset', function () {
                Object.assign(assetUnderTest, {
                    assetId: 47,
                    uuid: 'aabb-ccdd-eeff-gghh',
                    type: 'quoteEdit'
                });
                expect(assetUnderTest.routerLink).toEqual(["/active-quote/asset/aabb-ccdd-eeff-gghh"]);
            });
            it('Returns correct path for a search asset', function () {
                Object.assign(assetUnderTest, { assetId: 47, type: 'search' });
                expect(assetUnderTest.routerLink).toEqual(["/search/asset/47"]);
            });
            it('Returns correct path for a quote show asset', function () {
                Object.assign(assetUnderTest, {
                    assetId: 47,
                    uuid: 'aabb-ccdd-eeff-gghh',
                    type: 'quoteShow',
                    parentId: 1
                });
                expect(assetUnderTest.routerLink).toEqual(["/quotes/1/asset/aabb-ccdd-eeff-gghh"]);
            });
            it('Returns correct path for a order asset', function () {
                Object.assign(assetUnderTest, {
                    assetId: 47,
                    uuid: 'aabb-ccdd-eeff-gghh',
                    type: 'order',
                    parentId: 1
                });
                expect(assetUnderTest.routerLink).toEqual(["/orders/1/asset/aabb-ccdd-eeff-gghh"]);
            });
            it('Returns correct path for a cart asset', function () {
                Object.assign(assetUnderTest, {
                    assetId: 47,
                    uuid: 'aabb-ccdd-eeff-gghh',
                    type: 'cart'
                });
                expect(assetUnderTest.routerLink).toEqual(["/cart/asset/aabb-ccdd-eeff-gghh"]);
            });
        });
        describe('normalize()', function () {
            it('returns its containing object to enable chaining', function () {
                expect(assetUnderTest.normalize()).toEqual(assetUnderTest);
            });
            describe('name', function () {
                it('is not changed if it already exists', function () {
                    Object.assign(assetUnderTest, { name: 'some name', assetName: 'some other name' });
                    assetUnderTest.normalize();
                    expect(assetUnderTest.name).toEqual('some name');
                });
                it('is updated if it doesn\'t already exist', function () {
                    Object.assign(assetUnderTest, { assetName: 'some other name' });
                    assetUnderTest.normalize();
                    expect(assetUnderTest.name).toEqual('some other name');
                });
            });
            describe('thumbnailUrl', function () {
                it('is not changed if it already exists', function () {
                    Object.assign(assetUnderTest, { thumbnailUrl: 'some URL', thumbnail: { urls: { https: 'some other URL' } } });
                    assetUnderTest.normalize();
                    expect(assetUnderTest.thumbnailUrl).toEqual('some URL');
                });
                it('is updated from the deeply nested object if it doesn\'t already exist', function () {
                    Object.assign(assetUnderTest, { thumbnail: { urls: { https: 'some other URL' } } });
                    assetUnderTest.normalize();
                    expect(assetUnderTest.thumbnailUrl).toEqual('some other URL');
                });
                it('is updated from clipThumbnailUrl if it doesn\'t already exist', function () {
                    Object.assign(assetUnderTest, { clipThumbnailUrl: 'yet another URL' });
                    assetUnderTest.normalize();
                    expect(assetUnderTest.thumbnailUrl).toEqual('yet another URL');
                });
                it('is updated from the deeply nested object if it AND clipThumbnailUrl are both defined for some reason', function () {
                    Object.assign(assetUnderTest, { thumbnail: { urls: { https: 'some other URL' } }, clipThumbnailUrl: 'yet another URL' });
                    assetUnderTest.normalize();
                    expect(assetUnderTest.thumbnailUrl).toEqual('some other URL');
                });
                describe('resourceClass', function () {
                    it('is not changed if it already exists', function () {
                        Object.assign(assetUnderTest, { resourceClass: 'some resourceClass', metadata: [{ name: 'Resource.Class', value: 'some other resourceClass' }] });
                        assetUnderTest.normalize();
                        expect(assetUnderTest.resourceClass).toEqual('some resourceClass');
                    });
                    it('is updated from metadata if it doesn\'t already exist', function () {
                        Object.assign(assetUnderTest, { metadata: [{ name: 'Resource.Class', value: 'some other resourceClass' }] });
                        assetUnderTest.normalize();
                        expect(assetUnderTest.resourceClass).toEqual('some other resourceClass');
                    });
                    it('is undefined if it doesn\'t already exist and is not found in metadata', function () {
                        assetUnderTest.normalize();
                        expect(assetUnderTest.resourceClass).toBeUndefined();
                    });
                });
            });
            describe('timeStart', function () {
                it('is a number if it was defined as a number', function () {
                    Object.assign(assetUnderTest, { timeStart: 42 });
                    assetUnderTest.normalize();
                    expect(assetUnderTest.timeStart).toEqual(42);
                    expect(assetUnderTest.timeStart).toEqual(jasmine.any(Number));
                });
                it('is a number if it was defined as a string', function () {
                    Object.assign(assetUnderTest, { timeStart: '42' });
                    assetUnderTest.normalize();
                    expect(assetUnderTest.timeStart).toEqual(42);
                    expect(assetUnderTest.timeStart).toEqual(jasmine.any(Number));
                });
            });
            describe('timeEnd', function () {
                it('is a number if it was defined as a number', function () {
                    Object.assign(assetUnderTest, { timeEnd: 99 });
                    assetUnderTest.normalize();
                    expect(assetUnderTest.timeEnd).toEqual(99);
                });
                it('is a number if it was defined as a string', function () {
                    Object.assign(assetUnderTest, { timeEnd: '99' });
                    assetUnderTest.normalize();
                    expect(assetUnderTest.timeEnd).toEqual(99);
                });
            });
            describe('metadata', function () {
                it('is not changed if it already exists', function () {
                    Object.assign(assetUnderTest, { metadata: 'some metadata', metaData: 'some other metadata', primary: 'yet another metadata' });
                    assetUnderTest.normalize();
                    expect(assetUnderTest.metadata).toEqual('some metadata');
                });
                it('is updated from metaData (uppercase D) if metadata (lowercase d) doesn\'t already exist', function () {
                    Object.assign(assetUnderTest, { metaData: 'some other metadata' });
                    assetUnderTest.normalize();
                    expect(assetUnderTest.metadata).toEqual('some other metadata');
                });
                it('is updated from primary if metadata doesn\'t already exist', function () {
                    Object.assign(assetUnderTest, { primary: 'yet another metadata' });
                    assetUnderTest.normalize();
                    expect(assetUnderTest.metadata).toEqual('yet another metadata');
                });
                it('favors metaData (uppercase D) over primary if both are defined somehow', function () {
                    Object.assign(assetUnderTest, { metaData: 'some other metadata', primary: 'yet another metadata' });
                    assetUnderTest.normalize();
                    expect(assetUnderTest.metadata).toEqual('some other metadata');
                });
            });
            describe('isViewable getter', function () {
                it('is true when the asset\'s accessPath value is \'ContentFilter\'', function () {
                    Object.assign(assetUnderTest, { accessPath: 'ContentFilter' });
                    expect(assetUnderTest.isViewable).toBe(true);
                });
                it('is false when the asset\'s accessPath value is not \'ContentFilter\'', function () {
                    Object.assign(assetUnderTest, { accessPath: 'NotContentFilter' });
                    expect(assetUnderTest.isViewable).toBe(false);
                });
            });
            describe('isChildOfViewableObject getter', function () {
                it('is true when the asset\'s accessPath value is \'ParentObject\'', function () {
                    Object.assign(assetUnderTest, { accessPath: 'ParentObject' });
                    expect(assetUnderTest.isChildOfViewableObject).toBe(true);
                });
                it('is false when the asset\'s accessPath value is not \'ParentObject\'', function () {
                    Object.assign(assetUnderTest, { accessPath: 'NotParentObject' });
                    expect(assetUnderTest.isChildOfViewableObject).toBe(false);
                });
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
