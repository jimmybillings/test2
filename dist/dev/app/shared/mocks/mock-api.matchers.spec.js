"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mock_api_matchers_1 = require("./mock-api.matchers");
var api_interface_1 = require("../interfaces/api.interface");
function main() {
    describe('Mock Api Matchers', function () {
        var matchers = mock_api_matchers_1.mockApiMatchers;
        var whateverApi = 10836;
        var whateverEndpoint = 'dont_care';
        var apiSpy;
        beforeEach(function () { return apiSpy = jasmine.createSpy('apiSpy'); });
        describe('toHaveBeenCalledWithApi()', function () {
            var matcher = matchers.toHaveBeenCalledWithApi();
            describe('when expecting to have been called with a specific API', function () {
                it('passes when spy was called with a matching API', function () {
                    apiSpy(api_interface_1.Api.Identities, whateverEndpoint);
                    var result = matcher.compare(apiSpy, api_interface_1.Api.Identities);
                    expect(result.pass).toBe(true);
                });
                it('fails when spy was never called', function () {
                    var result = matcher.compare(apiSpy, api_interface_1.Api.Identities);
                    expect(result.pass).toBe(false);
                    expect(result.message)
                        .toEqual("Expected spy to have been called with api = Api.Identities, but it was never called.");
                });
                it('fails when spy was called, but not with the expected API', function () {
                    apiSpy(api_interface_1.Api.Assets, whateverEndpoint);
                    apiSpy(api_interface_1.Api.Orders, whateverEndpoint);
                    var result = matcher.compare(apiSpy, api_interface_1.Api.Identities);
                    expect(result.pass).toBe(false);
                    expect(result.message)
                        .toEqual("Expected spy to have been called with api = Api.Identities, but it was called with Api.Assets, Api.Orders.");
                });
                it('fails when spy was called, but with the wrong argument type', function () {
                    apiSpy('blah', whateverEndpoint);
                    var result = matcher.compare(apiSpy, api_interface_1.Api.Identities);
                    expect(result.pass).toBe(false);
                    expect(result.message)
                        .toEqual('Expected spy to have been called with api = Api.Identities, but it was called with blah.');
                });
            });
            describe('when expecting NOT to have been called with a specific API', function () {
                it('produces appropriate message when spy is called with a matching API', function () {
                    apiSpy(api_interface_1.Api.Identities, whateverEndpoint);
                    var result = matcher.compare(apiSpy, api_interface_1.Api.Identities);
                    expect(result.message)
                        .toEqual("Expected spy not to have been called with api = Api.Identities, but it was.");
                });
            });
        });
        describe('toHaveBeenCalledWithEndpoint()', function () {
            var matcher = matchers.toHaveBeenCalledWithEndpoint();
            describe('when expecting to have been called with a specific endpoint', function () {
                it('passes when spy was called with a matching endpoint', function () {
                    apiSpy(whateverApi, 'end/point');
                    var result = matcher.compare(apiSpy, 'end/point');
                    expect(result.pass).toBe(true);
                });
                it('fails when spy was never called', function () {
                    var result = matcher.compare(apiSpy, 'end/point');
                    expect(result.pass).toBe(false);
                    expect(result.message)
                        .toEqual("Expected spy to have been called with endpoint = 'end/point', but it was never called.");
                });
                it('fails when spy was called, but not with the expected endpoint', function () {
                    apiSpy(whateverApi, 'another/end/point');
                    apiSpy(whateverApi, 'different/end/point');
                    var result = matcher.compare(apiSpy, 'end/point');
                    expect(result.pass).toBe(false);
                    expect(result.message)
                        .toEqual("Expected spy to have been called with endpoint = 'end/point', " +
                        "but it was called with 'another/end/point', 'different/end/point'.");
                });
            });
            describe('when expecting NOT to have been called with a specific endpoint', function () {
                it('produces appropriate message when spy is called with a matching endpoint', function () {
                    apiSpy(whateverApi, 'end/point');
                    var result = matcher.compare(apiSpy, 'end/point');
                    expect(result.message)
                        .toEqual("Expected spy not to have been called with endpoint = 'end/point', but it was.");
                });
            });
        });
        describe('toHaveBeenCalledWithBody()', function () {
            var matcher = matchers.toHaveBeenCalledWithBody();
            describe('when expecting to have been called with a specific body option', function () {
                it('passes when spy was called with a matching body option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { body: { a: 'b' } });
                    var result = matcher.compare(apiSpy, { a: 'b' });
                    expect(result.pass).toBe(true);
                });
                it('fails when spy was never called', function () {
                    var result = matcher.compare(apiSpy, { a: 'b' });
                    expect(result.pass).toBe(false);
                    expect(result.message)
                        .toEqual("Expected spy to have been called with body =\n" + JSON.stringify({ a: 'b' }, null, 2) + "\n, but it was never called.");
                });
                it('fails when spy was called, but without any body option', function () {
                    apiSpy(whateverApi, whateverEndpoint);
                    var result = matcher.compare(apiSpy, { a: 'b' });
                    expect(result.pass).toBe(false);
                    expect(result.message)
                        .toEqual("Expected spy to have been called with body =\n" + JSON.stringify({ a: 'b' }, null, 2) + "\n," +
                        " but it was never called with any body option.");
                });
                it('fails when spy was called, but not with the expected body option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { body: { c: 'd' } });
                    apiSpy(whateverApi, whateverEndpoint, { body: { e: 'f' } });
                    apiSpy(whateverApi, whateverEndpoint);
                    var result = matcher.compare(apiSpy, { a: 'b' });
                    expect(result.pass).toBe(false);
                    expect(result.message)
                        .toEqual("Expected spy to have been called with body =\n" + JSON.stringify({ a: 'b' }, null, 2) + "\n,"
                        + (" but it was called with \n" + JSON.stringify({ c: 'd' }, null, 2) + "\n- and -\n" + JSON.stringify({ e: 'f' }, null, 2) + "."));
                });
            });
            describe('when expecting NOT to have been called with a specific body option', function () {
                it('produces appropriate message when spy is called with a matching body option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { body: { a: 'b' } });
                    var result = matcher.compare(apiSpy, { a: 'b' });
                    expect(result.message)
                        .toEqual("Expected spy not to have been called with body =\n" + JSON.stringify({ a: 'b' }, null, 2) + "\n, but it was.");
                });
            });
            describe('when expecting to have been called with any body option', function () {
                it('passes when spy was called with a body option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { body: { a: 'b' } });
                    var result = matcher.compare(apiSpy, undefined);
                    expect(result.pass).toBe(true);
                });
                it('fails when spy was never called', function () {
                    var result = matcher.compare(apiSpy, undefined);
                    expect(result.pass).toBe(false);
                    expect(result.message).toEqual("Expected spy to have been called with a body option, but it was never called.");
                });
                it('fails when spy was called, but without a body option', function () {
                    apiSpy(whateverApi, whateverEndpoint);
                    var result = matcher.compare(apiSpy, undefined);
                    expect(result.pass).toBe(false);
                    expect(result.message).toEqual('Expected spy to have been called with a body option, but it was not.');
                });
            });
            describe('when expecting NOT to have been called with any body option', function () {
                it('produces appropriate message when spy is called with a body option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { body: { c: 'd' } });
                    var result = matcher.compare(apiSpy, undefined);
                    expect(result.message)
                        .toEqual("Expected spy not to have been called with a body option, " +
                        ("but it was called with \n" + JSON.stringify({ c: 'd' }, null, 2) + "."));
                });
            });
        });
        describe('toHaveBeenCalledWithParameters()', function () {
            var matcher = matchers.toHaveBeenCalledWithParameters();
            describe('when expecting to have been called with a specific parameters option', function () {
                it('passes when spy was called with a matching parameters option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { parameters: { a: 'b' } });
                    var result = matcher.compare(apiSpy, { a: 'b' });
                    expect(result.pass).toBe(true);
                });
                it('fails when spy was never called', function () {
                    var result = matcher.compare(apiSpy, { a: 'b' });
                    expect(result.pass).toBe(false);
                    expect(result.message)
                        .toEqual("Expected spy to have been called with "
                        + ("parameters =\n" + JSON.stringify({ a: 'b' }, null, 2) + "\n, but it was never called."));
                });
                it('fails when spy was called, but without a parameters option', function () {
                    apiSpy(whateverApi, whateverEndpoint);
                    var result = matcher.compare(apiSpy, { a: 'b' });
                    expect(result.pass).toBe(false);
                    expect(result.message)
                        .toEqual("Expected spy to have been called with"
                        + (" parameters =\n" + JSON.stringify({ a: 'b' }, null, 2) + "\n, ")
                        + "but it was never called with any parameters option.");
                });
                it('fails when spy was called, but not with the expected parameters option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { parameters: { c: 'd' } });
                    apiSpy(whateverApi, whateverEndpoint, { parameters: { e: 'f' } });
                    apiSpy(whateverApi, whateverEndpoint);
                    var result = matcher.compare(apiSpy, { a: 'b' });
                    expect(result.pass).toBe(false);
                    expect(result.message)
                        .toEqual("Expected spy to have been called with" +
                        (" parameters =\n" + JSON.stringify({ a: 'b' }, null, 2) + "\n, ") +
                        ("but it was called with \n" + JSON.stringify({ c: 'd' }, null, 2) + "\n- ") +
                        ("and -\n" + JSON.stringify({ e: 'f' }, null, 2) + "."));
                });
            });
            describe('when expecting NOT to have been called with a specific parameters option', function () {
                it('produces appropriate message when spy is called with a matching parameters option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { parameters: { a: 'b' } });
                    var result = matcher.compare(apiSpy, { a: 'b' });
                    expect(result.message)
                        .toEqual("Expected spy not to have been called with parameters =\n" + JSON.stringify({ a: 'b' }, null, 2) + "\n, but it was.");
                });
            });
            describe('when expecting to have been called with any parameters option', function () {
                it('passes when spy was called with a parameters option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { parameters: { a: 'b' } });
                    var result = matcher.compare(apiSpy, undefined);
                    expect(result.pass).toBe(true);
                });
                it('fails when spy was never called', function () {
                    var result = matcher.compare(apiSpy, undefined);
                    expect(result.pass).toBe(false);
                    expect(result.message).toEqual("Expected spy to have been called with a parameters option, but it was never called.");
                });
                it('fails when spy was called, but without a parameters option', function () {
                    apiSpy(whateverApi, whateverEndpoint);
                    var result = matcher.compare(apiSpy, undefined);
                    expect(result.pass).toBe(false);
                    expect(result.message).toEqual('Expected spy to have been called with a parameters option, but it was not.');
                });
            });
            describe('when expecting NOT to have been called with any parameters option', function () {
                it('produces appropriate message when spy was called with parameters option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { parameters: { c: 'd' } });
                    var result = matcher.compare(apiSpy, undefined);
                    expect(result.message)
                        .toEqual("Expected spy not to have been called with a parameters option, "
                        + ("but it was called with \n" + JSON.stringify({ c: 'd' }, null, 2) + "."));
                });
            });
        });
        describe('toHaveBeenCalledWithLoading()', function () {
            var matcher = matchers.toHaveBeenCalledWithLoading();
            describe('when expecting to have been called with a specific loadingIndicator option', function () {
                it('passes when spy was called with a matching loadingIndicator option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { loadingIndicator: true });
                    var result = matcher.compare(apiSpy, true);
                    expect(result.pass).toBe(true);
                });
                it('fails when spy was never called', function () {
                    var result = matcher.compare(apiSpy, true);
                    expect(result.pass).toBe(false);
                    expect(result.message)
                        .toEqual("Expected spy to have been called with loadingIndicator = true, but it was never called.");
                });
                it('fails when spy was called, but without a loadingIndicator option', function () {
                    apiSpy(whateverApi, whateverEndpoint);
                    var result = matcher.compare(apiSpy, true);
                    expect(result.pass).toBe(false);
                    expect(result.message)
                        .toEqual('Expected spy to have been called with loadingIndicator = true, but it was' +
                        ' never called with any loadingIndicator option.');
                });
                it('fails when spy was called, but not with the expected loadingIndicator option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { loadingIndicator: false });
                    apiSpy(whateverApi, whateverEndpoint);
                    var result = matcher.compare(apiSpy, true);
                    expect(result.pass).toBe(false);
                    expect(result.message)
                        .toEqual("Expected spy to have been called with loadingIndicator = true, but it was called with false.");
                });
            });
            describe('when expecting NOT to have been called with a specific loadingIndicator option', function () {
                it('produces appropriate message when spy is called with a matching loadingIndicator option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { loadingIndicator: true });
                    var result = matcher.compare(apiSpy, true);
                    expect(result.message)
                        .toEqual("Expected spy not to have been called with loadingIndicator = true, but it was.");
                });
            });
            describe('when expecting to have been called with any loadingIndicator option', function () {
                it('passes when spy was called with a loadingIndicator option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { loadingIndicator: true });
                    var result = matcher.compare(apiSpy, undefined);
                    expect(result.pass).toBe(true);
                });
                it('fails when spy was never called', function () {
                    var result = matcher.compare(apiSpy, undefined);
                    expect(result.pass).toBe(false);
                    expect(result.message).toEqual("Expected spy to have been called with a loadingIndicator option, but it was never called.");
                });
                it('fails when spy was called, but without a loadingIndicator option', function () {
                    apiSpy(whateverApi, whateverEndpoint);
                    var result = matcher.compare(apiSpy, undefined);
                    expect(result.pass).toBe(false);
                    expect(result.message).toEqual('Expected spy to have been called with a loadingIndicator option, but it was not.');
                });
            });
            describe('when expecting NOT to have been called with any loadingIndicator option', function () {
                it('produces appropriate message when spy is called with a loadingIndicator option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { loadingIndicator: true });
                    var result = matcher.compare(apiSpy, undefined);
                    expect(result.message)
                        .toEqual("Expected spy not to have been called with a loadingIndicator option, but it was called with true.");
                });
            });
        });
        describe('toHaveBeenCalledWithOverridingToken()', function () {
            var matcher = matchers.toHaveBeenCalledWithOverridingToken();
            describe('when expecting to have been called with a specific overridingToken option', function () {
                it('passes when spy was called with a matching overridingToken option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { overridingToken: 'some token' });
                    var result = matcher.compare(apiSpy, 'some token');
                    expect(result.pass).toBe(true);
                });
                it('fails when spy was never called', function () {
                    var result = matcher.compare(apiSpy, 'some token');
                    expect(result.pass).toBe(false);
                    expect(result.message)
                        .toEqual("Expected spy to have been called with overridingToken = 'some token', but it was never called.");
                });
                it('fails when spy was called, but without an overridingToken option', function () {
                    apiSpy(whateverApi, whateverEndpoint);
                    var result = matcher.compare(apiSpy, 'some token');
                    expect(result.pass).toBe(false);
                    expect(result.message)
                        .toEqual("Expected spy to have been called with overridingToken = 'some token', " +
                        "but it was never called with any overridingToken option.");
                });
                it('fails when spy was called, but not with the expected overridingToken option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { overridingToken: 'some other token' });
                    apiSpy(whateverApi, whateverEndpoint);
                    var result = matcher.compare(apiSpy, 'some token');
                    expect(result.pass).toBe(false);
                    expect(result.message)
                        .toEqual("Expected spy to have been called with overridingToken = 'some token', but it was called with 'some other token'.");
                });
            });
            describe('when expecting NOT to have been called with a specific overridingToken option', function () {
                it('produces appropriate message when spy is called with a matching overridingToken option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { overridingToken: 'some token' });
                    var result = matcher.compare(apiSpy, 'some token');
                    expect(result.message)
                        .toEqual("Expected spy not to have been called with overridingToken = 'some token', but it was.");
                });
            });
            describe('when expecting to have been called with any overridingToken option', function () {
                it('passes when spy was called with an overridingToken option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { overridingToken: 'some token' });
                    var result = matcher.compare(apiSpy, undefined);
                    expect(result.pass).toBe(true);
                });
                it('fails when spy was never called', function () {
                    var result = matcher.compare(apiSpy, undefined);
                    expect(result.pass).toBe(false);
                    expect(result.message).toEqual("Expected spy to have been called with an overridingToken option, but it was never called.");
                });
                it('fails when spy was called, but without an overridingToken option', function () {
                    apiSpy(whateverApi, whateverEndpoint);
                    var result = matcher.compare(apiSpy, undefined);
                    expect(result.pass).toBe(false);
                    expect(result.message).toEqual('Expected spy to have been called with an overridingToken option, but it was not.');
                });
            });
            describe('when expecting NOT to have been called with any overridingToken option', function () {
                it('produces appropriate message when spy is called with an overridingToken option', function () {
                    apiSpy(whateverApi, whateverEndpoint, { overridingToken: 'some token' });
                    var result = matcher.compare(apiSpy, undefined);
                    expect(result.message)
                        .toEqual("Expected spy not to have been called with an overridingToken option, but it was called with 'some token'.");
                });
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
