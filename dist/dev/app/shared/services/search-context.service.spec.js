"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var search_context_service_1 = require("./search-context.service");
var Observable_1 = require("rxjs/Observable");
function main() {
    var serviceUnderTest, mockStore, mockRouter;
    beforeEach(function () {
        mockStore = {
            select: jasmine.createSpy('select').and.returnValue(Observable_1.Observable.of({ the: 'store' })),
            dispatch: jasmine.createSpy('dispatch')
        };
        mockRouter = { navigate: jasmine.createSpy('navigate') };
        serviceUnderTest = new search_context_service_1.SearchContext(mockRouter, mockStore);
    });
    describe('Search Context Service', function () {
        describe('instantiation', function () {
            it('Should set up the data instance variable', function () {
                serviceUnderTest.data.subscribe(function (d) { return expect(d).toEqual({ the: 'store' }); });
            });
        });
        describe('new()', function () {
            beforeEach(function () {
                serviceUnderTest.new({ q: 'cat', i: 1, n: 100 });
            });
            it('Should set the store', function () {
                expect(mockStore.dispatch).toHaveBeenCalledWith({
                    type: 'SEARCHCONTEXT.CREATE',
                    payload: { q: 'cat', i: '1', n: '100' }
                });
            });
            it('should call "navigate" on the router', function () {
                expect(mockRouter.navigate).toHaveBeenCalled();
            });
        });
        describe('state getter', function () {
            it('returns the searchContext', function () {
                expect(serviceUnderTest.state).toEqual({ the: 'store' });
            });
        });
        describe('update setter', function () {
            it('updates the store with params', function () {
                serviceUnderTest.update = { q: 'cat', i: 1, n: 100 };
                expect(mockStore.dispatch).toHaveBeenCalledWith({
                    type: 'SEARCHCONTEXT.UPDATE',
                    payload: { q: 'cat', i: '1', n: '100' }
                });
            });
            it('Should have an update setter method that updates the store with decoded params', function () {
                serviceUnderTest.update = { q: 'cats%20and%20dogs', i: 1, n: 100 };
                expect(mockStore.dispatch).toHaveBeenCalledWith({
                    type: 'SEARCHCONTEXT.UPDATE',
                    payload: { q: 'cats and dogs', i: '1', n: '100' }
                });
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zaGFyZWQvc2VydmljZXMvc2VhcmNoLWNvbnRleHQuc2VydmljZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUVBQXlEO0FBQ3pELDhDQUE2QztBQUU3QztJQUNFLElBQUksZ0JBQStCLEVBQUUsU0FBYyxFQUFFLFVBQWUsQ0FBQztJQUVyRSxVQUFVLENBQUM7UUFDVCxTQUFTLEdBQUc7WUFDVixNQUFNLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLHVCQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFDcEYsUUFBUSxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO1NBQ3hDLENBQUM7UUFDRixVQUFVLEdBQUcsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1FBQ3pELGdCQUFnQixHQUFHLElBQUksc0NBQWEsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDOUQsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsd0JBQXdCLEVBQUU7UUFDakMsUUFBUSxDQUFDLGVBQWUsRUFBRTtZQUN4QixFQUFFLENBQUMsMENBQTBDLEVBQUU7Z0JBQzdDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBQyxDQUFNLElBQUssT0FBQSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQW5DLENBQW1DLENBQUMsQ0FBQztZQUNuRixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLE9BQU8sRUFBRTtZQUNoQixVQUFVLENBQUM7Z0JBQ1QsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ25ELENBQUMsQ0FBQyxDQUFDO1lBRUgsRUFBRSxDQUFDLHNCQUFzQixFQUFFO2dCQUN6QixNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLG9CQUFvQixDQUFDO29CQUM5QyxJQUFJLEVBQUUsc0JBQXNCO29CQUM1QixPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRTtpQkFDeEMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFFSCxFQUFFLENBQUMsc0NBQXNDLEVBQUU7Z0JBQ3pDLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUNqRCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLGNBQWMsRUFBRTtZQUN2QixFQUFFLENBQUMsMkJBQTJCLEVBQUU7Z0JBQzlCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUMzRCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLGVBQWUsRUFBRTtZQUN4QixFQUFFLENBQUMsK0JBQStCLEVBQUU7Z0JBQ2xDLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7Z0JBRXJELE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsb0JBQW9CLENBQUM7b0JBQzlDLElBQUksRUFBRSxzQkFBc0I7b0JBQzVCLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFO2lCQUN4QyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztZQUVILEVBQUUsQ0FBQyxnRkFBZ0YsRUFBRTtnQkFDbkYsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxFQUFFLG1CQUFtQixFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO2dCQUVuRSxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLG9CQUFvQixDQUFDO29CQUM5QyxJQUFJLEVBQUUsc0JBQXNCO29CQUM1QixPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRTtpQkFDbEQsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQTlERCxvQkE4REMiLCJmaWxlIjoiYXBwL3NoYXJlZC9zZXJ2aWNlcy9zZWFyY2gtY29udGV4dC5zZXJ2aWNlLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZWFyY2hDb250ZXh0IH0gZnJvbSAnLi9zZWFyY2gtY29udGV4dC5zZXJ2aWNlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFpbigpIHtcbiAgbGV0IHNlcnZpY2VVbmRlclRlc3Q6IFNlYXJjaENvbnRleHQsIG1vY2tTdG9yZTogYW55LCBtb2NrUm91dGVyOiBhbnk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgbW9ja1N0b3JlID0ge1xuICAgICAgc2VsZWN0OiBqYXNtaW5lLmNyZWF0ZVNweSgnc2VsZWN0JykuYW5kLnJldHVyblZhbHVlKE9ic2VydmFibGUub2YoeyB0aGU6ICdzdG9yZScgfSkpLFxuICAgICAgZGlzcGF0Y2g6IGphc21pbmUuY3JlYXRlU3B5KCdkaXNwYXRjaCcpXG4gICAgfTtcbiAgICBtb2NrUm91dGVyID0geyBuYXZpZ2F0ZTogamFzbWluZS5jcmVhdGVTcHkoJ25hdmlnYXRlJykgfTtcbiAgICBzZXJ2aWNlVW5kZXJUZXN0ID0gbmV3IFNlYXJjaENvbnRleHQobW9ja1JvdXRlciwgbW9ja1N0b3JlKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1NlYXJjaCBDb250ZXh0IFNlcnZpY2UnLCAoKSA9PiB7XG4gICAgZGVzY3JpYmUoJ2luc3RhbnRpYXRpb24nLCAoKSA9PiB7XG4gICAgICBpdCgnU2hvdWxkIHNldCB1cCB0aGUgZGF0YSBpbnN0YW5jZSB2YXJpYWJsZScsICgpID0+IHtcbiAgICAgICAgc2VydmljZVVuZGVyVGVzdC5kYXRhLnN1YnNjcmliZSgoZDogYW55KSA9PiBleHBlY3QoZCkudG9FcXVhbCh7IHRoZTogJ3N0b3JlJyB9KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCduZXcoKScsICgpID0+IHtcbiAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBzZXJ2aWNlVW5kZXJUZXN0Lm5ldyh7IHE6ICdjYXQnLCBpOiAxLCBuOiAxMDAgfSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ1Nob3VsZCBzZXQgdGhlIHN0b3JlJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QobW9ja1N0b3JlLmRpc3BhdGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgICAgdHlwZTogJ1NFQVJDSENPTlRFWFQuQ1JFQVRFJyxcbiAgICAgICAgICBwYXlsb2FkOiB7IHE6ICdjYXQnLCBpOiAnMScsIG46ICcxMDAnIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBjYWxsIFwibmF2aWdhdGVcIiBvbiB0aGUgcm91dGVyJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QobW9ja1JvdXRlci5uYXZpZ2F0ZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnc3RhdGUgZ2V0dGVyJywgKCkgPT4ge1xuICAgICAgaXQoJ3JldHVybnMgdGhlIHNlYXJjaENvbnRleHQnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzZXJ2aWNlVW5kZXJUZXN0LnN0YXRlKS50b0VxdWFsKHsgdGhlOiAnc3RvcmUnIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgndXBkYXRlIHNldHRlcicsICgpID0+IHtcbiAgICAgIGl0KCd1cGRhdGVzIHRoZSBzdG9yZSB3aXRoIHBhcmFtcycsICgpID0+IHtcbiAgICAgICAgc2VydmljZVVuZGVyVGVzdC51cGRhdGUgPSB7IHE6ICdjYXQnLCBpOiAxLCBuOiAxMDAgfTtcblxuICAgICAgICBleHBlY3QobW9ja1N0b3JlLmRpc3BhdGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgICAgdHlwZTogJ1NFQVJDSENPTlRFWFQuVVBEQVRFJyxcbiAgICAgICAgICBwYXlsb2FkOiB7IHE6ICdjYXQnLCBpOiAnMScsIG46ICcxMDAnIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ1Nob3VsZCBoYXZlIGFuIHVwZGF0ZSBzZXR0ZXIgbWV0aG9kIHRoYXQgdXBkYXRlcyB0aGUgc3RvcmUgd2l0aCBkZWNvZGVkIHBhcmFtcycsICgpID0+IHtcbiAgICAgICAgc2VydmljZVVuZGVyVGVzdC51cGRhdGUgPSB7IHE6ICdjYXRzJTIwYW5kJTIwZG9ncycsIGk6IDEsIG46IDEwMCB9O1xuXG4gICAgICAgIGV4cGVjdChtb2NrU3RvcmUuZGlzcGF0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgICB0eXBlOiAnU0VBUkNIQ09OVEVYVC5VUERBVEUnLFxuICAgICAgICAgIHBheWxvYWQ6IHsgcTogJ2NhdHMgYW5kIGRvZ3MnLCBpOiAnMScsIG46ICcxMDAnIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXX0=
