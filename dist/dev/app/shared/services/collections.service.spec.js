"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("rxjs/Observable");
var collections_service_1 = require("./collections.service");
var mock_api_service_1 = require("../mocks/mock-api.service");
var api_interface_1 = require("../interfaces/api.interface");
var mock_app_store_1 = require("../../store/spec-helpers/mock-app.store");
function main() {
    describe('Collections service', function () {
        var serviceUnderTest, mockCollectionsStore, mockApi, mockCollection;
        var mockStore;
        mockCollection = {
            lastUpdated: null,
            createdOn: null,
            id: 158,
            siteName: 'core',
            name: 'golf',
            owner: 33,
            tags: ['golf', 'green', 'sport']
        };
        function isActiveCollection(id) { return id === 123; }
        beforeEach(function () {
            jasmine.addMatchers(mock_api_service_1.mockApiMatchers);
            mockApi = new mock_api_service_1.MockApiService();
            mockCollectionsStore = {
                deleteAllCollections: jasmine.createSpy('deleteAllCollections'),
                deleteCollectionWith: jasmine.createSpy('deleteCollectionWith'),
                add: jasmine.createSpy('add'),
                update: jasmine.createSpy('update'),
                replaceAllCollectionsWith: jasmine.createSpy('replaceAllCollectionsWith'),
                state: { items: [{ id: 1 }, { id: 2 }], pagination: {} },
                data: Observable_1.Observable.of({ items: [{ id: 1 }, { id: 2 }], pagination: {} })
            };
            mockStore = new mock_app_store_1.MockAppStore();
            serviceUnderTest = new collections_service_1.CollectionsService(mockCollectionsStore, mockApi.injector, mockStore);
        });
        it('should not sync if there are no collections', function () {
            mockCollectionsStore = {
                deleteAllCollections: jasmine.createSpy('deleteAllCollections'),
                deleteCollectionWith: jasmine.createSpy('deleteCollectionWith'),
                add: jasmine.createSpy('add'),
                update: jasmine.createSpy('update'),
                replaceAllCollectionsWith: jasmine.createSpy('replaceAllCollectionsWith'),
                state: { items: [], pagination: {} },
                data: Observable_1.Observable.of({ items: [], pagination: {} })
            };
            mockStore.createStateElement('activeCollection', 'collection', { items: [] });
            serviceUnderTest = new collections_service_1.CollectionsService(mockCollectionsStore, mockApi.injector, mockStore);
            expect(mockCollectionsStore.update).not.toHaveBeenCalled();
        });
        it('should have a data getter that returns an observable of the store\'s state', function () {
            serviceUnderTest.data.subscribe(function (data) {
                expect(data).toEqual({ items: [{ id: 1 }, { id: 2 }], pagination: {} });
            });
        });
        it('should have a state getter that returns the store\'s state', function () {
            expect(serviceUnderTest.state).toEqual(mockCollectionsStore.state);
        });
        describe('load()', function () {
            it('call the apiService correctly without arguments', function () {
                serviceUnderTest.load();
                expect(mockApi.get).toHaveBeenCalledWithApi(api_interface_1.Api.Assets);
                expect(mockApi.get).toHaveBeenCalledWithEndpoint('collectionSummary/search');
                expect(mockApi.get).toHaveBeenCalledWithParameters({ q: '', accessLevel: 'all', s: '', d: '', i: 0, n: 200 });
                expect(mockApi.get).toHaveBeenCalledWithLoading(false);
            });
            it('call the apiService correctly with arguments', function () {
                serviceUnderTest.load({ q: 'ross', n: 20 }, true);
                expect(mockApi.get).toHaveBeenCalledWithApi(api_interface_1.Api.Assets);
                expect(mockApi.get).toHaveBeenCalledWithEndpoint('collectionSummary/search');
                expect(mockApi.get).toHaveBeenCalledWithParameters({ q: 'ross', accessLevel: 'all', s: '', d: '', i: 0, n: 20 });
                expect(mockApi.get).toHaveBeenCalledWithLoading(true);
            });
            it('should replace collections in the store with the response', function () {
                serviceUnderTest.load().take(1).subscribe();
                expect(mockCollectionsStore.replaceAllCollectionsWith).toHaveBeenCalledWith(mockApi.getResponse);
            });
        });
        describe('create()', function () {
            it('should call the apiService correctly', function () {
                serviceUnderTest.create(mockCollection);
                expect(mockApi.post).toHaveBeenCalledWithApi(api_interface_1.Api.Assets);
                expect(mockApi.post).toHaveBeenCalledWithEndpoint('collectionSummary');
                expect(mockApi.post).toHaveBeenCalledWithBody(mockCollection);
                expect(mockApi.post).toHaveBeenCalledWithLoading(true);
            });
            it('should add the response to the store', function () {
                serviceUnderTest.create(mockCollection).take(1).subscribe();
                expect(mockCollectionsStore.add).toHaveBeenCalledWith(mockApi.postResponse);
            });
        });
        describe('update()', function () {
            it('should call the apiService correctly', function () {
                mockApi.getResponse = { some: 'cart', name: 'old name' };
                serviceUnderTest.update(158, { name: 'new name' }).subscribe();
                expect(mockApi.get).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                expect(mockApi.get).toHaveBeenCalledWithEndpoint('collection/158');
                expect(mockApi.get).toHaveBeenCalledWithLoading('onBeforeRequest');
                expect(mockApi.put).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                expect(mockApi.put).toHaveBeenCalledWithEndpoint('collection/158');
                expect(mockApi.put).toHaveBeenCalledWithBody({ some: 'cart', name: 'new name' });
                expect(mockApi.put).toHaveBeenCalledWithLoading('offAfterResponse');
            });
        });
        describe('delete()', function () {
            it('should delete the corresponding collection from the store', function () {
                serviceUnderTest.delete(123);
                expect(mockCollectionsStore.deleteCollectionWith).toHaveBeenCalledWith(123);
            });
            it('should call the apiService correctly', function () {
                serviceUnderTest.delete(123);
                expect(mockApi.delete).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                expect(mockApi.delete).toHaveBeenCalledWithEndpoint('collection/123');
                expect(mockApi.delete).toHaveBeenCalledWithLoading('onBeforeRequest');
            });
            it('should reload the active collection if the collection being deleted is active', function () {
                mockStore.createStateSection('activeCollection', { loaded: true, collection: { id: 123 } });
                var spy = mockStore.createActionFactoryMethod('activeCollection', 'load');
                serviceUnderTest.delete(123).take(1).subscribe();
                mockStore.expectDispatchFor(spy);
            });
            it('should NOT reload the active collection if the collection being deleted is NOT active', function () {
                mockStore.createStateSection('activeCollection', { loaded: true, collection: { id: 123 } });
                serviceUnderTest.delete(1).take(1).subscribe();
                expect(mockStore.dispatch).not.toHaveBeenCalled();
            });
        });
        describe('reset()', function () {
            it('should call deleteAllCollections() on the collections store', function () {
                serviceUnderTest.reset();
                expect(mockCollectionsStore.deleteAllCollections).toHaveBeenCalled();
            });
            it('does not dispatch an active collection reset action', function () {
                var spy = mockStore.createActionFactoryMethod('activeCollection', 'reset');
                serviceUnderTest.reset();
                mockStore.expectNoDispatchFor(spy);
            });
        });
        describe('destroyAll()', function () {
            it('should call deleteAllCollections() on the collections store', function () {
                mockStore.createActionFactoryMethod('activeCollection', 'reset');
                serviceUnderTest.destroyAll();
                expect(mockCollectionsStore.deleteAllCollections).toHaveBeenCalled();
            });
            it('dispatches an active collection reset action', function () {
                var spy = mockStore.createActionFactoryMethod('activeCollection', 'reset');
                serviceUnderTest.destroyAll();
                mockStore.expectDispatchFor(spy);
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
