"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("rxjs/Observable");
var quotes_service_1 = require("./quotes.service");
var mock_api_service_1 = require("../mocks/mock-api.service");
var api_interface_1 = require("../interfaces/api.interface");
function main() {
    describe('Quotes Service', function () {
        var serviceUnderTest;
        var mockApi;
        var mockCartService;
        var mockQuotesStore;
        beforeEach(function () {
            mockApi = new mock_api_service_1.MockApiService();
            mockCartService = {
                data: Observable_1.Observable.of({ cart: { projects: [] } })
            };
            mockQuotesStore = {
                data: Observable_1.Observable.of([{ id: 3, ownerUserId: 10 }, { id: 12, ownerUserId: 4 }]),
                state: [{ id: 3, ownerUserId: 10 }, { id: 12, ownerUserId: 4 }],
                setQuotes: jasmine.createSpy('setQuotes')
            };
            jasmine.addMatchers(mock_api_service_1.mockApiMatchers);
            serviceUnderTest = new quotes_service_1.QuotesService(mockApi.injector, mockCartService, mockQuotesStore);
        });
        describe('data getter', function () {
            it('should return the right data', function () {
                serviceUnderTest.data.take(1).subscribe(function (d) {
                    expect(d).toEqual([{ id: 3, ownerUserId: 10 }, { id: 12, ownerUserId: 4 }]);
                });
            });
        });
        describe('state getter', function () {
            it('should return the right state', function () {
                expect(serviceUnderTest.state).toEqual([{ id: 3, ownerUserId: 10 }, { id: 12, ownerUserId: 4 }]);
            });
        });
        describe('getQuotes', function () {
            it('should call the api service correctly', function () {
                serviceUnderTest.getQuotes(false, { i: 0, n: 20, s: 'createdOn', d: true }).take(1).subscribe();
                expect(mockApi.get).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApi.get).toHaveBeenCalledWithEndpoint('quote/myQuotes');
                expect(mockApi.get).toHaveBeenCalledWithParameters({ q: '', i: 0, n: 20, s: 'createdOn', d: true });
            });
            it('should update the quotes store', function () {
                serviceUnderTest.getQuotes(false, {}).take(1).subscribe();
                expect(mockQuotesStore.setQuotes).toHaveBeenCalled();
            });
        });
        describe('createEmpty()', function () {
            it('should call the api service correctly', function () {
                serviceUnderTest.createEmpty();
                expect(mockApi.post).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                expect(mockApi.post).toHaveBeenCalledWithEndpoint('quote');
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zaGFyZWQvc2VydmljZXMvcXVvdGVzLnNlcnZpY2Uuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhDQUE2QztBQUU3QyxtREFBaUQ7QUFDakQsOERBQTRFO0FBQzVFLDZEQUFrRDtBQUVsRDtJQUNFLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRTtRQUN6QixJQUFJLGdCQUErQixDQUFDO1FBQ3BDLElBQUksT0FBdUIsQ0FBQztRQUM1QixJQUFJLGVBQW9CLENBQUM7UUFDekIsSUFBSSxlQUFvQixDQUFDO1FBRXpCLFVBQVUsQ0FBQztZQUNULE9BQU8sR0FBRyxJQUFJLGlDQUFjLEVBQUUsQ0FBQztZQUUvQixlQUFlLEdBQUc7Z0JBQ2hCLElBQUksRUFBRSx1QkFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO2FBQ2hELENBQUM7WUFFRixlQUFlLEdBQUc7Z0JBQ2hCLElBQUksRUFBRSx1QkFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUM3RSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQy9ELFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQzthQUMxQyxDQUFDO1lBRUYsT0FBTyxDQUFDLFdBQVcsQ0FBQyxrQ0FBZSxDQUFDLENBQUM7WUFFckMsZ0JBQWdCLEdBQUcsSUFBSSw4QkFBYSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsZUFBZSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FB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bnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XG5cbmltcG9ydCB7IFF1b3Rlc1NlcnZpY2UgfSBmcm9tICcuL3F1b3Rlcy5zZXJ2aWNlJztcbmltcG9ydCB7IE1vY2tBcGlTZXJ2aWNlLCBtb2NrQXBpTWF0Y2hlcnMgfSBmcm9tICcuLi9tb2Nrcy9tb2NrLWFwaS5zZXJ2aWNlJztcbmltcG9ydCB7IEFwaSB9IGZyb20gJy4uL2ludGVyZmFjZXMvYXBpLmludGVyZmFjZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWluKCkge1xuICBkZXNjcmliZSgnUXVvdGVzIFNlcnZpY2UnLCAoKSA9PiB7XG4gICAgbGV0IHNlcnZpY2VVbmRlclRlc3Q6IFF1b3Rlc1NlcnZpY2U7XG4gICAgbGV0IG1vY2tBcGk6IE1vY2tBcGlTZXJ2aWNlO1xuICAgIGxldCBtb2NrQ2FydFNlcnZpY2U6IGFueTtcbiAgICBsZXQgbW9ja1F1b3Rlc1N0b3JlOiBhbnk7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIG1vY2tBcGkgPSBuZXcgTW9ja0FwaVNlcnZpY2UoKTtcblxuICAgICAgbW9ja0NhcnRTZXJ2aWNlID0ge1xuICAgICAgICBkYXRhOiBPYnNlcnZhYmxlLm9mKHsgY2FydDogeyBwcm9qZWN0czogW10gfSB9KVxuICAgICAgfTtcblxuICAgICAgbW9ja1F1b3Rlc1N0b3JlID0ge1xuICAgICAgICBkYXRhOiBPYnNlcnZhYmxlLm9mKFt7IGlkOiAzLCBvd25lclVzZXJJZDogMTAgfSwgeyBpZDogMTIsIG93bmVyVXNlcklkOiA0IH1dKSxcbiAgICAgICAgc3RhdGU6IFt7IGlkOiAzLCBvd25lclVzZXJJZDogMTAgfSwgeyBpZDogMTIsIG93bmVyVXNlcklkOiA0IH1dLFxuICAgICAgICBzZXRRdW90ZXM6IGphc21pbmUuY3JlYXRlU3B5KCdzZXRRdW90ZXMnKVxuICAgICAgfTtcblxuICAgICAgamFzbWluZS5hZGRNYXRjaGVycyhtb2NrQXBpTWF0Y2hlcnMpO1xuXG4gICAgICBzZXJ2aWNlVW5kZXJUZXN0ID0gbmV3IFF1b3Rlc1NlcnZpY2UobW9ja0FwaS5pbmplY3RvciwgbW9ja0NhcnRTZXJ2aWNlLCBtb2NrUXVvdGVzU3RvcmUpO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2RhdGEgZ2V0dGVyJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gdGhlIHJpZ2h0IGRhdGEnLCAoKSA9PiB7XG4gICAgICAgIHNlcnZpY2VVbmRlclRlc3QuZGF0YS50YWtlKDEpLnN1YnNjcmliZShkID0+IHtcbiAgICAgICAgICBleHBlY3QoZCkudG9FcXVhbChbeyBpZDogMywgb3duZXJVc2VySWQ6IDEwIH0sIHsgaWQ6IDEyLCBvd25lclVzZXJJZDogNCB9XSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnc3RhdGUgZ2V0dGVyJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gdGhlIHJpZ2h0IHN0YXRlJywgKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc2VydmljZVVuZGVyVGVzdC5zdGF0ZSkudG9FcXVhbChbeyBpZDogMywgb3duZXJVc2VySWQ6IDEwIH0sIHsgaWQ6IDEyLCBvd25lclVzZXJJZDogNCB9XSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdnZXRRdW90ZXMnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGNhbGwgdGhlIGFwaSBzZXJ2aWNlIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgICAgc2VydmljZVVuZGVyVGVzdC5nZXRRdW90ZXMoZmFsc2UsIHsgaTogMCwgbjogMjAsIHM6ICdjcmVhdGVkT24nLCBkOiB0cnVlIH0pLnRha2UoMSkuc3Vic2NyaWJlKCk7XG4gICAgICAgIGV4cGVjdChtb2NrQXBpLmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGhBcGkoQXBpLk9yZGVycyk7XG4gICAgICAgIGV4cGVjdChtb2NrQXBpLmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGhFbmRwb2ludCgncXVvdGUvbXlRdW90ZXMnKTtcbiAgICAgICAgZXhwZWN0KG1vY2tBcGkuZ2V0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aFBhcmFtZXRlcnMoeyBxOiAnJywgaTogMCwgbjogMjAsIHM6ICdjcmVhdGVkT24nLCBkOiB0cnVlIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgdXBkYXRlIHRoZSBxdW90ZXMgc3RvcmUnLCAoKSA9PiB7XG4gICAgICAgIHNlcnZpY2VVbmRlclRlc3QuZ2V0UXVvdGVzKGZhbHNlLCB7fSkudGFrZSgxKS5zdWJzY3JpYmUoKTtcbiAgICAgICAgZXhwZWN0KG1vY2tRdW90ZXNTdG9yZS5zZXRRdW90ZXMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2NyZWF0ZUVtcHR5KCknLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGNhbGwgdGhlIGFwaSBzZXJ2aWNlIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgICAgc2VydmljZVVuZGVyVGVzdC5jcmVhdGVFbXB0eSgpO1xuXG4gICAgICAgIGV4cGVjdChtb2NrQXBpLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoQXBpKEFwaS5PcmRlcnMpO1xuICAgICAgICBleHBlY3QobW9ja0FwaS5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aEVuZHBvaW50KCdxdW90ZScpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufVxuIl19
