"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("rxjs/Observable");
var mock_api_service_1 = require("../mocks/mock-api.service");
var api_interface_1 = require("../interfaces/api.interface");
var orders_service_1 = require("./orders.service");
function main() {
    describe('Orders Service', function () {
        var serviceUnderTest;
        var mockOrdersStore;
        var mockApi;
        beforeEach(function () {
            jasmine.addMatchers(mock_api_service_1.mockApiMatchers);
            mockOrdersStore = {
                replaceWith: jasmine.createSpy('replaceWith'),
                data: Observable_1.Observable.of({ some: 'data' }),
                state: { some: 'state' },
                storeOrders: jasmine.createSpy('storeOrders')
            };
            mockApi = new mock_api_service_1.MockApiService();
            serviceUnderTest = new orders_service_1.OrdersService(mockApi.injector, mockOrdersStore);
        });
        describe('data getter', function () {
            it('returns the data from the orders store', function () {
                serviceUnderTest.data.subscribe(function (data) {
                    expect(data).toEqual({ some: 'data' });
                });
            });
        });
        describe('getOrders()', function () {
            var params;
            var paramsMinusOne;
            beforeEach(function () {
                params = { i: 5, n: 20 };
                paramsMinusOne = { i: '0', n: '20' };
            });
            it('calls the API service correctly with page number', function () {
                serviceUnderTest.getOrders(params).subscribe(function (res) {
                    expect(mockApi.get).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                    expect(mockApi.get).toHaveBeenCalledWithEndpoint('order/myOrders');
                    expect(mockApi.get).toHaveBeenCalledWithLoading(true);
                    expect(mockApi.get).toHaveBeenCalledWithParameters({ q: '', s: '', d: '', i: 4, n: 20 });
                    expect(mockOrdersStore.storeOrders).toHaveBeenCalledWith(res);
                });
            });
            it('calls the API service correctly without page number', function () {
                params = { n: 20 };
                serviceUnderTest.getOrders(params).subscribe(function (res) {
                    expect(mockApi.get).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                    expect(mockApi.get).toHaveBeenCalledWithEndpoint('order/myOrders');
                    expect(mockApi.get).toHaveBeenCalledWithLoading(true);
                    expect(mockApi.get).toHaveBeenCalledWithParameters({ q: '', s: '', d: '', i: 0, n: 20 });
                    expect(mockOrdersStore.storeOrders).toHaveBeenCalledWith(res);
                });
            });
            it('calls the API service correctly with an invalid page number', function () {
                serviceUnderTest.getOrders({ i: -2, n: 20 }).subscribe(function (res) {
                    expect(mockApi.get).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                    expect(mockApi.get).toHaveBeenCalledWithEndpoint('order/myOrders');
                    expect(mockApi.get).toHaveBeenCalledWithLoading(true);
                    expect(mockApi.get).toHaveBeenCalledWithParameters({ q: '', s: '', d: '', i: 0, n: 20 });
                    expect(mockOrdersStore.storeOrders).toHaveBeenCalledWith(res);
                });
            });
            it('calls the API service correctly with an alternative invalid page number', function () {
                serviceUnderTest.getOrders({ i: 0, n: 20 }).subscribe(function (res) {
                    expect(mockApi.get).toHaveBeenCalledWithApi(api_interface_1.Api.Orders);
                    expect(mockApi.get).toHaveBeenCalledWithEndpoint('order/myOrders');
                    expect(mockApi.get).toHaveBeenCalledWithLoading(true);
                    expect(mockApi.get).toHaveBeenCalledWithParameters({ q: '', s: '', d: '', i: 0, n: 20 });
                    expect(mockOrdersStore.storeOrders).toHaveBeenCalledWith(res);
                });
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
