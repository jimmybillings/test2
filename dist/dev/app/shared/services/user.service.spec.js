"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mock_api_service_1 = require("../../shared/mocks/mock-api.service");
var api_interface_1 = require("../interfaces/api.interface");
var user_service_1 = require("./user.service");
function main() {
    describe('User Service', function () {
        var serviceUnderTest, mockApi, mockCurrentUserService;
        beforeEach(function () {
            jasmine.addMatchers(mock_api_service_1.mockApiMatchers);
            mockApi = new mock_api_service_1.MockApiService();
            mockCurrentUserService = { set: jasmine.createSpy('set') };
            serviceUnderTest = new user_service_1.UserService(mockApi.injector, mockCurrentUserService);
        });
        describe('get()', function () {
            it('Should make a request to get a user', function () {
                serviceUnderTest.get().subscribe(function (res) {
                    expect(mockApi.get).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                    expect(mockApi.get).toHaveBeenCalledWithEndpoint('user/currentUser');
                });
            });
        });
        describe('getById()', function () {
            it('Should make a request to get a user by id', function () {
                serviceUnderTest.getById(1).subscribe(function (res) {
                    expect(mockApi.get).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                    expect(mockApi.get).toHaveBeenCalledWithEndpoint('user/1');
                });
            });
        });
        describe('create()', function () {
            it('Should make a request to create a new user', function () {
                serviceUnderTest.create(setUser()).subscribe(function (res) {
                    expect(mockApi.post).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                    expect(mockApi.post).toHaveBeenCalledWithEndpoint('user/register');
                    expect(mockApi.post).toHaveBeenCalledWithLoading(true);
                    expect(mockApi.post).toHaveBeenCalledWithBody(setUser());
                });
            });
        });
        describe('forgotPassword()', function () {
            it('Should make a request to get a password reset email', function () {
                serviceUnderTest.forgotPassword(setUser()).subscribe(function (res) {
                    expect(mockApi.post).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                    expect(mockApi.post).toHaveBeenCalledWithEndpoint('user/requestPasswordReset');
                    expect(mockApi.post).toHaveBeenCalledWithLoading(true);
                    expect(mockApi.post).toHaveBeenCalledWithBody(setUser());
                });
            });
        });
        describe('resetPassword()', function () {
            it('Should make a request to change a users password with api token', function () {
                serviceUnderTest.resetPassword({ oldPassword: 'abc123', newPassword: 'ABC123' }, '3234234234234').subscribe(function (res) {
                    expect(mockApi.post).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                    expect(mockApi.post).toHaveBeenCalledWithEndpoint('user/passwordReset');
                    expect(mockApi.post).toHaveBeenCalledWithLoading(true);
                    expect(mockApi.post).toHaveBeenCalledWithOverridingToken('3234234234234');
                    expect(mockApi.post).toHaveBeenCalledWithBody({ newPassword: 'ABC123' });
                });
            });
        });
        describe('downloadActiveTosDocument()', function () {
            beforeEach(function () {
                jasmine.addMatchers(mock_api_service_1.mockApiMatchers);
                mockApi = new mock_api_service_1.MockApiService();
                mockApi.getResponse = [{ id: 1, activeVersionId: 'abcd1234', name: 'TOS' }, { text: function () { return 'text'; } }];
                serviceUnderTest = new user_service_1.UserService(mockApi.injector, null);
            });
            it('hits the API correctly', function () {
                serviceUnderTest.downloadActiveTosDocument();
                expect(mockApi.get).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                expect(mockApi.get).toHaveBeenCalledWithEndpoint('document/activeVersion/TOS');
            });
            it('Should flatmap the response to make another request', function () {
                serviceUnderTest.downloadActiveTosDocument().take(1).subscribe(function (data) {
                    expect(data).toBe('text');
                });
                expect(mockApi.get).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                expect(mockApi.get).toHaveBeenCalledWithEndpoint('document/downloadDocumentFile/1');
                expect(mockApi.get).toHaveBeenCalledWithHeaderType('download');
            });
        });
        describe('agreeUserToTerms', function () {
            it('hits the API correctly', function () {
                serviceUnderTest.documentId = 1;
                serviceUnderTest.agreeUserToTerms();
                expect(mockApi.post).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                expect(mockApi.post).toHaveBeenCalledWithEndpoint('document/version/agree');
                expect(mockApi.post).toHaveBeenCalledWithParameters({ documentId: '1' });
            });
        });
        describe('changePassword', function () {
            it('should call the API correctly', function () {
                serviceUnderTest.changePassword({ oldPassword: '123abc', newPassword: 'abc123' });
                expect(mockApi.post).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                expect(mockApi.post).toHaveBeenCalledWithEndpoint('user/changePassword');
                expect(mockApi.post).toHaveBeenCalledWithBody({ oldPassword: '123abc', newPassword: 'abc123' });
                expect(mockApi.post).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('resetPassword', function () {
            it('should call the API correctly', function () {
                serviceUnderTest.resetPassword({ newPassword: 'abc123' }, 'LKJbcd7e2HCD783cd');
                expect(mockApi.post).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                expect(mockApi.post).toHaveBeenCalledWithEndpoint('user/passwordReset');
                expect(mockApi.post).toHaveBeenCalledWithBody({ newPassword: 'abc123' });
                expect(mockApi.post).toHaveBeenCalledWithOverridingToken('LKJbcd7e2HCD783cd');
                expect(mockApi.post).toHaveBeenCalledWithLoading(true);
            });
        });
        describe('getAddresses', function () {
            it('should call the API correctly', function () {
                serviceUnderTest.getAddresses();
                expect(mockApi.get).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                expect(mockApi.get).toHaveBeenCalledWithEndpoint('user/currentUsersAssociatedAddresses');
            });
            it('Should parse the response for easier user by the caller', function () {
                mockApi.getResponse = { list: [{ 'address1': {} }, { 'address2': {} }] };
                serviceUnderTest.getAddresses().subscribe(function (res) {
                    expect(res).toEqual([{ 'address1': {} }, { 'address2': {} }]);
                });
            });
        });
        describe('addBillingAddress()', function () {
            it('should call the API correctly', function () {
                localStorage.setItem('currentUser', JSON.stringify({ id: 1, firstName: 'ross' }));
                spyOn(localStorage, 'setItem');
                var mockAddress = { address: '123 Oak Street' };
                serviceUnderTest.addBillingAddress(mockAddress).take(1).subscribe();
                expect(mockApi.put).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                expect(mockApi.put).toHaveBeenCalledWithEndpoint('user/self');
                expect(mockApi.put).toHaveBeenCalledWithBody({
                    id: 1, firstName: 'ross', billingInfo: { address: { address: '123 Oak Street' } }
                });
                expect(mockCurrentUserService.set).toHaveBeenCalledWith(mockApi.putResponse);
            });
        });
        describe('addAccountBillingAddress', function () {
            it('should call the API service correctly', function () {
                var mockAddress = { addressEntityId: 3, address: { address: '123 Oak Street' } };
                serviceUnderTest.addAccountBillingAddress(mockAddress).take(1).subscribe();
                expect(mockApi.get).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                expect(mockApi.get).toHaveBeenCalledWithEndpoint('account/3');
                expect(mockApi.put).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                expect(mockApi.put).toHaveBeenCalledWithEndpoint('account/3');
                var expectedBody = Object.assign(mockApi.getResponse, { billingInfo: { address: { address: '123 Oak Street' } } });
                expect(mockApi.put).toHaveBeenCalledWithBody(expectedBody);
            });
        });
        describe('getAccount()', function () {
            it('should call the API service correctly', function () {
                serviceUnderTest.getAccount(1).take(1).subscribe();
                expect(mockApi.get).toHaveBeenCalledWithApi(api_interface_1.Api.Identities);
                expect(mockApi.get).toHaveBeenCalledWithEndpoint('account/1');
            });
        });
        function setUser() {
            return {
                'lastUpdated': '2016-01-14T16:46:21Z',
                'createdOn': '2016-01-14T16:46:21Z',
                'id': 6,
                'emailAddress': 'test_email@email.com',
                'password': '5daf7de08c0014ec2baa13a64b35a4e0',
                'firstName': 'first',
                'lastName': 'last',
                'siteName': 'core',
                'accountIds': [4]
            };
        }
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zaGFyZWQvc2VydmljZXMvdXNlci5zZXJ2aWNlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3RUFBc0Y7QUFDdEYsNkRBQWtEO0FBQ2xELCtDQUE2QztBQUU3QztJQUNFLFFBQVEsQ0FBQyxjQUFjLEVBQUU7UUFDdkIsSUFBSSxnQkFBNkIsRUFBRSxPQUF1QixFQUFFLHNCQUEyQixDQUFDO1FBRXhGLFVBQVUsQ0FBQztZQUNULE9BQU8sQ0FBQyxXQUFXLENBQUMsa0NBQWUsQ0FBQyxDQUFDO1lBQ3JDLE9BQU8sR0FBRyxJQUFJLGlDQUFjLEVBQUUsQ0FBQztZQUMvQixzQkFBc0IsR0FBRyxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDM0QsZ0JBQWdCLEdBQUcsSUFBSSwwQkFBVyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztRQUMvRSxDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyxPQUFPLEVBQUU7WUFDaEIsRUFBRSxDQUFDLHFDQUFxQyxFQUFFO2dCQUN4QyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsVUFBQyxHQUFHO29CQUNuQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLG1CQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQzVELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsNEJBQTRCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztnQkFDdkUsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLFdBQVcsRUFBRTtZQUNwQixFQUFFLENBQUMsMkNBQTJDLEVBQUU7Z0JBQzlDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBQyxH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Yy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vY2tBcGlTZXJ2aWNlLCBtb2NrQXBpTWF0Y2hlcnMgfSBmcm9tICcuLi8uLi9zaGFyZWQvbW9ja3MvbW9jay1hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBBcGkgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2FwaS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVXNlclNlcnZpY2UgfSBmcm9tICcuL3VzZXIuc2VydmljZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWluKCkge1xuICBkZXNjcmliZSgnVXNlciBTZXJ2aWNlJywgKCkgPT4ge1xuICAgIGxldCBzZXJ2aWNlVW5kZXJUZXN0OiBVc2VyU2VydmljZSwgbW9ja0FwaTogTW9ja0FwaVNlcnZpY2UsIG1vY2tDdXJyZW50VXNlclNlcnZpY2U6IGFueTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgamFzbWluZS5hZGRNYXRjaGVycyhtb2NrQXBpTWF0Y2hlcnMpO1xuICAgICAgbW9ja0FwaSA9IG5ldyBNb2NrQXBpU2VydmljZSgpO1xuICAgICAgbW9ja0N1cnJlbnRVc2VyU2VydmljZSA9IHsgc2V0OiBqYXNtaW5lLmNyZWF0ZVNweSgnc2V0JykgfTtcbiAgICAgIHNlcnZpY2VVbmRlclRlc3QgPSBuZXcgVXNlclNlcnZpY2UobW9ja0FwaS5pbmplY3RvciwgbW9ja0N1cnJlbnRVc2VyU2VydmljZSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnZ2V0KCknLCAoKSA9PiB7XG4gICAgICBpdCgnU2hvdWxkIG1ha2UgYSByZXF1ZXN0IHRvIGdldCBhIHVzZXInLCAoKSA9PiB7XG4gICAgICAgIHNlcnZpY2VVbmRlclRlc3QuZ2V0KCkuc3Vic2NyaWJlKChyZXMpID0+IHtcbiAgICAgICAgICBleHBlY3QobW9ja0FwaS5nZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoQXBpKEFwaS5JZGVudGl0aWVzKTtcbiAgICAgICAgICBleHBlY3QobW9ja0FwaS5nZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoRW5kcG9pbnQoJ3VzZXIvY3VycmVudFVzZXInKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdnZXRCeUlkKCknLCAoKSA9PiB7XG4gICAgICBpdCgnU2hvdWxkIG1ha2UgYSByZXF1ZXN0IHRvIGdldCBhIHVzZXIgYnkgaWQnLCAoKSA9PiB7XG4gICAgICAgIHNlcnZpY2VVbmRlclRlc3QuZ2V0QnlJZCgxKS5zdWJzY3JpYmUoKHJlcykgPT4ge1xuICAgICAgICAgIGV4cGVjdChtb2NrQXBpLmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGhBcGkoQXBpLklkZW50aXRpZXMpO1xuICAgICAgICAgIGV4cGVjdChtb2NrQXBpLmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGhFbmRwb2ludCgndXNlci8xJyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnY3JlYXRlKCknLCAoKSA9PiB7XG4gICAgICBpdCgnU2hvdWxkIG1ha2UgYSByZXF1ZXN0IHRvIGNyZWF0ZSBhIG5ldyB1c2VyJywgKCkgPT4ge1xuICAgICAgICBzZXJ2aWNlVW5kZXJUZXN0LmNyZWF0ZShzZXRVc2VyKCkpLnN1YnNjcmliZSgocmVzKSA9PiB7XG4gICAgICAgICAgZXhwZWN0KG1vY2tBcGkucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGhBcGkoQXBpLklkZW50aXRpZXMpO1xuICAgICAgICAgIGV4cGVjdChtb2NrQXBpLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoRW5kcG9pbnQoJ3VzZXIvcmVnaXN0ZXInKTtcbiAgICAgICAgICBleHBlY3QobW9ja0FwaS5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aExvYWRpbmcodHJ1ZSk7XG4gICAgICAgICAgZXhwZWN0KG1vY2tBcGkucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGhCb2R5KHNldFVzZXIoKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnZm9yZ290UGFzc3dvcmQoKScsICgpID0+IHtcbiAgICAgIGl0KCdTaG91bGQgbWFrZSBhIHJlcXVlc3QgdG8gZ2V0IGEgcGFzc3dvcmQgcmVzZXQgZW1haWwnLCAoKSA9PiB7XG4gICAgICAgIHNlcnZpY2VVbmRlclRlc3QuZm9yZ290UGFzc3dvcmQoc2V0VXNlcigpKS5zdWJzY3JpYmUoKHJlcykgPT4ge1xuICAgICAgICAgIGV4cGVjdChtb2NrQXBpLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoQXBpKEFwaS5JZGVudGl0aWVzKTtcbiAgICAgICAgICBleHBlY3QobW9ja0FwaS5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aEVuZHBvaW50KCd1c2VyL3JlcXVlc3RQYXNzd29yZFJlc2V0Jyk7XG4gICAgICAgICAgZXhwZWN0KG1vY2tBcGkucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGhMb2FkaW5nKHRydWUpO1xuICAgICAgICAgIGV4cGVjdChtb2NrQXBpLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoQm9keShzZXRVc2VyKCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3Jlc2V0UGFzc3dvcmQoKScsICgpID0+IHtcbiAgICAgIGl0KCdTaG91bGQgbWFrZSBhIHJlcXVlc3QgdG8gY2hhbmdlIGEgdXNlcnMgcGFzc3dvcmQgd2l0aCBhcGkgdG9rZW4nLCAoKSA9PiB7XG4gICAgICAgIHNlcnZpY2VVbmRlclRlc3QucmVzZXRQYXNzd29yZCh7IG9sZFBhc3N3b3JkOiAnYWJjMTIzJywgbmV3UGFzc3dvcmQ6ICdBQkMxMjMnIH0sICczMjM0MjM0MjM0MjM0Jykuc3Vic2NyaWJlKChyZXMpID0+IHtcbiAgICAgICAgICBleHBlY3QobW9ja0FwaS5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aEFwaShBcGkuSWRlbnRpdGllcyk7XG4gICAgICAgICAgZXhwZWN0KG1vY2tBcGkucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGhFbmRwb2ludCgndXNlci9wYXNzd29yZFJlc2V0Jyk7XG4gICAgICAgICAgZXhwZWN0KG1vY2tBcGkucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGhMb2FkaW5nKHRydWUpO1xuICAgICAgICAgIGV4cGVjdChtb2NrQXBpLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoT3ZlcnJpZGluZ1Rva2VuKCczMjM0MjM0MjM0MjM0Jyk7XG4gICAgICAgICAgZXhwZWN0KG1vY2tBcGkucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGhCb2R5KHsgbmV3UGFzc3dvcmQ6ICdBQkMxMjMnIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2Rvd25sb2FkQWN0aXZlVG9zRG9jdW1lbnQoKScsICgpID0+IHtcbiAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBqYXNtaW5lLmFkZE1hdGNoZXJzKG1vY2tBcGlNYXRjaGVycyk7XG4gICAgICAgIG1vY2tBcGkgPSBuZXcgTW9ja0FwaVNlcnZpY2UoKTtcbiAgICAgICAgbW9ja0FwaS5nZXRSZXNwb25zZSA9IFt7IGlkOiAxLCBhY3RpdmVWZXJzaW9uSWQ6ICdhYmNkMTIzNCcsIG5hbWU6ICdUT1MnIH0sIHsgdGV4dDogKCkgPT4geyByZXR1cm4gJ3RleHQnOyB9IH1dO1xuICAgICAgICBzZXJ2aWNlVW5kZXJUZXN0ID0gbmV3IFVzZXJTZXJ2aWNlKG1vY2tBcGkuaW5qZWN0b3IsIG51bGwpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdoaXRzIHRoZSBBUEkgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgICBzZXJ2aWNlVW5kZXJUZXN0LmRvd25sb2FkQWN0aXZlVG9zRG9jdW1lbnQoKTtcbiAgICAgICAgZXhwZWN0KG1vY2tBcGkuZ2V0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aEFwaShBcGkuSWRlbnRpdGllcyk7XG4gICAgICAgIGV4cGVjdChtb2NrQXBpLmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGhFbmRwb2ludCgnZG9jdW1lbnQvYWN0aXZlVmVyc2lvbi9UT1MnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnU2hvdWxkIGZsYXRtYXAgdGhlIHJlc3BvbnNlIHRvIG1ha2UgYW5vdGhlciByZXF1ZXN0JywgKCkgPT4ge1xuICAgICAgICBzZXJ2aWNlVW5kZXJUZXN0LmRvd25sb2FkQWN0aXZlVG9zRG9jdW1lbnQoKS50YWtlKDEpLnN1YnNjcmliZShkYXRhID0+IHtcbiAgICAgICAgICBleHBlY3QoZGF0YSkudG9CZSgndGV4dCcpO1xuICAgICAgICB9KTtcblxuICAgICAgICBleHBlY3QobW9ja0FwaS5nZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoQXBpKEFwaS5JZGVudGl0aWVzKTtcbiAgICAgICAgZXhwZWN0KG1vY2tBcGkuZ2V0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aEVuZHBvaW50KCdkb2N1bWVudC9kb3dubG9hZERvY3VtZW50RmlsZS8xJyk7XG4gICAgICAgIGV4cGVjdChtb2NrQXBpLmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGhIZWFkZXJUeXBlKCdkb3dubG9hZCcpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnYWdyZWVVc2VyVG9UZXJtcycsICgpID0+IHtcbiAgICAgIGl0KCdoaXRzIHRoZSBBUEkgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgICBzZXJ2aWNlVW5kZXJUZXN0LmRvY3VtZW50SWQgPSAxO1xuICAgICAgICBzZXJ2aWNlVW5kZXJUZXN0LmFncmVlVXNlclRvVGVybXMoKTtcblxuICAgICAgICBleHBlY3QobW9ja0FwaS5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aEFwaShBcGkuSWRlbnRpdGllcyk7XG4gICAgICAgIGV4cGVjdChtb2NrQXBpLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoRW5kcG9pbnQoJ2RvY3VtZW50L3ZlcnNpb24vYWdyZWUnKTtcbiAgICAgICAgZXhwZWN0KG1vY2tBcGkucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGhQYXJhbWV0ZXJzKHsgZG9jdW1lbnRJZDogJzEnIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnY2hhbmdlUGFzc3dvcmQnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGNhbGwgdGhlIEFQSSBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICAgIHNlcnZpY2VVbmRlclRlc3QuY2hhbmdlUGFzc3dvcmQoeyBvbGRQYXNzd29yZDogJzEyM2FiYycsIG5ld1Bhc3N3b3JkOiAnYWJjMTIzJyB9KTtcblxuICAgICAgICBleHBlY3QobW9ja0FwaS5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aEFwaShBcGkuSWRlbnRpdGllcyk7XG4gICAgICAgIGV4cGVjdChtb2NrQXBpLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoRW5kcG9pbnQoJ3VzZXIvY2hhbmdlUGFzc3dvcmQnKTtcbiAgICAgICAgZXhwZWN0KG1vY2tBcGkucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGhCb2R5KHsgb2xkUGFzc3dvcmQ6ICcxMjNhYmMnLCBuZXdQYXNzd29yZDogJ2FiYzEyMycgfSk7XG4gICAgICAgIGV4cGVjdChtb2NrQXBpLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoTG9hZGluZyh0cnVlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3Jlc2V0UGFzc3dvcmQnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGNhbGwgdGhlIEFQSSBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICAgIHNlcnZpY2VVbmRlclRlc3QucmVzZXRQYXNzd29yZCh7IG5ld1Bhc3N3b3JkOiAnYWJjMTIzJyB9LCAnTEtKYmNkN2UySENENzgzY2QnKTtcblxuICAgICAgICBleHBlY3QobW9ja0FwaS5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aEFwaShBcGkuSWRlbnRpdGllcyk7XG4gICAgICAgIGV4cGVjdChtb2NrQXBpLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoRW5kcG9pbnQoJ3VzZXIvcGFzc3dvcmRSZXNldCcpO1xuICAgICAgICBleHBlY3QobW9ja0FwaS5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aEJvZHkoeyBuZXdQYXNzd29yZDogJ2FiYzEyMycgfSk7XG4gICAgICAgIGV4cGVjdChtb2NrQXBpLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoT3ZlcnJpZGluZ1Rva2VuKCdMS0piY2Q3ZTJIQ0Q3ODNjZCcpO1xuICAgICAgICBleHBlY3QobW9ja0FwaS5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aExvYWRpbmcodHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdnZXRBZGRyZXNzZXMnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGNhbGwgdGhlIEFQSSBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICAgIHNlcnZpY2VVbmRlclRlc3QuZ2V0QWRkcmVzc2VzKCk7XG5cbiAgICAgICAgZXhwZWN0KG1vY2tBcGkuZ2V0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aEFwaShBcGkuSWRlbnRpdGllcyk7XG4gICAgICAgIGV4cGVjdChtb2NrQXBpLmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGhFbmRwb2ludCgndXNlci9jdXJyZW50VXNlcnNBc3NvY2lhdGVkQWRkcmVzc2VzJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ1Nob3VsZCBwYXJzZSB0aGUgcmVzcG9uc2UgZm9yIGVhc2llciB1c2VyIGJ5IHRoZSBjYWxsZXInLCAoKSA9PiB7XG4gICAgICAgIG1vY2tBcGkuZ2V0UmVzcG9uc2UgPSB7IGxpc3Q6IFt7ICdhZGRyZXNzMSc6IHt9IH0sIHsgJ2FkZHJlc3MyJzoge30gfV0gfTtcbiAgICAgICAgc2VydmljZVVuZGVyVGVzdC5nZXRBZGRyZXNzZXMoKS5zdWJzY3JpYmUocmVzID0+IHtcbiAgICAgICAgICBleHBlY3QocmVzKS50b0VxdWFsKFt7ICdhZGRyZXNzMSc6IHt9IH0sIHsgJ2FkZHJlc3MyJzoge30gfV0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2FkZEJpbGxpbmdBZGRyZXNzKCknLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGNhbGwgdGhlIEFQSSBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjdXJyZW50VXNlcicsIEpTT04uc3RyaW5naWZ5KHsgaWQ6IDEsIGZpcnN0TmFtZTogJ3Jvc3MnIH0pKTtcbiAgICAgICAgc3B5T24obG9jYWxTdG9yYWdlLCAnc2V0SXRlbScpO1xuICAgICAgICBsZXQgbW9ja0FkZHJlc3M6IGFueSA9IHsgYWRkcmVzczogJzEyMyBPYWsgU3RyZWV0JyB9O1xuICAgICAgICBzZXJ2aWNlVW5kZXJUZXN0LmFkZEJpbGxpbmdBZGRyZXNzKG1vY2tBZGRyZXNzKS50YWtlKDEpLnN1YnNjcmliZSgpO1xuXG4gICAgICAgIGV4cGVjdChtb2NrQXBpLnB1dCkudG9IYXZlQmVlbkNhbGxlZFdpdGhBcGkoQXBpLklkZW50aXRpZXMpO1xuICAgICAgICBleHBlY3QobW9ja0FwaS5wdXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoRW5kcG9pbnQoJ3VzZXIvc2VsZicpO1xuICAgICAgICBleHBlY3QobW9ja0FwaS5wdXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoQm9keSh7XG4gICAgICAgICAgaWQ6IDEsIGZpcnN0TmFtZTogJ3Jvc3MnLCBiaWxsaW5nSW5mbzogeyBhZGRyZXNzOiB7IGFkZHJlc3M6ICcxMjMgT2FrIFN0cmVldCcgfSB9XG4gICAgICAgIH0pO1xuICAgICAgICBleHBlY3QobW9ja0N1cnJlbnRVc2VyU2VydmljZS5zZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKG1vY2tBcGkucHV0UmVzcG9uc2UpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnYWRkQWNjb3VudEJpbGxpbmdBZGRyZXNzJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBjYWxsIHRoZSBBUEkgc2VydmljZSBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICAgIGxldCBtb2NrQWRkcmVzczogYW55ID0geyBhZGRyZXNzRW50aXR5SWQ6IDMsIGFkZHJlc3M6IHsgYWRkcmVzczogJzEyMyBPYWsgU3RyZWV0JyB9IH07XG4gICAgICAgIHNlcnZpY2VVbmRlclRlc3QuYWRkQWNjb3VudEJpbGxpbmdBZGRyZXNzKG1vY2tBZGRyZXNzKS50YWtlKDEpLnN1YnNjcmliZSgpO1xuXG4gICAgICAgIGV4cGVjdChtb2NrQXBpLmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGhBcGkoQXBpLklkZW50aXRpZXMpO1xuICAgICAgICBleHBlY3QobW9ja0FwaS5nZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoRW5kcG9pbnQoJ2FjY291bnQvMycpO1xuICAgICAgICBleHBlY3QobW9ja0FwaS5wdXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoQXBpKEFwaS5JZGVudGl0aWVzKTtcbiAgICAgICAgZXhwZWN0KG1vY2tBcGkucHV0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aEVuZHBvaW50KCdhY2NvdW50LzMnKTtcbiAgICAgICAgbGV0IGV4cGVjdGVkQm9keTogYW55ID0gT2JqZWN0LmFzc2lnbihtb2NrQXBpLmdldFJlc3BvbnNlLCB7IGJpbGxpbmdJbmZvOiB7IGFkZHJlc3M6IHsgYWRkcmVzczogJzEyMyBPYWsgU3RyZWV0JyB9IH0gfSk7XG4gICAgICAgIGV4cGVjdChtb2NrQXBpLnB1dCkudG9IYXZlQmVlbkNhbGxlZFdpdGhCb2R5KGV4cGVjdGVkQm9keSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdnZXRBY2NvdW50KCknLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGNhbGwgdGhlIEFQSSBzZXJ2aWNlIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgICAgc2VydmljZVVuZGVyVGVzdC5nZXRBY2NvdW50KDEpLnRha2UoMSkuc3Vic2NyaWJlKCk7XG5cbiAgICAgICAgZXhwZWN0KG1vY2tBcGkuZ2V0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aEFwaShBcGkuSWRlbnRpdGllcyk7XG4gICAgICAgIGV4cGVjdChtb2NrQXBpLmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGhFbmRwb2ludCgnYWNjb3VudC8xJyk7XG5cbiAgICAgIH0pO1xuICAgIH0pO1xuXG5cbiAgICBmdW5jdGlvbiBzZXRVc2VyKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJ2xhc3RVcGRhdGVkJzogJzIwMTYtMDEtMTRUMTY6NDY6MjFaJyxcbiAgICAgICAgJ2NyZWF0ZWRPbic6ICcyMDE2LTAxLTE0VDE2OjQ2OjIxWicsXG4gICAgICAgICdpZCc6IDYsXG4gICAgICAgICdlbWFpbEFkZHJlc3MnOiAndGVzdF9lbWFpbEBlbWFpbC5jb20nLFxuICAgICAgICAncGFzc3dvcmQnOiAnNWRhZjdkZTA4YzAwMTRlYzJiYWExM2E2NGIzNWE0ZTAnLFxuICAgICAgICAnZmlyc3ROYW1lJzogJ2ZpcnN0JyxcbiAgICAgICAgJ2xhc3ROYW1lJzogJ2xhc3QnLFxuICAgICAgICAnc2l0ZU5hbWUnOiAnY29yZScsXG4gICAgICAgICdhY2NvdW50SWRzJzogWzRdXG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG4iXX0=
