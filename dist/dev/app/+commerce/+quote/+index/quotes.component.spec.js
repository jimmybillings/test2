"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var quotes_component_1 = require("./quotes.component");
var Observable_1 = require("rxjs/Observable");
var mock_app_store_1 = require("../../../store/spec-helpers/mock-app.store");
function main() {
    describe('Quotes Component', function () {
        var componentUnderTest;
        var mockStore;
        var mockQuotesService;
        var mockUserCapabilities;
        var mockRouter;
        var hasPermission;
        var mockDialogService;
        beforeEach(function () {
            hasPermission = false;
            mockUserCapabilities = { administerQuotes: jasmine.createSpy('administerQuotes').and.returnValue(hasPermission) };
            mockQuotesService = {
                data: Observable_1.Observable.of({}),
                getQuotes: jasmine.createSpy('getQuotes').and.returnValue(Observable_1.Observable.of({})),
                setFocused: jasmine.createSpy('setFocused').and.returnValue(Observable_1.Observable.of({})),
                createEmpty: jasmine.createSpy('createEmpty').and.returnValue(Observable_1.Observable.of({}))
            };
            mockRouter = { navigate: jasmine.createSpy('navigate') };
            mockDialogService = { openConfirmationDialog: jasmine.createSpy('openConfirmationDialog') };
            mockStore = new mock_app_store_1.MockAppStore();
            mockStore.createStateSection('uiConfig', { components: { cart: { config: { some: 'config' } } } });
            componentUnderTest = new quotes_component_1.QuotesComponent(mockUserCapabilities, mockQuotesService, mockStore, mockRouter, mockDialogService);
        });
        describe('changePage()', function () {
            it('should call navigate on the router with the proper params', function () {
                componentUnderTest.changePage('3');
                expect(mockRouter.navigate).toHaveBeenCalledWith(['/quotes', { i: '3' }]);
            });
        });
        describe('onSortResults()', function () {
            var mockSort;
            beforeEach(function () {
                mockSort = { sort: { s: 'createdOn', d: true }, value: 'createdNewestFirst', id: 1 };
                componentUnderTest.onSortResults(mockSort);
            });
            it('should set the current sort', function () {
                expect(componentUnderTest.currentSort).toEqual(mockSort);
            });
            it('should call navigate on the router with the proper params', function () {
                expect(mockRouter.navigate).toHaveBeenCalledWith(['/quotes', { s: 'createdOn', d: true }]);
            });
        });
        describe('onFilterResults()', function () {
            var mockFilter;
            beforeEach(function () {
                mockFilter = { id: 1, value: 'active', status: { status: 'active' } };
                componentUnderTest.onFilterResults(mockFilter);
            });
            it('should set the current filter', function () {
                expect(componentUnderTest.currentFilter).toBe(mockFilter);
            });
            it('should call navigate on the router with the correct params', function () {
                expect(mockRouter.navigate).toHaveBeenCalledWith(['/quotes', { status: 'active', i: 1 }]);
            });
        });
        describe('onEditQuote()', function () {
            it('call setFocused() on the quotes service', function () {
                componentUnderTest.onEditQuote(1);
                expect(mockQuotesService.setFocused).toHaveBeenCalledWith(1);
            });
            it('should navigate', function () {
                componentUnderTest.onEditQuote(1);
                expect(mockRouter.navigate).toHaveBeenCalledWith(['/active-quote']);
            });
        });
        describe('onSetAsFocusedQuote()', function () {
            it('call setFocused() on the quotes service', function () {
                componentUnderTest.onSetAsFocusedQuote(1);
                expect(mockQuotesService.setFocused).toHaveBeenCalledWith(1);
            });
        });
        describe('onRejectQuote()', function () {
            it('should call openConfirmationDialog on the dialog service', function () {
                componentUnderTest.onRejectQuote({ id: 1 });
                expect(mockDialogService.openConfirmationDialog).toHaveBeenCalled();
            });
            it('should pass the right config to the dialog service', function () {
                componentUnderTest.onRejectQuote({ id: 1 });
                expect(mockDialogService.openConfirmationDialog).toHaveBeenCalledWith({
                    title: 'QUOTE.REJECT.TITLE',
                    message: 'QUOTE.REJECT.MESSAGE',
                    accept: 'QUOTE.REJECT.ACCEPT',
                    decline: 'QUOTE.REJECT.DECLINE'
                }, jasmine.any(Function));
            });
        });
        describe('createNewQuote', function () {
            beforeEach(function () {
                componentUnderTest.createNewQuote();
            });
            it('should call the createEmpty() method on the quotes service', function () {
                expect(mockQuotesService.createEmpty).toHaveBeenCalled();
            });
            it('should navigate to /commerce/active-quote', function () {
                expect(mockRouter.navigate).toHaveBeenCalledWith(['/active-quote']);
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
