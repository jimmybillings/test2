"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mock_app_store_1 = require("../../../store/spec-helpers/mock-app.store");
var projects_component_1 = require("./projects.component");
function main() {
    describe('Projects', function () {
        var mockLineItem = {
            id: '456',
            price: 0,
            rightsManaged: 'Rights Managed'
        };
        var mockLineItemB = {
            id: '789',
            attributes: [],
            price: 0,
            rightsManaged: 'Royalty Free'
        };
        var classUnderTest;
        var mockDialogService;
        var mockStore;
        beforeEach(function () {
            mockDialogService = {
                openFormDialog: jasmine.createSpy('openFormDialog').and.callFake(function (_, __, onSubmitCallback) {
                    mockDialogService.onSubmitCallback = onSubmitCallback;
                })
            };
            mockStore = new mock_app_store_1.MockAppStore();
            classUnderTest = new projects_component_1.ProjectsComponent(mockDialogService, mockStore);
            classUnderTest.projectsNotify.emit = jasmine.createSpy('projectsNotify');
        });
        describe('rmAssetsHaveAttributes()', function () {
            it('returns false when any lineItems are missing their price attributes', function () {
                var project = { lineItems: [mockLineItem, mockLineItemB] };
                expect(classUnderTest.rmAssetsHaveAttributes(project))
                    .toBe(false);
            });
            it('returns true when all lineItems have price attributes', function () {
                var project = { lineItems: [mockLineItemB] };
                expect(classUnderTest.rmAssetsHaveAttributes(project))
                    .toBe(true);
            });
        });
        describe('projectHasRmAssets()', function () {
            it('returns true when at least one lineItem is a rights manage asset', function () {
                var project = { lineItems: [mockLineItem, mockLineItemB] };
                expect(classUnderTest.projectHasRmAssets(project))
                    .toBe(true);
            });
            it('returns false when no lineItems are rights managed', function () {
                var project = { lineItems: [mockLineItemB] };
                expect(classUnderTest.projectHasRmAssets(project))
                    .toBe(false);
            });
            it('returns false when no there are no lineItems', function () {
                var project = { lineItems: [] };
                expect(classUnderTest.projectHasRmAssets(project))
                    .toBe(false);
            });
        });
        describe('projectsOtherThan()', function () {
            it('returns projects other than the one specified', function () {
                var project1 = { id: '1' };
                var project2 = { id: '2' };
                var project3 = { id: '3' };
                classUnderTest.projects = [project1, project2, project3];
                expect(classUnderTest.projectsOtherThan(project2))
                    .toEqual([project1, project3]);
            });
        });
        describe('lineItemCountFor()', function () {
            it('returns the number of lineitems in the project', function () {
                var project = { lineItems: [{}, {}, {}] };
                expect(classUnderTest.lineItemCountFor(project)).toBe(3);
            });
            it('returns zero if the project has no lineItems defined', function () {
                var project = {};
                expect(classUnderTest.lineItemCountFor(project)).toBe(0);
            });
        });
        describe('addProject()', function () {
            it('emits the proper request event', function () {
                classUnderTest.projectsNotify
                    .subscribe(function (event) {
                    expect(event).toEqual({ type: 'ADD_PROJECT' });
                });
                classUnderTest.addProject();
            });
        });
        describe('remove()', function () {
            it('emits the proper request event', function () {
                var project = { some: 'project' };
                classUnderTest.projectsNotify
                    .subscribe(function (event) {
                    expect(event).toEqual({ type: 'REMOVE_PROJECT', payload: project });
                });
                classUnderTest.onRemove(project);
            });
        });
        describe('onEdit()', function () {
            it('emits the proper request event', function () {
                var project = { a: 'b', c: 'd', e: 'f' };
                classUnderTest.config = {
                    form: {
                        items: [
                            { name: 'a', value: 'x' },
                            { name: 'c', value: 'x' },
                            { name: 'e', value: 'x' }
                        ]
                    }
                };
                classUnderTest.projectsNotify
                    .subscribe(function (event) {
                    expect(event).toEqual({
                        type: 'UPDATE_PROJECT', payload: {
                            project: { a: 'b', c: 'd', e: 'f' },
                            items: [{ name: 'a', value: 'b' }, { name: 'c', value: 'd' }, { name: 'e', value: 'f' }]
                        }
                    });
                });
                classUnderTest.onEdit(project);
            });
            it('does not attempt to emit data if the project is readOnly', function () {
                classUnderTest.readOnly = true;
                var project = { a: 'b', c: 'd', e: 'f' };
                classUnderTest.onEdit(project);
                spyOn(classUnderTest, 'projectsNotify');
                expect(classUnderTest.projectsNotify).not.toHaveBeenCalled();
            });
        });
        describe('delegate()', function () {
            it('forwards events', function () {
                classUnderTest.projectsNotify
                    .subscribe(function (event) {
                    expect(event).toEqual({ type: 'event' });
                });
                classUnderTest.delegate({ type: 'event' });
            });
        });
        describe('onClickAddFeeButtonFor()', function () {
            beforeEach(function () {
                classUnderTest.config = { addQuoteFee: { items: [{ name: 'feeType' }, { name: 'amount' }] } };
                mockStore.createActionFactoryMethod('feeConfig', 'loadFeeConfig');
                mockStore.createStateSection('feeConfig', {
                    initialized: true,
                    feeConfig: {
                        items: [
                            { name: 'fee1', amount: 100 },
                            { name: 'fee2', amount: 200 },
                            { name: 'fee3', amount: .5 },
                            { name: 'fee4', amount: 123.45 },
                            { name: 'fee5', amount: 0 },
                            { name: 'fee6' }
                        ]
                    }
                });
            });
            it('opens a dialog', function () {
                classUnderTest.onClickAddFeeButtonFor({ some: 'project' });
                var expectedItems = [
                    {
                        name: 'feeType',
                        options: 'fee1,fee2,fee3,fee4,fee5,fee6',
                        value: 'fee1',
                        slaveFieldName: 'amount',
                        slaveFieldValues: ['100.00', '200.00', '0.50', '123.45', '0.00', '0.00']
                    },
                    {
                        name: 'amount',
                        value: '100.00'
                    }
                ];
                expect(mockDialogService.openFormDialog).toHaveBeenCalledWith(expectedItems, { title: 'QUOTE.ADD_FEE.HEADER', submitLabel: 'QUOTE.ADD_FEE.SUBMIT' }, jasmine.any(Function));
            });
            it('can open a dialog when UI config form has no amount', function () {
                classUnderTest.config = { addQuoteFee: { items: [{ name: 'feeType' }] } };
                classUnderTest.onClickAddFeeButtonFor({ some: 'project' });
                var expectedItems = [
                    {
                        name: 'feeType',
                        options: 'fee1,fee2,fee3,fee4,fee5,fee6',
                        value: 'fee1'
                    }
                ];
                expect(mockDialogService.openFormDialog).toHaveBeenCalledWith(expectedItems, { title: 'QUOTE.ADD_FEE.HEADER', submitLabel: 'QUOTE.ADD_FEE.SUBMIT' }, jasmine.any(Function));
            });
            it('can open a dialog when UI config form has no fee type', function () {
                classUnderTest.config = { addQuoteFee: { items: [{ whatever: 'stuff' }] } };
                classUnderTest.onClickAddFeeButtonFor({ some: 'project' });
                expect(mockDialogService.openFormDialog).toHaveBeenCalledWith([{ whatever: 'stuff' }], { title: 'QUOTE.ADD_FEE.HEADER', submitLabel: 'QUOTE.ADD_FEE.SUBMIT' }, jasmine.any(Function));
            });
            it('emits the expected event when the dialog is submitted', function () {
                classUnderTest.onClickAddFeeButtonFor({ some: 'project' });
                mockDialogService.onSubmitCallback({ some: 'fee' });
                expect(classUnderTest.projectsNotify.emit).toHaveBeenCalledWith({
                    type: 'ADD_QUOTE_FEE',
                    payload: { project: { some: 'project' }, fee: { some: 'fee' } }
                });
            });
        });
        describe('selectProject()', function () {
            it('updates its config form items', function () {
                var project = { a: 'b', c: 'd', e: 'f' };
                classUnderTest.config = {
                    form: {
                        items: [
                            { name: 'a', value: 'x' },
                            { name: 'c', value: 'x' },
                            { name: 'e', value: 'x' }
                        ]
                    }
                };
                classUnderTest.selectProject(project);
                expect(classUnderTest.config.form.items).toEqual([
                    { name: 'a', value: 'b' },
                    { name: 'c', value: 'd' },
                    { name: 'e', value: 'f' }
                ]);
            });
        });
        describe('onClickBulkImportButton', function () {
            it('emits the projectNotify event with the right type and payload', function () {
                classUnderTest.onClickBulkImportButton({ id: 'abc-123' });
                expect(classUnderTest.projectsNotify.emit).toHaveBeenCalledWith({ type: 'OPEN_BULK_IMPORT_DIALOG', payload: 'abc-123' });
            });
        });
    });
}
exports.main = main;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
