"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var cart_component_1 = require("./cart.component");
var mock_app_store_1 = require("../../store/spec-helpers/mock-app.store");
function main() {
    describe('Cart Component', function () {
        var componentUnderTest;
        var mockCapabilities;
        var mockAppStore;
        var mockCartService;
        var mockChangeDetectorRef;
        beforeEach(function () {
            mockCapabilities = { administerQuotes: function () { return false; } };
            mockAppStore = new mock_app_store_1.MockAppStore();
            mockAppStore.createStateSection('uiConfig', { components: { cartComment: { config: { form: { items: ['config'] } } } } });
            mockAppStore.createActionFactoryMethod('checkout', 'reset');
            mockCartService = { state: { data: { id: 77 } } };
            mockChangeDetectorRef = { markForCheck: function () { } };
            componentUnderTest = new cart_component_1.CartComponent(mockCapabilities, mockAppStore, mockCartService, mockChangeDetectorRef);
        });
        describe('Initialization', function () {
            beforeEach(function () {
                componentUnderTest.ngOnInit();
            });
            it('defines the expected tabs', function () {
                expect(componentUnderTest.tabLabelKeys).toEqual(['cart', 'billing', 'payment', 'confirm']);
            });
            it('disables all but the first tab', function () {
                expect(componentUnderTest.tabEnabled).toEqual([true, false, false, false]);
            });
            it('selects the first tab', function () {
                expect(componentUnderTest.selectedTabIndex).toBe(0);
            });
            it('gets the uiConfig for the comment form', function () {
                expect(componentUnderTest.commentFormConfig).toEqual(['config']);
            });
            it('assigns the commentParentObject instance variable', function () {
                expect(componentUnderTest.commentParentObject).toEqual({ objectType: 'cart', objectId: 77 });
            });
        });
        describe('toggleCommentsVisibility', function () {
            it('toggles the showComments flag', function () {
                expect(componentUnderTest.showComments).toBeNull();
                componentUnderTest.toggleCommentsVisibility();
                expect(componentUnderTest.showComments).toBe(true);
                componentUnderTest.toggleCommentsVisibility();
                expect(componentUnderTest.showComments).toBe(false);
            });
        });
        describe('commentCount', function () {
            it('selects the right part of the store', function () {
                mockAppStore.createStateSection('comment', { cart: { pagination: { totalCount: 1000 } } });
                componentUnderTest.commentCount.take(1).subscribe(function (count) { return expect(count).toBe(1000); });
            });
        });
        describe('onNotification()', function () {
            beforeEach(function () {
                componentUnderTest.ngOnInit();
            });
            describe('GO_TO_NEXT_TAB', function () {
                it('enables the next tab, but no others', function () {
                    componentUnderTest.onNotification({ type: 'GO_TO_NEXT_TAB' });
                    expect(componentUnderTest.tabEnabled).toEqual([true, true, false, false]);
                });
                it('selects the next tab', function (done) {
                    componentUnderTest.onNotification({ type: 'GO_TO_NEXT_TAB' });
                    setTimeout(function (_) {
                        expect(componentUnderTest.selectedTabIndex).toBe(1);
                        done();
                    }, 100);
                });
                it('does not advance beyond the last tab', function (done) {
                    componentUnderTest.selectedTabIndex = 4;
                    componentUnderTest.onNotification({ type: 'GO_TO_NEXT_TAB' });
                    setTimeout(function (_) {
                        expect(componentUnderTest.selectedTabIndex).toBe(4);
                        done();
                    }, 100);
                });
            });
            describe('GO_TO_PREVIOUS_TAB', function () {
                it('selects the previous tab', function () {
                    componentUnderTest.selectedTabIndex = 1;
                    componentUnderTest.onNotification({ type: 'GO_TO_PREVIOUS_TAB' });
                    expect(componentUnderTest.selectedTabIndex).toBe(0);
                });
                it('does not go back beyond the first tab', function () {
                    componentUnderTest.selectedTabIndex = 0;
                    componentUnderTest.onNotification({ type: 'GO_TO_PREVIOUS_TAB' });
                    expect(componentUnderTest.selectedTabIndex).toBe(0);
                });
            });
        });
    });
}
exports.main = main;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC8rY29tbWVyY2UvK2NhcnQvY2FydC5jb21wb25lbnQuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLG1EQUFpRDtBQUNqRCwwRUFBdUU7QUFFdkU7SUFDRSxRQUFRLENBQUMsZ0JBQWdCLEVBQUU7UUFDekIsSUFBSSxrQkFBaUMsQ0FBQztRQUN0QyxJQUFJLGdCQUFxQixDQUFDO1FBQzFCLElBQUksWUFBMEIsQ0FBQztRQUMvQixJQUFJLGVBQW9CLENBQUM7UUFDekIsSUFBSSxxQkFBMEIsQ0FBQztRQUUvQixVQUFVLENBQUM7WUFDVCxnQkFBZ0IsR0FBRyxFQUFFLGdCQUFnQixFQUFFLGNBQU0sT0FBQSxLQUFLLEVBQUwsQ0FBSyxFQUFFLENBQUM7WUFFckQsWUFBWSxHQUFHLElBQUksNkJBQVksRUFBRSxDQUFDO1lBQ2xDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUMxSCxZQUFZLENBQUMseUJBQXlCLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRTVELGVBQWUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDbEQscUJBQXFCLEdBQUcsRUFBRSxZQUFZLEVBQUUsY0FBUSxDQUFDLEVBQUUsQ0FBQztZQUNwRCxrQkFBa0IsR0FBRyxJQUFJLDhCQUFhLENBQ3BDLGdCQUFnQixFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUscUJBQXFCLENBQ3ZFLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixVQUFVLENBQUM7Z0JBQ1Qsa0JB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Q0FBQztnQkFDdEQsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsRUFBRSxDQUFDLHVDQUF1QyxFQUFFO29CQUMxQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7b0JBRXhDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxFQUFFLElBQUksRUFBRSxvQkFBb0IsRUFBRSxDQUFDLENBQUM7b0JBRWxFLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEQsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBekhELG9CQXlIQztBQUFBLENBQUMiLCJmaWxlIjoiYXBwLytjb21tZXJjZS8rY2FydC9jYXJ0LmNvbXBvbmVudC5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XG5cbmltcG9ydCB7IENhcnRDb21wb25lbnQgfSBmcm9tICcuL2NhcnQuY29tcG9uZW50JztcbmltcG9ydCB7IE1vY2tBcHBTdG9yZSB9IGZyb20gJy4uLy4uL3N0b3JlL3NwZWMtaGVscGVycy9tb2NrLWFwcC5zdG9yZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWluKCkge1xuICBkZXNjcmliZSgnQ2FydCBDb21wb25lbnQnLCAoKSA9PiB7XG4gICAgbGV0IGNvbXBvbmVudFVuZGVyVGVzdDogQ2FydENvbXBvbmVudDtcbiAgICBsZXQgbW9ja0NhcGFiaWxpdGllczogYW55O1xuICAgIGxldCBtb2NrQXBwU3RvcmU6IE1vY2tBcHBTdG9yZTtcbiAgICBsZXQgbW9ja0NhcnRTZXJ2aWNlOiBhbnk7XG4gICAgbGV0IG1vY2tDaGFuZ2VEZXRlY3RvclJlZjogYW55O1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBtb2NrQ2FwYWJpbGl0aWVzID0geyBhZG1pbmlzdGVyUXVvdGVzOiAoKSA9PiBmYWxzZSB9O1xuXG4gICAgICBtb2NrQXBwU3RvcmUgPSBuZXcgTW9ja0FwcFN0b3JlKCk7XG4gICAgICBtb2NrQXBwU3RvcmUuY3JlYXRlU3RhdGVTZWN0aW9uKCd1aUNvbmZpZycsIHsgY29tcG9uZW50czogeyBjYXJ0Q29tbWVudDogeyBjb25maWc6IHsgZm9ybTogeyBpdGVtczogWydjb25maWcnXSB9IH0gfSB9IH0pO1xuICAgICAgbW9ja0FwcFN0b3JlLmNyZWF0ZUFjdGlvbkZhY3RvcnlNZXRob2QoJ2NoZWNrb3V0JywgJ3Jlc2V0Jyk7XG5cbiAgICAgIG1vY2tDYXJ0U2VydmljZSA9IHsgc3RhdGU6IHsgZGF0YTogeyBpZDogNzcgfSB9IH07XG4gICAgICBtb2NrQ2hhbmdlRGV0ZWN0b3JSZWYgPSB7IG1hcmtGb3JDaGVjazogKCkgPT4geyB9IH07XG4gICAgICBjb21wb25lbnRVbmRlclRlc3QgPSBuZXcgQ2FydENvbXBvbmVudChcbiAgICAgICAgbW9ja0NhcGFiaWxpdGllcywgbW9ja0FwcFN0b3JlLCBtb2NrQ2FydFNlcnZpY2UsIG1vY2tDaGFuZ2VEZXRlY3RvclJlZlxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdJbml0aWFsaXphdGlvbicsICgpID0+IHtcbiAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBjb21wb25lbnRVbmRlclRlc3QubmdPbkluaXQoKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnZGVmaW5lcyB0aGUgZXhwZWN0ZWQgdGFicycsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC50YWJMYWJlbEtleXMpLnRvRXF1YWwoWydjYXJ0JywgJ2JpbGxpbmcnLCAncGF5bWVudCcsICdjb25maXJtJ10pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdkaXNhYmxlcyBhbGwgYnV0IHRoZSBmaXJzdCB0YWInLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3QudGFiRW5hYmxlZCkudG9FcXVhbChbdHJ1ZSwgZmFsc2UsIGZhbHNlLCBmYWxzZV0pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzZWxlY3RzIHRoZSBmaXJzdCB0YWInLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3Quc2VsZWN0ZWRUYWJJbmRleCkudG9CZSgwKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnZ2V0cyB0aGUgdWlDb25maWcgZm9yIHRoZSBjb21tZW50IGZvcm0nLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3QuY29tbWVudEZvcm1Db25maWcpLnRvRXF1YWwoWydjb25maWcnXSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ2Fzc2lnbnMgdGhlIGNvbW1lbnRQYXJlbnRPYmplY3QgaW5zdGFuY2UgdmFyaWFibGUnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3QuY29tbWVudFBhcmVudE9iamVjdCkudG9FcXVhbCh7IG9iamVjdFR5cGU6ICdjYXJ0Jywgb2JqZWN0SWQ6IDc3IH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgndG9nZ2xlQ29tbWVudHNWaXNpYmlsaXR5JywgKCkgPT4ge1xuICAgICAgaXQoJ3RvZ2dsZXMgdGhlIHNob3dDb21tZW50cyBmbGFnJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0LnNob3dDb21tZW50cykudG9CZU51bGwoKTtcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnRvZ2dsZUNvbW1lbnRzVmlzaWJpbGl0eSgpO1xuICAgICAgICBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0LnNob3dDb21tZW50cykudG9CZSh0cnVlKTtcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnRvZ2dsZUNvbW1lbnRzVmlzaWJpbGl0eSgpO1xuICAgICAgICBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0LnNob3dDb21tZW50cykudG9CZShmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdjb21tZW50Q291bnQnLCAoKSA9PiB7XG4gICAgICBpdCgnc2VsZWN0cyB0aGUgcmlnaHQgcGFydCBvZiB0aGUgc3RvcmUnLCAoKSA9PiB7XG4gICAgICAgIG1vY2tBcHBTdG9yZS5jcmVhdGVTdGF0ZVNlY3Rpb24oJ2NvbW1lbnQnLCB7IGNhcnQ6IHsgcGFnaW5hdGlvbjogeyB0b3RhbENvdW50OiAxMDAwIH0gfSB9KTtcbiAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LmNvbW1lbnRDb3VudC50YWtlKDEpLnN1YnNjcmliZShjb3VudCA9PiBleHBlY3QoY291bnQpLnRvQmUoMTAwMCkpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnb25Ob3RpZmljYXRpb24oKScsICgpID0+IHtcbiAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBjb21wb25lbnRVbmRlclRlc3QubmdPbkluaXQoKTtcbiAgICAgIH0pO1xuXG4gICAgICBkZXNjcmliZSgnR09fVE9fTkVYVF9UQUInLCAoKSA9PiB7XG4gICAgICAgIGl0KCdlbmFibGVzIHRoZSBuZXh0IHRhYiwgYnV0IG5vIG90aGVycycsICgpID0+IHtcbiAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Qub25Ob3RpZmljYXRpb24oeyB0eXBlOiAnR09fVE9fTkVYVF9UQUInIH0pO1xuXG4gICAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC50YWJFbmFibGVkKS50b0VxdWFsKFt0cnVlLCB0cnVlLCBmYWxzZSwgZmFsc2VdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3NlbGVjdHMgdGhlIG5leHQgdGFiJywgKGRvbmUpID0+IHtcbiAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Qub25Ob3RpZmljYXRpb24oeyB0eXBlOiAnR09fVE9fTkVYVF9UQUInIH0pO1xuXG4gICAgICAgICAgc2V0VGltZW91dChfID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3Quc2VsZWN0ZWRUYWJJbmRleCkudG9CZSgxKTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICB9LCAxMDApO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnZG9lcyBub3QgYWR2YW5jZSBiZXlvbmQgdGhlIGxhc3QgdGFiJywgKGRvbmUpID0+IHtcbiAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc2VsZWN0ZWRUYWJJbmRleCA9IDQ7XG4gICAgICAgICAgLy8gY29tcG9uZW50VW5kZXJUZXN0LnNlbGVjdGVkVGFiSW5kZXggPSAxO1xuXG4gICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0Lm9uTm90aWZpY2F0aW9uKHsgdHlwZTogJ0dPX1RPX05FWFRfVEFCJyB9KTtcblxuICAgICAgICAgIHNldFRpbWVvdXQoXyA9PiB7XG4gICAgICAgICAgICBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0LnNlbGVjdGVkVGFiSW5kZXgpLnRvQmUoNCk7XG4gICAgICAgICAgICAvLyBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0LnNlbGVjdGVkVGFiSW5kZXgpLnRvQmUoMSk7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJ0dPX1RPX1BSRVZJT1VTX1RBQicsICgpID0+IHtcbiAgICAgICAgaXQoJ3NlbGVjdHMgdGhlIHByZXZpb3VzIHRhYicsICgpID0+IHtcbiAgICAgICAgICAvLyBjb21wb25lbnRVbmRlclRlc3Quc2VsZWN0ZWRUYWJJbmRleCA9IDM7XG4gICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0LnNlbGVjdGVkVGFiSW5kZXggPSAxO1xuXG4gICAgICAgICAgY29tcG9uZW50VW5kZXJUZXN0Lm9uTm90aWZpY2F0aW9uKHsgdHlwZTogJ0dPX1RPX1BSRVZJT1VTX1RBQicgfSk7XG5cbiAgICAgICAgICAvLyBleHBlY3QoY29tcG9uZW50VW5kZXJUZXN0LnNlbGVjdGVkVGFiSW5kZXgpLnRvQmUoMik7XG4gICAgICAgICAgZXhwZWN0KGNvbXBvbmVudFVuZGVyVGVzdC5zZWxlY3RlZFRhYkluZGV4KS50b0JlKDApO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnZG9lcyBub3QgZ28gYmFjayBiZXlvbmQgdGhlIGZpcnN0IHRhYicsICgpID0+IHtcbiAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Quc2VsZWN0ZWRUYWJJbmRleCA9IDA7XG5cbiAgICAgICAgICBjb21wb25lbnRVbmRlclRlc3Qub25Ob3RpZmljYXRpb24oeyB0eXBlOiAnR09fVE9fUFJFVklPVVNfVEFCJyB9KTtcblxuICAgICAgICAgIGV4cGVjdChjb21wb25lbnRVbmRlclRlc3Quc2VsZWN0ZWRUYWJJbmRleCkudG9CZSgwKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuIl19
