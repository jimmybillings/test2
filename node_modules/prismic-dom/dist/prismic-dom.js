(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("PrismicDOM", [], factory);
	else if(typeof exports === 'object')
		exports["PrismicDOM"] = factory();
	else
		root["PrismicDOM"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
exports["default"] = {
    url: function (link, linkResolver) {
        if (link.link_type === 'Document') {
            return linkResolver ? linkResolver(link, link.isBroken) : '';
        }
        else {
            return link.url;
        }
    }
};


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var link_1 = __webpack_require__(0);
var ElementKind;
(function (ElementKind) {
    ElementKind[ElementKind["heading1"] = 0] = "heading1";
    ElementKind[ElementKind["heading2"] = 1] = "heading2";
    ElementKind[ElementKind["heading3"] = 2] = "heading3";
    ElementKind[ElementKind["heading4"] = 3] = "heading4";
    ElementKind[ElementKind["heading5"] = 4] = "heading5";
    ElementKind[ElementKind["heading6"] = 5] = "heading6";
    ElementKind[ElementKind["paragraph"] = 6] = "paragraph";
    ElementKind[ElementKind["preformatted"] = 7] = "preformatted";
    ElementKind[ElementKind["strong"] = 8] = "strong";
    ElementKind[ElementKind["em"] = 9] = "em";
    ElementKind[ElementKind["list-item"] = 10] = "list-item";
    ElementKind[ElementKind["o-list-item"] = 11] = "o-list-item";
    ElementKind[ElementKind["group-list-item"] = 12] = "group-list-item";
    ElementKind[ElementKind["group-o-list-item"] = 13] = "group-o-list-item";
    ElementKind[ElementKind["image"] = 14] = "image";
    ElementKind[ElementKind["embed"] = 15] = "embed";
    ElementKind[ElementKind["hyperlink"] = 16] = "hyperlink";
    ElementKind[ElementKind["label"] = 17] = "label";
})(ElementKind = exports.ElementKind || (exports.ElementKind = {}));
;
var Heading = (function () {
    function Heading(value, level, content) {
        this.value = value;
        this.level = level;
        this.content = content;
        switch (level) {
            case 1:
                this.kind = ElementKind.heading1;
                break;
            case 2:
                this.kind = ElementKind.heading2;
                break;
            case 3:
                this.kind = ElementKind.heading3;
                break;
            case 4:
                this.kind = ElementKind.heading4;
                break;
            case 5:
                this.kind = ElementKind.heading5;
                break;
            case 6:
                this.kind = ElementKind.heading6;
                break;
            default: throw Error("Invalid heading level " + level);
        }
        ;
    }
    Heading.prototype.serialize = function (htmlSerializer) {
        var classList = [this.value.label || ''];
        return htmlSerializer
            && htmlSerializer(this.value, this.content)
            || "<h" + this.level + " class=\"" + classList.join(' ') + "\">" + this.content + "</h" + this.level + ">";
    };
    return Heading;
}());
exports.Heading = Heading;
var ListItem = (function () {
    function ListItem(value, organized, content) {
        this.value = value;
        this.organized = organized;
        this.content = content;
    }
    ListItem.prototype.serialize = function (htmlSerializer) {
        var classList = [this.value.label || ''];
        return htmlSerializer
            && htmlSerializer(this.value, this.content)
            || "<li class=\"" + classList.join(' ') + "\">" + this.content + "</li>";
    };
    return ListItem;
}());
exports.ListItem = ListItem;
var List = (function () {
    function List(value, organized) {
        this.organized = organized;
        this.value = value;
    }
    List.prototype.serialize = function (htmlSerializer) {
        var items = this.value.map(function (item) {
            return htmlSerializer
                && htmlSerializer(item.value, item.content)
                || item.serialize(htmlSerializer);
        }).join('');
        if (this.organized) {
            return "<ol>" + items + "</ol>";
        }
        else {
            return "<ul>" + items + "</ul>";
        }
    };
    return List;
}());
exports.List = List;
var Paragraph = (function () {
    function Paragraph(value, content) {
        this.kind = ElementKind.paragraph;
        this.value = value;
        this.content = content;
    }
    Paragraph.prototype.serialize = function (htmlSerializer) {
        var classList = [this.value.label || ''];
        return htmlSerializer
            && htmlSerializer(this.value, this.content)
            || "<p class=\"" + classList.join(' ') + "\">" + this.content + "</p>";
    };
    return Paragraph;
}());
exports.Paragraph = Paragraph;
var Preformatted = (function () {
    function Preformatted(value, content) {
        this.kind = ElementKind.preformatted;
        this.value = value;
        this.content = content;
    }
    Preformatted.prototype.serialize = function (htmlSerializer) {
        var classList = [this.value.label || ''];
        return htmlSerializer
            && htmlSerializer(this.value, this.content)
            || "<pre class=\"" + classList.join(' ') + "\">" + this.content + "</pre>";
    };
    return Preformatted;
}());
exports.Preformatted = Preformatted;
var Strong = (function () {
    function Strong(value, content) {
        this.kind = ElementKind.strong;
        this.value = value;
        this.content = content;
    }
    Strong.prototype.serialize = function (htmlSerializer) {
        var classList = [this.value.label || ''];
        return htmlSerializer
            && htmlSerializer(this.value, this.content)
            || "<strong class=\"" + classList.join(' ') + "\">" + this.content + "</strong>";
    };
    return Strong;
}());
exports.Strong = Strong;
var Emphasized = (function () {
    function Emphasized(value, content) {
        this.kind = ElementKind.em;
        this.value = value;
        this.content = content;
    }
    Emphasized.prototype.serialize = function (htmlSerializer) {
        var classList = [this.value.label || ''];
        return htmlSerializer
            && htmlSerializer(this.value, this.content)
            || "<em class=\"" + classList.join(' ') + "\">" + this.content + "</em>";
    };
    return Emphasized;
}());
exports.Emphasized = Emphasized;
var Image = (function () {
    function Image(value, content, linkResolver) {
        this.kind = ElementKind.image;
        this.value = value;
        this.url = this.value.url;
        this.content = content;
        this.linkUrl = value.linkTo ? link_1["default"].url(value.linkTo, linkResolver) : null;
    }
    Image.prototype.serialize = function (htmlSerializer) {
        var wrapperClassList = [this.value.label || '', 'block-img'];
        var img = "<img src=\"" + this.value.url + "\" alt=\"" + (this.value.alt || '') + "\" copyright=\"" + (this.value.copyright || '') + "\">";
        return htmlSerializer
            && htmlSerializer(this.value, this.content)
            || ("\n        <p class=" + wrapperClassList.join(' ') + ">\n          " + (this.linkUrl ? "<a href=\"" + this.linkUrl + "\">" + img + "</a>" : img) + "\n        </p>\n      ");
    };
    return Image;
}());
exports.Image = Image;
var Embed = (function () {
    function Embed(value, content) {
        this.kind = ElementKind.embed;
        this.value = value;
        this.content = content;
    }
    Embed.prototype.serialize = function (htmlSerializer) {
        var classList = [this.value.label || ''];
        return htmlSerializer
            && htmlSerializer(this.value, this.content)
            || ("<div data-oembed=\"" + this.value.embed_url + "\"\n          data-oembed-type=\"" + this.value.type + "\"\n          data-oembed-provider=\"" + this.value.provider_name + "\n          class=\"" + classList.join(' ') + "\">\n          \n          " + this.value.oembed.html + "\n        </div>\n      ");
    };
    return Embed;
}());
exports.Embed = Embed;
var Link = (function () {
    function Link(value, content, linkResolver) {
        this.kind = ElementKind.hyperlink;
        this.value = value;
        this.content = content;
        this.url = link_1["default"].url(value, linkResolver);
    }
    Link.prototype.serialize = function (htmlSerializer) {
        return htmlSerializer
            && htmlSerializer(this.value, this.content)
            || "<a href=\"" + this.url + "\">" + this.content + "</a>";
    };
    return Link;
}());
exports.Link = Link;
var Label = (function () {
    function Label(value, content) {
        this.kind = ElementKind.label;
        this.value = value;
        this.content = content;
    }
    Label.prototype.serialize = function (htmlSerializer) {
        return htmlSerializer
            && htmlSerializer(this.value, this.content)
            || "<span class=\"" + this.value.data.label + "\">" + this.content + "</span>";
    };
    return Label;
}());
exports.Label = Label;
exports.Element = {
    apply: function (element, content, linkResolver) {
        switch (element.type) {
            case 'heading1': return new Heading(element, 1, content);
            case 'heading2': return new Heading(element, 2, content);
            case 'heading3': return new Heading(element, 3, content);
            case 'heading4': return new Heading(element, 4, content);
            case 'heading5': return new Heading(element, 5, content);
            case 'heading6': return new Heading(element, 6, content);
            case 'paragraph': return new Paragraph(element, content);
            case 'preformatted': return new Preformatted(element, content);
            case 'strong': return new Strong(element, content);
            case 'em': return new Emphasized(element, content);
            case 'list-item': return new ListItem(element, false, content);
            case 'o-list-item': return new ListItem(element, true, content);
            case 'image': return new Image(element, content, linkResolver);
            case 'embed': return new Embed(element, content);
            case 'hyperlink': return new Link(element, content, linkResolver);
            case 'label': return new Label(element, content);
            default: throw new Error("Invalid element type on element : " + JSON.stringify(element));
        }
    }
};


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var date_1 = __webpack_require__(3);
var richtext_1 = __webpack_require__(4);
var link_1 = __webpack_require__(0);
module.exports = { Date: date_1["default"], RichText: richtext_1["default"], Link: link_1["default"] };


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
function default_1(date) {
    if (!date)
        return null;
    var correctIso8601Date = (date.length == 24)
        ? date.substring(0, 22) + ":" + date.substring(22, 24)
        : date;
    return new Date(correctIso8601Date);
}
exports["default"] = default_1;
;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var elements_1 = __webpack_require__(1);
var spans_1 = __webpack_require__(5);
exports["default"] = {
    asText: function (structuredText) {
        return structuredText.reduce(function (acc, block) {
            return acc + " " + block.text;
        }, '');
    },
    asHtml: function (structuredText, linkResolver, htmlSerializer) {
        var elements = structuredText.reduce(function (acc, current) {
            var content = spans_1.insertSpans(current.text, current.spans, linkResolver, htmlSerializer);
            var block = elements_1.Element.apply(current, content, linkResolver);
            var tail = acc.length > 0 ? acc[acc.length - 1] : null;
            if (tail instanceof elements_1.List && block instanceof elements_1.ListItem && tail.organized === block.organized) {
                var list = new elements_1.List(tail.value.concat(block), block.organized);
                return acc.slice(0, acc.length - 1).concat([list]);
            }
            else if (block instanceof elements_1.ListItem) {
                return acc.concat([new elements_1.List([block], block.organized)]);
            }
            else {
                return acc.concat([block]);
            }
        }, []);
        var serialized = elements.map(function (e) { return e.serialize(htmlSerializer); });
        return serialized.join('');
    }
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var elements_1 = __webpack_require__(1);
var link_1 = __webpack_require__(0);
function htmlEscape(input) {
    return input && input.replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/\n/g, "<br>");
}
var TagType;
(function (TagType) {
})(TagType = exports.TagType || (exports.TagType = {}));
function insertSpans(text, spans, linkResolver, htmlSerializer) {
    if (!spans || !spans.length) {
        return htmlEscape(text);
    }
    var tagsStart = {};
    var tagsEnd = {};
    spans.forEach(function (span) {
        if (!tagsStart[span.start]) {
            tagsStart[span.start] = [];
        }
        if (!tagsEnd[span.end]) {
            tagsEnd[span.end] = [];
        }
        tagsStart[span.start].push(span);
        tagsEnd[span.end].unshift(span);
    });
    var c;
    var html = "";
    var stack = [];
    for (var pos = 0, len = text.length + 1; pos < len; pos++) {
        if (tagsEnd[pos]) {
            tagsEnd[pos].forEach(function () {
                // Close a tag
                var tag = stack.pop();
                // Continue only if block contains content.
                if (typeof tag !== 'undefined') {
                    var typedTag = elements_1.Element.apply(tag.span, tag.text, linkResolver);
                    var innerHtml = typedTag.serialize(htmlSerializer);
                    if (stack.length === 0) {
                        // The tag was top level
                        html += innerHtml;
                    }
                    else {
                        // Add the content to the parent tag
                        stack[stack.length - 1].text += innerHtml;
                    }
                }
            });
        }
        if (tagsStart[pos]) {
            // Sort bigger tags first to ensure the right tag hierarchy
            tagsStart[pos].sort(function (a, b) {
                return (b.end - b.start) - (a.end - a.start);
            });
            tagsStart[pos].forEach(function (span) {
                // Open a tag
                var url = null;
                if (span.type == "hyperlink") {
                    span.url = link_1["default"].url(span.data, linkResolver);
                }
                var elt = {
                    span: span,
                    text: ""
                };
                stack.push(elt);
            });
        }
        if (pos < text.length) {
            c = text[pos];
            if (stack.length === 0) {
                // Top-level text
                html += htmlEscape(c);
            }
            else {
                // Inner text of a span
                stack[stack.length - 1].text += htmlEscape(c);
            }
        }
    }
    return html;
}
exports.insertSpans = insertSpans;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(2);


/***/ })
/******/ ]);
});